
DiplomArbeitTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c15c  0800c15c  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c164  0800c164  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c168  0800c168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800c16c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000270  0800c3d8  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800c3d8  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eab  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4a  00000000  00000000  00038147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041b3  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018037  00000000  00000000  000416d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc875  00000000  00000000  0005970a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af8  00000000  00000000  00125fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000270 	.word	0x20000270
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc88 	.word	0x0800bc88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000274 	.word	0x20000274
 800021c:	0800bc88 	.word	0x0800bc88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <WriteToShiftRegInvers>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Latch HIGH
}


void WriteToShiftRegInvers(uint8_t value, uint8_t value2)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Latch LOW
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4834      	ldr	r0, [pc, #208]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 8000ff2:	f002 f9f3 	bl	80033dc <HAL_GPIO_WritePin>

	// Send Data
	uint8_t mask = 0b10000000;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	75fb      	strb	r3, [r7, #23]
	  for (int i = 0; i < 8; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e026      	b.n	800104e <WriteToShiftRegInvers+0x72>
	    // Send one bit of data
	    bool state = ((value & mask) > 0);
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4013      	ands	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf14      	ite	ne
 800100c:	2301      	movne	r3, #1
 800100e:	2300      	moveq	r3, #0
 8001010:	72bb      	strb	r3, [r7, #10]
	    if(state == 1)
 8001012:	7abb      	ldrb	r3, [r7, #10]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <WriteToShiftRegInvers+0x48>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Send 0
 8001018:	2200      	movs	r2, #0
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	4829      	ldr	r0, [pc, #164]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 800101e:	f002 f9dd 	bl	80033dc <HAL_GPIO_WritePin>
 8001022:	e004      	b.n	800102e <WriteToShiftRegInvers+0x52>
	    else
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Send 1
 8001024:	2201      	movs	r2, #1
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 800102a:	f002 f9d7 	bl	80033dc <HAL_GPIO_WritePin>
	    // Pulse the CLOCK pin so that the shift register receives the bit of data
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Clock High
 800102e:	2201      	movs	r2, #1
 8001030:	2120      	movs	r1, #32
 8001032:	4824      	ldr	r0, [pc, #144]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 8001034:	f002 f9d2 	bl	80033dc <HAL_GPIO_WritePin>
	    //HAL_Delay (1);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Clock LOW
 8001038:	2200      	movs	r2, #0
 800103a:	2120      	movs	r1, #32
 800103c:	4821      	ldr	r0, [pc, #132]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 800103e:	f002 f9cd 	bl	80033dc <HAL_GPIO_WritePin>
	    mask >>= 1;
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]
	  for (int i = 0; i < 8; i++) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b07      	cmp	r3, #7
 8001052:	ddd5      	ble.n	8001000 <WriteToShiftRegInvers+0x24>
	  }

	  mask = 0b10000000;
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	75fb      	strb	r3, [r7, #23]
	  	  for (int i = 0; i < 8; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e026      	b.n	80010ac <WriteToShiftRegInvers+0xd0>
	  	    // Send one bit of data
	  	    bool state = ((value2 & mask) > 0);
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	4013      	ands	r3, r2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	72fb      	strb	r3, [r7, #11]
	  	    if(state == 1)
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <WriteToShiftRegInvers+0xa6>
	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Send 0
 8001076:	2200      	movs	r2, #0
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 800107c:	f002 f9ae 	bl	80033dc <HAL_GPIO_WritePin>
 8001080:	e004      	b.n	800108c <WriteToShiftRegInvers+0xb0>
	  	    else
	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Send 1
 8001082:	2201      	movs	r2, #1
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 8001088:	f002 f9a8 	bl	80033dc <HAL_GPIO_WritePin>
	  	    // Pulse the CLOCK pin so that the shift register receives the bit of data
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Clock High
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 8001092:	f002 f9a3 	bl	80033dc <HAL_GPIO_WritePin>
	  	    //HAL_Delay (1);
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Clock LOW
 8001096:	2200      	movs	r2, #0
 8001098:	2120      	movs	r1, #32
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 800109c:	f002 f99e 	bl	80033dc <HAL_GPIO_WritePin>
	  	    mask >>= 1;
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
	  	  for (int i = 0; i < 8; i++) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	ddd5      	ble.n	800105e <WriteToShiftRegInvers+0x82>
	  	  }

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Latch HIGH
 80010b2:	2201      	movs	r2, #1
 80010b4:	2110      	movs	r1, #16
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <WriteToShiftRegInvers+0xe8>)
 80010b8:	f002 f990 	bl	80033dc <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	48000400 	.word	0x48000400

080010c8 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	69b9      	ldr	r1, [r7, #24]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	1a8a      	subs	r2, r1, r2
 80010e2:	fb03 f202 	mul.w	r2, r3, r2
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1acb      	subs	r3, r1, r3
 80010ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	ReadWrite = 1;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_UART_TxCpltCallback+0x1c>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200004c0 	.word	0x200004c0

08001120 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	ReadWrite = 0;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_UART_RxCpltCallback+0x1c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200004c0 	.word	0x200004c0

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f001 fb14 	bl	8002772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f985 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fbdf 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 fbab 	bl	80018ac <MX_DMA_Init>
  MX_TIM1_Init();
 8001156:	f000 fa0b 	bl	8001570 <MX_TIM1_Init>
  MX_I2C1_Init();
 800115a:	f000 f9c9 	bl	80014f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800115e:	f000 fb57 	bl	8001810 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001162:	f000 fadd 	bl	8001720 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all MPU max 16
  for(int i = 0; i < MPU_COUNT; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e04e      	b.n	800120a <main+0xca>
  	  {
	  	  	  if(i < 8)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b07      	cmp	r3, #7
 8001170:	dc23      	bgt.n	80011ba <main+0x7a>
	  		  {
	  			  WriteToShiftRegInvers(0,pow(2,i));
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff f9fe 	bl	8000574 <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	ec43 2b11 	vmov	d1, r2, r3
 8001180:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8001418 <main+0x2d8>
 8001184:	f007 f82c 	bl	80081e0 <pow>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd32 	bl	8000bf8 <__aeabi_d2uiz>
 8001194:	4603      	mov	r3, r0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ff1e 	bl	8000fdc <WriteToShiftRegInvers>
	  			  while(MPU6050_Init(&hi2c1))
 80011a0:	bf00      	nop
 80011a2:	489f      	ldr	r0, [pc, #636]	; (8001420 <main+0x2e0>)
 80011a4:	f000 fc03 	bl	80019ae <MPU6050_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <main+0x62>
	  			  {
	  			  }
	  			  MPU_INITIALIZE_COUNT++;
 80011ae:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <main+0x2e4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a9b      	ldr	r2, [pc, #620]	; (8001424 <main+0x2e4>)
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e024      	b.n	8001204 <main+0xc4>
	  		  }else{
	  			  WriteToShiftRegInvers(pow(2,i - 8),0);
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3b08      	subs	r3, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9d8 	bl	8000574 <__aeabi_i2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b11 	vmov	d1, r2, r3
 80011cc:	ed9f 0b92 	vldr	d0, [pc, #584]	; 8001418 <main+0x2d8>
 80011d0:	f007 f806 	bl	80081e0 <pow>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd0c 	bl	8000bf8 <__aeabi_d2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fef8 	bl	8000fdc <WriteToShiftRegInvers>
	  			  while(MPU6050_Init(&hi2c1))
 80011ec:	bf00      	nop
 80011ee:	488c      	ldr	r0, [pc, #560]	; (8001420 <main+0x2e0>)
 80011f0:	f000 fbdd 	bl	80019ae <MPU6050_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f9      	bne.n	80011ee <main+0xae>
	  			  {
	  			  }
	  			  MPU_INITIALIZE_COUNT++;
 80011fa:	4b8a      	ldr	r3, [pc, #552]	; (8001424 <main+0x2e4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a88      	ldr	r2, [pc, #544]	; (8001424 <main+0x2e4>)
 8001202:	6013      	str	r3, [r2, #0]
  for(int i = 0; i < MPU_COUNT; i++)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b09      	cmp	r3, #9
 800120e:	ddad      	ble.n	800116c <main+0x2c>

  	   }

  // Initialize PWM For Servo
  // 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001210:	2100      	movs	r1, #0
 8001212:	4885      	ldr	r0, [pc, #532]	; (8001428 <main+0x2e8>)
 8001214:	f003 ff76 	bl	8005104 <HAL_TIM_PWM_Start>
  // 2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001218:	2104      	movs	r1, #4
 800121a:	4883      	ldr	r0, [pc, #524]	; (8001428 <main+0x2e8>)
 800121c:	f003 ff72 	bl	8005104 <HAL_TIM_PWM_Start>
  // 3
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001220:	2108      	movs	r1, #8
 8001222:	4881      	ldr	r0, [pc, #516]	; (8001428 <main+0x2e8>)
 8001224:	f003 ff6e 	bl	8005104 <HAL_TIM_PWM_Start>
  // 4
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001228:	210c      	movs	r1, #12
 800122a:	487f      	ldr	r0, [pc, #508]	; (8001428 <main+0x2e8>)
 800122c:	f003 ff6a 	bl	8005104 <HAL_TIM_PWM_Start>
  // 5
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	487e      	ldr	r0, [pc, #504]	; (800142c <main+0x2ec>)
 8001234:	f003 ff66 	bl	8005104 <HAL_TIM_PWM_Start>
  int time2;

  while (1)
  {
	  // Read all MPU, max 16
	  time1 = uwTick;
 8001238:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <main+0x2f0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
	  for(int i = 0; i < MPU_COUNT; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	e04c      	b.n	80012de <main+0x19e>
	  {
		  if(i < 8)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b07      	cmp	r3, #7
 8001248:	dc22      	bgt.n	8001290 <main+0x150>
		  {
			  WriteToShiftRegInvers(0,pow(2,i));
 800124a:	6938      	ldr	r0, [r7, #16]
 800124c:	f7ff f992 	bl	8000574 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	ec43 2b11 	vmov	d1, r2, r3
 8001258:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8001418 <main+0x2d8>
 800125c:	f006 ffc0 	bl	80081e0 <pow>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fcc6 	bl	8000bf8 <__aeabi_d2uiz>
 800126c:	4603      	mov	r3, r0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff feb2 	bl	8000fdc <WriteToShiftRegInvers>
			  MPU6050_Read_All(&hi2c1, &MPU6050[i]);
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <main+0x2f4>)
 8001284:	4413      	add	r3, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4865      	ldr	r0, [pc, #404]	; (8001420 <main+0x2e0>)
 800128a:	f000 fbe9 	bl	8001a60 <MPU6050_Read_All>
 800128e:	e023      	b.n	80012d8 <main+0x198>
			  //MPU6050_Read_Accel(&hi2c1, &MPU6050[i]);
			  //MPU6050_Read_Gyro(&hi2c1, &MPU6050[i]);
		  }else{
			  WriteToShiftRegInvers(pow(2,i - 8),0);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	3b08      	subs	r3, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f96d 	bl	8000574 <__aeabi_i2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ec43 2b11 	vmov	d1, r2, r3
 80012a2:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8001418 <main+0x2d8>
 80012a6:	f006 ff9b 	bl	80081e0 <pow>
 80012aa:	ec53 2b10 	vmov	r2, r3, d0
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fca1 	bl	8000bf8 <__aeabi_d2uiz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe8d 	bl	8000fdc <WriteToShiftRegInvers>
			  MPU6050_Read_All(&hi2c1, &MPU6050[i]);
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4a59      	ldr	r2, [pc, #356]	; (8001434 <main+0x2f4>)
 80012ce:	4413      	add	r3, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	4853      	ldr	r0, [pc, #332]	; (8001420 <main+0x2e0>)
 80012d4:	f000 fbc4 	bl	8001a60 <MPU6050_Read_All>
	  for(int i = 0; i < MPU_COUNT; i++)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	3301      	adds	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	ddaf      	ble.n	8001244 <main+0x104>
			  //MPU6050_Read_Accel(&hi2c1, &MPU6050[i]);
			  //MPU6050_Read_Gyro(&hi2c1, &MPU6050[i]);
		  }
	  }
	  time2 = uwTick;
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <main+0x2f0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60bb      	str	r3, [r7, #8]
	  time = time2 - time1;
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <main+0x2f8>)
 80012f2:	6013      	str	r3, [r2, #0]
	  // Send Data to PC
	  if(ReadWrite == 0)
 80012f4:	4b51      	ldr	r3, [pc, #324]	; (800143c <main+0x2fc>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d108      	bne.n	800130e <main+0x1ce>
 80012fc:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <main+0x2f4>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	  {
      char buffer[sizeof(float)];
	  memcpy(buffer,&MPU6050[0].KalmanAngleX,sizeof(float));
 8001300:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit_IT(&huart2,buffer,sizeof(float));
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2204      	movs	r2, #4
 8001306:	4619      	mov	r1, r3
 8001308:	484d      	ldr	r0, [pc, #308]	; (8001440 <main+0x300>)
 800130a:	f004 ffc3 	bl	8006294 <HAL_UART_Transmit_IT>
	  }
	  // Data = Position[Degrees: 0 - 180]
	  // Receive Data from PC		One number at a Time : 10 then send 20 then send 30 then send 40 then send 50
	  if(ReadWrite == 1)
 800130e:	4b4b      	ldr	r3, [pc, #300]	; (800143c <main+0x2fc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d15e      	bne.n	80013d4 <main+0x294>
	  {
	  if(ReceiveMode == 0)
 8001316:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <main+0x304>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d12e      	bne.n	800137c <main+0x23c>
	  {
      if(HAL_UART_Receive_DMA(&huart2,&RXData,1) == HAL_OK)
 800131e:	2201      	movs	r2, #1
 8001320:	4949      	ldr	r1, [pc, #292]	; (8001448 <main+0x308>)
 8001322:	4847      	ldr	r0, [pc, #284]	; (8001440 <main+0x300>)
 8001324:	f005 f85e 	bl	80063e4 <HAL_UART_Receive_DMA>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d126      	bne.n	800137c <main+0x23c>
      {
    	  //Update Servo from Degrees to DutyCycle
    	  if(RXData != 255) // 255 = Free Rotation of Servo
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <main+0x308>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2bff      	cmp	r3, #255	; 0xff
 8001334:	d015      	beq.n	8001362 <main+0x222>
    	  {
    		  if(RXData <= 180 && RXData >= 0 )
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <main+0x308>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2bb4      	cmp	r3, #180	; 0xb4
 800133c:	d817      	bhi.n	800136e <main+0x22e>
    		  {
    			  ServoData[RX_Counter] = MAP(RXData,0,180,25,125); // Remap from Degrees to Duty Cycle
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <main+0x308>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	237d      	movs	r3, #125	; 0x7d
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2319      	movs	r3, #25
 800134a:	22b4      	movs	r2, #180	; 0xb4
 800134c:	2100      	movs	r1, #0
 800134e:	f7ff febb 	bl	80010c8 <MAP>
 8001352:	4601      	mov	r1, r0
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <main+0x30c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <main+0x310>)
 800135e:	5499      	strb	r1, [r3, r2]
 8001360:	e005      	b.n	800136e <main+0x22e>
    		  }
    	  }
    	  else
    	  {
    	      	ServoData[RX_Counter] = 0;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <main+0x30c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <main+0x310>)
 800136a:	2100      	movs	r1, #0
 800136c:	5499      	strb	r1, [r3, r2]
    	  }

    	  //RX_Counter++;
    	  if(RX_Counter >= 5)
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <main+0x30c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d902      	bls.n	800137c <main+0x23c>
    		  RX_Counter = 0;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <main+0x30c>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
      }
	  }

	  // Data = Servonumber[int: 0 - 4] Position[Degrees: 0 - 180]
      // Receive Data from Pc with a Servo in mind : 1 59 ,2 30 ,5 40 ,1 80
	  if(ReceiveMode == 1)
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <main+0x304>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d127      	bne.n	80013d4 <main+0x294>
	  {
      if(HAL_UART_Receive_DMA(&huart2,&RXDataS,2) == HAL_OK)
 8001384:	2202      	movs	r2, #2
 8001386:	4933      	ldr	r1, [pc, #204]	; (8001454 <main+0x314>)
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <main+0x300>)
 800138a:	f005 f82b 	bl	80063e4 <HAL_UART_Receive_DMA>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11f      	bne.n	80013d4 <main+0x294>
      {
          //Update Servo from Degrees to DutyCycle
          if(RXDataS[1] != 255) // 255 = Free Rotation of Servo
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <main+0x314>)
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d015      	beq.n	80013c8 <main+0x288>
          {
          	if(RXDataS[1] <= 180 && RXDataS[1] >= 0 )
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <main+0x314>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	2bb4      	cmp	r3, #180	; 0xb4
 80013a2:	d817      	bhi.n	80013d4 <main+0x294>
          	{
          		ServoData[RXDataS[0]] = MAP(RXDataS[1],0,180,25,125); // Remap from Degrees to Duty Cycle
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <main+0x314>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	4618      	mov	r0, r3
 80013aa:	237d      	movs	r3, #125	; 0x7d
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2319      	movs	r3, #25
 80013b0:	22b4      	movs	r2, #180	; 0xb4
 80013b2:	2100      	movs	r1, #0
 80013b4:	f7ff fe88 	bl	80010c8 <MAP>
 80013b8:	4601      	mov	r1, r0
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <main+0x314>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	b2c9      	uxtb	r1, r1
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <main+0x310>)
 80013c4:	5499      	strb	r1, [r3, r2]
 80013c6:	e005      	b.n	80013d4 <main+0x294>
          	}
          }
          else
          {
          	    ServoData[RXDataS[0]] = 0;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <main+0x314>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <main+0x310>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]
          }
      }
	  }
	  }
	  // I dont know if we need it, Flashes the RX buffer of the STM Chip
      __HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST);
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <main+0x300>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <main+0x300>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0208 	orr.w	r2, r2, #8
 80013e2:	619a      	str	r2, [r3, #24]

      // Write Servo Duty Cycles
      htim1.Instance->CCR1 = ServoData[0];
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <main+0x310>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <main+0x2e8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
      htim1.Instance->CCR2 = ServoData[1];
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <main+0x310>)
 80013f0:	785a      	ldrb	r2, [r3, #1]
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <main+0x2e8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
      htim1.Instance->CCR3 = ServoData[2];
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <main+0x310>)
 80013fa:	789a      	ldrb	r2, [r3, #2]
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <main+0x2e8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
      htim1.Instance->CCR4 = ServoData[3];
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <main+0x310>)
 8001404:	78da      	ldrb	r2, [r3, #3]
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <main+0x2e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
      htim4.Instance->CCR2 = ServoData[4];
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <main+0x310>)
 800140e:	791a      	ldrb	r2, [r3, #4]
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <main+0x2ec>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
	  time1 = uwTick;
 8001416:	e70f      	b.n	8001238 <main+0xf8>
 8001418:	00000000 	.word	0x00000000
 800141c:	40000000 	.word	0x40000000
 8001420:	2000028c 	.word	0x2000028c
 8001424:	200007e8 	.word	0x200007e8
 8001428:	20000338 	.word	0x20000338
 800142c:	20000384 	.word	0x20000384
 8001430:	20000808 	.word	0x20000808
 8001434:	200004c8 	.word	0x200004c8
 8001438:	200007ec 	.word	0x200007ec
 800143c:	200004c0 	.word	0x200004c0
 8001440:	200003d0 	.word	0x200003d0
 8001444:	200007f0 	.word	0x200007f0
 8001448:	200007f1 	.word	0x200007f1
 800144c:	200007fd 	.word	0x200007fd
 8001450:	200007f8 	.word	0x200007f8
 8001454:	200007f4 	.word	0x200007f4

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2238      	movs	r2, #56	; 0x38
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 feee 	bl	8009248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800147a:	2000      	movs	r0, #0
 800147c:	f002 fdc2 	bl	8004004 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	2303      	movs	r3, #3
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8001496:	231c      	movs	r3, #28
 8001498:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149a:	2302      	movs	r3, #2
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fe4e 	bl	800414c <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014b6:	f000 fa75 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2303      	movs	r3, #3
 80014c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80014c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80014cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2104      	movs	r1, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f950 	bl	800477c <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014e2:	f000 fa5f 	bl	80019a4 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3750      	adds	r7, #80	; 0x50
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200923;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <MX_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <MX_I2C1_Init+0x74>)
 800152c:	f001 ff6e 	bl	800340c <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 fa35 	bl	80019a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <MX_I2C1_Init+0x74>)
 800153e:	f002 fcc9 	bl	8003ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 fa2c 	bl	80019a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_I2C1_Init+0x74>)
 8001550:	f002 fd0b 	bl	8003f6a <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fa23 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000028c 	.word	0x2000028c
 8001568:	40005400 	.word	0x40005400
 800156c:	00200923 	.word	0x00200923

08001570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b09c      	sub	sp, #112	; 0x70
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2234      	movs	r2, #52	; 0x34
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f007 fe4c 	bl	8009248 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015b2:	4a5a      	ldr	r2, [pc, #360]	; (800171c <MX_TIM1_Init+0x1ac>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 80015b6:	4b58      	ldr	r3, [pc, #352]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80015bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b52      	ldr	r3, [pc, #328]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d2:	4b51      	ldr	r3, [pc, #324]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015de:	484e      	ldr	r0, [pc, #312]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015e0:	f003 fcd8 	bl	8004f94 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015ea:	f000 f9db 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015f8:	4619      	mov	r1, r3
 80015fa:	4847      	ldr	r0, [pc, #284]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80015fc:	f003 ff96 	bl	800552c <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001606:	f000 f9cd 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800160a:	4843      	ldr	r0, [pc, #268]	; (8001718 <MX_TIM1_Init+0x1a8>)
 800160c:	f003 fd19 	bl	8005042 <HAL_TIM_PWM_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001616:	f000 f9c5 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800162a:	4619      	mov	r1, r3
 800162c:	483a      	ldr	r0, [pc, #232]	; (8001718 <MX_TIM1_Init+0x1a8>)
 800162e:	f004 fcbf 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001638:	f000 f9b4 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8001640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	482d      	ldr	r0, [pc, #180]	; (8001718 <MX_TIM1_Init+0x1a8>)
 8001664:	f003 fe4e 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800166e:	f000 f999 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4826      	ldr	r0, [pc, #152]	; (8001718 <MX_TIM1_Init+0x1a8>)
 8001680:	f003 fe40 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800168a:	f000 f98b 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001692:	2208      	movs	r2, #8
 8001694:	4619      	mov	r1, r3
 8001696:	4820      	ldr	r0, [pc, #128]	; (8001718 <MX_TIM1_Init+0x1a8>)
 8001698:	f003 fe34 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80016a2:	f000 f97f 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016aa:	220c      	movs	r2, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	481a      	ldr	r0, [pc, #104]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80016b0:	f003 fe28 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80016ba:	f000 f973 	bl	80019a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM1_Init+0x1a8>)
 80016fc:	f004 fcda 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 8001706:	f000 f94d 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM1_Init+0x1a8>)
 800170c:	f000 fdcc 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 8001710:	bf00      	nop
 8001712:	3770      	adds	r7, #112	; 0x70
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000338 	.word	0x20000338
 800171c:	40012c00 	.word	0x40012c00

08001720 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <MX_TIM4_Init+0xec>)
 8001756:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_TIM4_Init+0xe8>)
 800175a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800175e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800177a:	4823      	ldr	r0, [pc, #140]	; (8001808 <MX_TIM4_Init+0xe8>)
 800177c:	f003 fc0a 	bl	8004f94 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001786:	f000 f90d 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4619      	mov	r1, r3
 8001796:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_TIM4_Init+0xe8>)
 8001798:	f003 fec8 	bl	800552c <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80017a2:	f000 f8ff 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017a8:	f003 fc4b 	bl	8005042 <HAL_TIM_PWM_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80017b2:	f000 f8f7 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017c6:	f004 fbf3 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80017d0:	f000 f8e8 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	2204      	movs	r2, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017ec:	f003 fd8a 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80017f6:	f000 f8d5 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <MX_TIM4_Init+0xe8>)
 80017fc:	f000 fd54 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000384 	.word	0x20000384
 800180c:	40000800 	.word	0x40000800

08001810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <MX_USART2_UART_Init+0x94>)
 8001818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800181c:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <MX_USART2_UART_Init+0x98>)
 800181e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001834:	220c      	movs	r2, #12
 8001836:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 8001858:	f004 fccc 	bl	80061f4 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001862:	f000 f89f 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800186a:	f006 fa43 	bl	8007cf4 <HAL_UARTEx_SetTxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001874:	f000 f896 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001878:	2100      	movs	r1, #0
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800187c:	f006 fa78 	bl	8007d70 <HAL_UARTEx_SetRxFifoThreshold>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001886:	f000 f88d 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART2_UART_Init+0x90>)
 800188c:	f006 f9f9 	bl	8007c82 <HAL_UARTEx_DisableFifoMode>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001896:	f000 f885 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003d0 	.word	0x200003d0
 80018a4:	40004400 	.word	0x40004400
 80018a8:	0008ca00 	.word	0x0008ca00

080018ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_DMA_Init+0x60>)
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <MX_DMA_Init+0x60>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6493      	str	r3, [r2, #72]	; 0x48
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_DMA_Init+0x60>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_DMA_Init+0x60>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_DMA_Init+0x60>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6493      	str	r3, [r2, #72]	; 0x48
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_DMA_Init+0x60>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	200b      	movs	r0, #11
 80018e8:	f001 f88f 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018ec:	200b      	movs	r0, #11
 80018ee:	f001 f8a6 	bl	8002a3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	200c      	movs	r0, #12
 80018f8:	f001 f887 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018fc:	200c      	movs	r0, #12
 80018fe:	f001 f89e 	bl	8002a3e <HAL_NVIC_EnableIRQ>

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_GPIO_Init+0x8c>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_GPIO_Init+0x8c>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_GPIO_Init+0x8c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_GPIO_Init+0x8c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <MX_GPIO_Init+0x8c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <MX_GPIO_Init+0x8c>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_GPIO_Init+0x8c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <MX_GPIO_Init+0x8c>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_GPIO_Init+0x8c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_Pin|SHCLK_Pin|DS_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2170      	movs	r1, #112	; 0x70
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <MX_GPIO_Init+0x90>)
 8001974:	f001 fd32 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Latch_Pin SHCLK_Pin DS_Pin */
  GPIO_InitStruct.Pin = Latch_Pin|SHCLK_Pin|DS_Pin;
 8001978:	2370      	movs	r3, #112	; 0x70
 800197a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4619      	mov	r1, r3
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_GPIO_Init+0x90>)
 8001990:	f001 fba2 	bl	80030d8 <HAL_GPIO_Init>

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>

080019ae <MPU6050_Init>:
	.R_measure = 0.01f// 0.03
};


uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b088      	sub	sp, #32
 80019b2:	af04      	add	r7, sp, #16
 80019b4:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f107 030f 	add.w	r3, r7, #15
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	2275      	movs	r2, #117	; 0x75
 80019c8:	21d0      	movs	r1, #208	; 0xd0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 fec2 	bl	8003754 <HAL_I2C_Mem_Read>



    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b68      	cmp	r3, #104	; 0x68
 80019d4:	d13d      	bne.n	8001a52 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80019da:	2364      	movs	r3, #100	; 0x64
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	2301      	movs	r3, #1
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	f107 030e 	add.w	r3, r7, #14
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2301      	movs	r3, #1
 80019ea:	226b      	movs	r2, #107	; 0x6b
 80019ec:	21d0      	movs	r1, #208	; 0xd0
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 fd9c 	bl	800352c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80019f4:	2307      	movs	r3, #7
 80019f6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	2301      	movs	r3, #1
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	f107 030e 	add.w	r3, r7, #14
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	2219      	movs	r2, #25
 8001a0a:	21d0      	movs	r1, #208	; 0xd0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 fd8d 	bl	800352c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	f107 030e 	add.w	r3, r7, #14
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2301      	movs	r3, #1
 8001a26:	221c      	movs	r2, #28
 8001a28:	21d0      	movs	r1, #208	; 0xd0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f001 fd7e 	bl	800352c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	f107 030e 	add.w	r3, r7, #14
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	221b      	movs	r2, #27
 8001a46:	21d0      	movs	r1, #208	; 0xd0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 fd6f 	bl	800352c <HAL_I2C_Mem_Write>
        return 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <MPU6050_Init+0xa6>
    }
    return check;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a64:	b094      	sub	sp, #80	; 0x50
 8001a66:	af04      	add	r7, sp, #16
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG,1, Rec_Data, 14,i2c_timeout);
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	230e      	movs	r3, #14
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	223b      	movs	r2, #59	; 0x3b
 8001a7e:	21d0      	movs	r1, #208	; 0xd0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f001 fe67 	bl	8003754 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001a86:	7a3b      	ldrb	r3, [r7, #8]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	7a7b      	ldrb	r3, [r7, #9]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001a98:	7abb      	ldrb	r3, [r7, #10]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001aaa:	7b3b      	ldrb	r3, [r7, #12]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	7b7b      	ldrb	r3, [r7, #13]
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001aca:	7c3b      	ldrb	r3, [r7, #16]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	7c7b      	ldrb	r3, [r7, #17]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001adc:	7cbb      	ldrb	r3, [r7, #18]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001aee:	7d3b      	ldrb	r3, [r7, #20]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	7d7b      	ldrb	r3, [r7, #21]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd34 	bl	8000574 <__aeabi_i2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4bbd      	ldr	r3, [pc, #756]	; (8001e08 <MPU6050_Read_All+0x3a8>)
 8001b12:	f7fe fec3 	bl	800089c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd24 	bl	8000574 <__aeabi_i2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4bb5      	ldr	r3, [pc, #724]	; (8001e08 <MPU6050_Read_All+0x3a8>)
 8001b32:	f7fe feb3 	bl	800089c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd14 	bl	8000574 <__aeabi_i2d>
 8001b4c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001df0 <MPU6050_Read_All+0x390>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fea3 	bl	800089c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001b60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001e0c <MPU6050_Read_All+0x3ac>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001e10 <MPU6050_Read_All+0x3b0>
 8001b78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcf3 	bl	8000574 <__aeabi_i2d>
 8001b8e:	a39a      	add	r3, pc, #616	; (adr r3, 8001df8 <MPU6050_Read_All+0x398>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fe82 	bl	800089c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fce3 	bl	8000574 <__aeabi_i2d>
 8001bae:	a392      	add	r3, pc, #584	; (adr r3, 8001df8 <MPU6050_Read_All+0x398>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fe72 	bl	800089c <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcd3 	bl	8000574 <__aeabi_i2d>
 8001bce:	a38a      	add	r3, pc, #552	; (adr r3, 8001df8 <MPU6050_Read_All+0x398>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fe62 	bl	800089c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001be2:	f000 fe2b 	bl	800283c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <MPU6050_Read_All+0x3b4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcb0 	bl	8000554 <__aeabi_ui2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <MPU6050_Read_All+0x3b8>)
 8001bfa:	f7fe fe4f 	bl	800089c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001c06:	f000 fe19 	bl	800283c <HAL_GetTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a81      	ldr	r2, [pc, #516]	; (8001e14 <MPU6050_Read_All+0x3b4>)
 8001c0e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	fb03 f202 	mul.w	r2, r3, r2
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc9c 	bl	8000574 <__aeabi_i2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	f006 fb3c 	bl	80082c0 <sqrt>
 8001c48:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c58:	f7fe ff5e 	bl	8000b18 <__aeabi_dcmpeq>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11f      	bne.n	8001ca2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc83 	bl	8000574 <__aeabi_i2d>
 8001c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c72:	f7fe fe13 	bl	800089c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	ec43 2b17 	vmov	d7, r2, r3
 8001c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c82:	eef0 0a67 	vmov.f32	s1, s15
 8001c86:	f006 f8ff 	bl	8007e88 <atan>
 8001c8a:	ec51 0b10 	vmov	r0, r1, d0
 8001c8e:	a35c      	add	r3, pc, #368	; (adr r3, 8001e00 <MPU6050_Read_All+0x3a0>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcd8 	bl	8000648 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ca0:	e005      	b.n	8001cae <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc5c 	bl	8000574 <__aeabi_i2d>
 8001cbc:	4680      	mov	r8, r0
 8001cbe:	4689      	mov	r9, r1
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc54 	bl	8000574 <__aeabi_i2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	ec43 2b11 	vmov	d1, r2, r3
 8001cd4:	ec49 8b10 	vmov	d0, r8, r9
 8001cd8:	f006 fa7f 	bl	80081da <atan2>
 8001cdc:	ec51 0b10 	vmov	r0, r1, d0
 8001ce0:	a347      	add	r3, pc, #284	; (adr r3, 8001e00 <MPU6050_Read_All+0x3a0>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fcaf 	bl	8000648 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <MPU6050_Read_All+0x3bc>)
 8001cf8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfc:	f7fe ff16 	bl	8000b2c <__aeabi_dcmplt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <MPU6050_Read_All+0x2ba>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d0c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001e20 <MPU6050_Read_All+0x3c0>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dc13      	bgt.n	8001d42 <MPU6050_Read_All+0x2e2>
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <MPU6050_Read_All+0x3c4>)
 8001d20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d24:	f7fe ff20 	bl	8000b68 <__aeabi_dcmpgt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <MPU6050_Read_All+0x2fc>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d34:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001e28 <MPU6050_Read_All+0x3c8>
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d50c      	bpl.n	8001d5c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001d42:	493a      	ldr	r1, [pc, #232]	; (8001e2c <MPU6050_Read_All+0x3cc>)
 8001d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d48:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001d4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d50:	f7fe ff72 	bl	8000c38 <__aeabi_d2f>
 8001d54:	4602      	mov	r2, r0
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	649a      	str	r2, [r3, #72]	; 0x48
 8001d5a:	e016      	b.n	8001d8a <MPU6050_Read_All+0x32a>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001d62:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001d66:	eeb0 1a47 	vmov.f32	s2, s14
 8001d6a:	eef0 1a67 	vmov.f32	s3, s15
 8001d6e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d72:	482e      	ldr	r0, [pc, #184]	; (8001e2c <MPU6050_Read_All+0x3cc>)
 8001d74:	f000 f85e 	bl	8001e34 <Kalman_getAngle>
 8001d78:	ec53 2b10 	vmov	r2, r3, d0
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff5a 	bl	8000c38 <__aeabi_d2f>
 8001d84:	4602      	mov	r2, r0
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	649a      	str	r2, [r3, #72]	; 0x48
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d90:	eef0 7ae7 	vabs.f32	s15, s15
 8001d94:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e20 <MPU6050_Read_All+0x3c0>
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd08      	ble.n	8001db4 <MPU6050_Read_All+0x354>
        DataStruct->Gx = -DataStruct->Gx;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001da8:	4614      	mov	r4, r2
 8001daa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001dba:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001dbe:	eeb0 1a47 	vmov.f32	s2, s14
 8001dc2:	eef0 1a67 	vmov.f32	s3, s15
 8001dc6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <MPU6050_Read_All+0x3d0>)
 8001dcc:	f000 f832 	bl	8001e34 <Kalman_getAngle>
 8001dd0:	ec53 2b10 	vmov	r2, r3, d0
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff2e 	bl	8000c38 <__aeabi_d2f>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001de2:	bf00      	nop
 8001de4:	3740      	adds	r7, #64	; 0x40
 8001de6:	46bd      	mov	sp, r7
 8001de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40cc2900 	.word	0x40cc2900
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40606000 	.word	0x40606000
 8001e00:	1a63c1f8 	.word	0x1a63c1f8
 8001e04:	404ca5dc 	.word	0x404ca5dc
 8001e08:	40d00000 	.word	0x40d00000
 8001e0c:	43aa0000 	.word	0x43aa0000
 8001e10:	42121eb8 	.word	0x42121eb8
 8001e14:	20000800 	.word	0x20000800
 8001e18:	408f4000 	.word	0x408f4000
 8001e1c:	c0568000 	.word	0xc0568000
 8001e20:	42b40000 	.word	0x42b40000
 8001e24:	40568000 	.word	0x40568000
 8001e28:	c2b40000 	.word	0xc2b40000
 8001e2c:	20000048 	.word	0x20000048
 8001e30:	20000000 	.word	0x20000000

08001e34 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b096      	sub	sp, #88	; 0x58
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	61f8      	str	r0, [r7, #28]
 8001e3c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e40:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e44:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e52:	f7fe fa41 	bl	80002d8 <__aeabi_dsub>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e6c:	f7fe fbec 	bl	8000648 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa30 	bl	80002dc <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	69f9      	ldr	r1, [r7, #28]
 8001e82:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e96:	f7fe fbd7 	bl	8000648 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ea8:	f7fe fa16 	bl	80002d8 <__aeabi_dsub>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001eba:	f7fe fa0d 	bl	80002d8 <__aeabi_dsub>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fa06 	bl	80002dc <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001edc:	f7fe fbb4 	bl	8000648 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f9f8 	bl	80002dc <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	69f9      	ldr	r1, [r7, #28]
 8001ef2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f06:	f7fe fb9f 	bl	8000648 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe f9e1 	bl	80002d8 <__aeabi_dsub>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	f7fe fb8a 	bl	8000648 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f9cc 	bl	80002d8 <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	69f9      	ldr	r1, [r7, #28]
 8001f46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f5a:	f7fe fb75 	bl	8000648 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe f9b9 	bl	80002dc <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	69f9      	ldr	r1, [r7, #28]
 8001f70:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f80:	f7fe f9ac 	bl	80002dc <__adddf3>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f96:	f7fe fc81 	bl	800089c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fac:	f7fe fc76 	bl	800089c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fc2:	f7fe f989 	bl	80002d8 <__aeabi_dsub>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fdc:	f7fe fb34 	bl	8000648 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	f7fe f978 	bl	80002dc <__adddf3>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	69f9      	ldr	r1, [r7, #28]
 8001ff2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ffc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002000:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002004:	f7fe fb20 	bl	8000648 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe f964 	bl	80002dc <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	69f9      	ldr	r1, [r7, #28]
 800201a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002024:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800202e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002038:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800203c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002040:	f7fe fb02 	bl	8000648 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f944 	bl	80002d8 <__aeabi_dsub>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	69f9      	ldr	r1, [r7, #28]
 8002056:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002060:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002064:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002068:	f7fe faee 	bl	8000648 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f930 	bl	80002d8 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	69f9      	ldr	r1, [r7, #28]
 800207e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002088:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800208c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002090:	f7fe fada 	bl	8000648 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4620      	mov	r0, r4
 800209a:	4629      	mov	r1, r5
 800209c:	f7fe f91c 	bl	80002d8 <__aeabi_dsub>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	69f9      	ldr	r1, [r7, #28]
 80020a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80020b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020b8:	f7fe fac6 	bl	8000648 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4620      	mov	r0, r4
 80020c2:	4629      	mov	r1, r5
 80020c4:	f7fe f908 	bl	80002d8 <__aeabi_dsub>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	69f9      	ldr	r1, [r7, #28]
 80020ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020d8:	ec43 2b17 	vmov	d7, r2, r3
};
 80020dc:	eeb0 0a47 	vmov.f32	s0, s14
 80020e0:	eef0 0a67 	vmov.f32	s1, s15
 80020e4:	3758      	adds	r7, #88	; 0x58
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080020ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_MspInit+0x44>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_MspInit+0x44>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6613      	str	r3, [r2, #96]	; 0x60
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_MspInit+0x44>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_MspInit+0x44>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_MspInit+0x44>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_MspInit+0x44>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b09a      	sub	sp, #104	; 0x68
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	2244      	movs	r2, #68	; 0x44
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f007 f877 	bl	8009248 <memset>
  if(hi2c->Instance==I2C1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_I2C_MspInit+0xf8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d15f      	bne.n	8002224 <HAL_I2C_MspInit+0xf0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002164:	2340      	movs	r3, #64	; 0x40
 8002166:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fd1f 	bl	8004bb4 <HAL_RCCEx_PeriphCLKConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800217c:	f7ff fc12 	bl	80019a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218c:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002198:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800219c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219e:	2312      	movs	r3, #18
 80021a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021aa:	2304      	movs	r3, #4
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021b2:	4619      	mov	r1, r3
 80021b4:	481f      	ldr	r0, [pc, #124]	; (8002234 <HAL_I2C_MspInit+0x100>)
 80021b6:	f000 ff8f 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 80021c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_I2C_MspInit+0xfc>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_I2C_MspInit+0x108>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021da:	2210      	movs	r2, #16
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_I2C_MspInit+0x104>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_I2C_MspInit+0x104>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <HAL_I2C_MspInit+0x104>)
 800220a:	f000 fc33 	bl	8002a74 <HAL_DMA_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8002214:	f7ff fbc6 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_I2C_MspInit+0x104>)
 800221c:	63da      	str	r2, [r3, #60]	; 0x3c
 800221e:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_I2C_MspInit+0x104>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3768      	adds	r7, #104	; 0x68
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40005400 	.word	0x40005400
 8002230:	40021000 	.word	0x40021000
 8002234:	48000400 	.word	0x48000400
 8002238:	200002d8 	.word	0x200002d8
 800223c:	4002001c 	.word	0x4002001c

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_TIM_Base_MspInit+0x5c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10c      	bne.n	800226c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 8002258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800225c:	6613      	str	r3, [r2, #96]	; 0x60
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800226a:	e010      	b.n	800228e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_TIM_Base_MspInit+0x64>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10b      	bne.n	800228e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_TIM_Base_MspInit+0x60>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40000800 	.word	0x40000800

080022a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2d      	ldr	r2, [pc, #180]	; (800237c <HAL_TIM_MspPostInit+0xd4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d130      	bne.n	800232c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo1PWM_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80022e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022f4:	2306      	movs	r3, #6
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f000 fee9 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002318:	230b      	movs	r3, #11
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f000 fed7 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800232a:	e022      	b.n	8002372 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_TIM_MspPostInit+0xdc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11d      	bne.n	8002372 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_TIM_MspPostInit+0xd8>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002360:	230a      	movs	r3, #10
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f000 feb3 	bl	80030d8 <HAL_GPIO_Init>
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40000800 	.word	0x40000800

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b09c      	sub	sp, #112	; 0x70
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	2244      	movs	r2, #68	; 0x44
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f006 ff4d 	bl	8009248 <memset>
  if(huart->Instance==USART2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a46      	ldr	r2, [pc, #280]	; (80024cc <HAL_UART_MspInit+0x144>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	f040 8085 	bne.w	80024c4 <HAL_UART_MspInit+0x13c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80023be:	2304      	movs	r3, #4
 80023c0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c2:	f107 0318 	add.w	r3, r7, #24
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fbf4 	bl	8004bb4 <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023d2:	f7ff fae7 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_UART_MspInit+0x148>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_UART_MspInit+0x148>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_UART_MspInit+0x148>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_UART_MspInit+0x148>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800241e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002422:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002430:	2307      	movs	r3, #7
 8002432:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243e:	f000 fe4b 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002442:	2308      	movs	r3, #8
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002452:	2307      	movs	r3, #7
 8002454:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800245a:	4619      	mov	r1, r3
 800245c:	481d      	ldr	r0, [pc, #116]	; (80024d4 <HAL_UART_MspInit+0x14c>)
 800245e:	f000 fe3b 	bl	80030d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_UART_MspInit+0x154>)
 8002466:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_UART_MspInit+0x150>)
 800246a:	221a      	movs	r2, #26
 800246c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x150>)
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_UART_MspInit+0x150>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_UART_MspInit+0x150>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <HAL_UART_MspInit+0x150>)
 800249a:	f000 faeb 	bl	8002a74 <HAL_DMA_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 80024a4:	f7ff fa7e 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_UART_MspInit+0x150>)
 80024ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_UART_MspInit+0x150>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2026      	movs	r0, #38	; 0x26
 80024ba:	f000 faa6 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024be:	2026      	movs	r0, #38	; 0x26
 80024c0:	f000 fabd 	bl	8002a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3770      	adds	r7, #112	; 0x70
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40004400 	.word	0x40004400
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	20000460 	.word	0x20000460
 80024dc:	40020008 	.word	0x40020008

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 f974 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Channel1_IRQHandler+0x10>)
 800253a:	f000 fc7e 	bl	8002e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000460 	.word	0x20000460

08002548 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Channel2_IRQHandler+0x10>)
 800254e:	f000 fc74 	bl	8002e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200002d8 	.word	0x200002d8

0800255c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <USART2_IRQHandler+0x10>)
 8002562:	f003 ff95 	bl	8006490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200003d0 	.word	0x200003d0

08002570 <_getpid>:
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
 8002574:	2301      	movs	r3, #1
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_kill>:
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	f006 fe33 	bl	80091f4 <__errno>
 800258e:	4603      	mov	r3, r0
 8002590:	2216      	movs	r2, #22
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_exit>:
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ffe7 	bl	8002580 <_kill>
 80025b2:	e7fe      	b.n	80025b2 <_exit+0x12>

080025b4 <_read>:
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e00a      	b.n	80025dc <_read+0x28>
 80025c6:	f3af 8000 	nop.w
 80025ca:	4601      	mov	r1, r0
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	60ba      	str	r2, [r7, #8]
 80025d2:	b2ca      	uxtb	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf0      	blt.n	80025c6 <_read+0x12>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_write>:
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e009      	b.n	8002614 <_write+0x26>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f3af 8000 	nop.w
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf1      	blt.n	8002600 <_write+0x12>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_close>:
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_fstat>:
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	2300      	movs	r3, #0
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_isatty>:
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	2301      	movs	r3, #1
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_lseek>:
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <_sbrk>:
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <_sbrk+0x5c>)
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <_sbrk+0x60>)
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <_sbrk+0x22>
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <_sbrk+0x64>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <_sbrk+0x68>)
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d207      	bcs.n	80026d0 <_sbrk+0x40>
 80026c0:	f006 fd98 	bl	80091f4 <__errno>
 80026c4:	4603      	mov	r3, r0
 80026c6:	220c      	movs	r2, #12
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e009      	b.n	80026e4 <_sbrk+0x54>
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <_sbrk+0x64>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <_sbrk+0x64>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20008000 	.word	0x20008000
 80026f0:	00000400 	.word	0x00000400
 80026f4:	20000804 	.word	0x20000804
 80026f8:	20000820 	.word	0x20000820

080026fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <LoopForever+0x2>)
 8002722:	4685      	mov	sp, r0
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopForever+0x6>)
 8002726:	490e      	ldr	r1, [pc, #56]	; (8002760 <LoopForever+0xa>)
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <LoopForever+0xe>)
 800272a:	2300      	movs	r3, #0
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:
 800272e:	58d4      	ldr	r4, [r2, r3]
 8002730:	50c4      	str	r4, [r0, r3]
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:
 8002734:	18c4      	adds	r4, r0, r3
 8002736:	428c      	cmp	r4, r1
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LoopForever+0x12>)
 800273c:	4c0b      	ldr	r4, [pc, #44]	; (800276c <LoopForever+0x16>)
 800273e:	2300      	movs	r3, #0
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:
 8002746:	42a2      	cmp	r2, r4
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>
 800274a:	f7ff ffd7 	bl	80026fc <SystemInit>
 800274e:	f006 fd57 	bl	8009200 <__libc_init_array>
 8002752:	f7fe fcf5 	bl	8001140 <main>

08002756 <LoopForever>:
 8002756:	e7fe      	b.n	8002756 <LoopForever>
 8002758:	20008000 	.word	0x20008000
 800275c:	20000000 	.word	0x20000000
 8002760:	2000026c 	.word	0x2000026c
 8002764:	0800c16c 	.word	0x0800c16c
 8002768:	20000270 	.word	0x20000270
 800276c:	2000081c 	.word	0x2000081c

08002770 <ADC1_2_IRQHandler>:
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>

08002772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f939 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f80e 	bl	80027a4 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e001      	b.n	8002798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002794:	f7ff fcaa 	bl	80020ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002798:	79fb      	ldrb	r3, [r7, #7]

}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_InitTick+0x68>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d022      	beq.n	80027fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_InitTick+0x6c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_InitTick+0x68>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f944 	bl	8002a5a <HAL_SYSTICK_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10f      	bne.n	80027f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	d809      	bhi.n	80027f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027de:	2200      	movs	r2, #0
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	f04f 30ff 	mov.w	r0, #4294967295
 80027e6:	f000 f910 	bl	8002a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_InitTick+0x70>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e007      	b.n	8002802 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e004      	b.n	8002802 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e001      	b.n	8002802 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000098 	.word	0x20000098
 8002810:	20000090 	.word	0x20000090
 8002814:	20000094 	.word	0x20000094

08002818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_IncTick+0x1c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_IncTick+0x20>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4413      	add	r3, r2
 8002826:	4a03      	ldr	r2, [pc, #12]	; (8002834 <HAL_IncTick+0x1c>)
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000808 	.word	0x20000808
 8002838:	20000098 	.word	0x20000098

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000808 	.word	0x20000808

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff29 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff40 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff90 	bl	8002948 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5f 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff33 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffa4 	bl	80029b0 <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e08d      	b.n	8002ba2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_DMA_Init+0x138>)
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d80f      	bhi.n	8002ab2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_DMA_Init+0x13c>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a45      	ldr	r2, [pc, #276]	; (8002bb4 <HAL_DMA_Init+0x140>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a42      	ldr	r2, [pc, #264]	; (8002bb8 <HAL_DMA_Init+0x144>)
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab0:	e00e      	b.n	8002ad0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_DMA_Init+0x148>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a3d      	ldr	r2, [pc, #244]	; (8002bb4 <HAL_DMA_Init+0x140>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_DMA_Init+0x14c>)
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa76 	bl	8003014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b30:	d102      	bne.n	8002b38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_DMA_Init+0x104>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d80c      	bhi.n	8002b78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa96 	bl	8003090 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e008      	b.n	8002b8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40020407 	.word	0x40020407
 8002bb0:	bffdfff8 	.word	0xbffdfff8
 8002bb4:	cccccccd 	.word	0xcccccccd
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	bffdfbf8 	.word	0xbffdfbf8
 8002bc0:	40020400 	.word	0x40020400

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Start_IT+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e066      	b.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d155      	bne.n	8002ca4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f9bb 	bl	8002f98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 020e 	orr.w	r2, r2, #14
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e00f      	b.n	8002c5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 020a 	orr.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e005      	b.n	8002cb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d005      	beq.n	8002cde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e037      	b.n	8002d4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 020e 	bic.w	r2, r2, #14
 8002cec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d00d      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e047      	b.n	8002e30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
    }
  }
  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d026      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d021      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d071      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eb2:	e06c      	b.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02e      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d029      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020a 	bic.w	r2, r2, #10
 8002eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2102      	movs	r1, #2
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d038      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f24:	e033      	b.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2208      	movs	r2, #8
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d025      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
}
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d108      	bne.n	8002ff8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ff6:	e007      	b.n	8003008 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e001      	b.n	8003032 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003030:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b08      	subs	r3, #8
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	009a      	lsls	r2, r3, #2
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800305e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2201      	movs	r2, #1
 8003068:	409a      	lsls	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40020407 	.word	0x40020407
 8003080:	40020800 	.word	0x40020800
 8003084:	40020820 	.word	0x40020820
 8003088:	cccccccd 	.word	0xcccccccd
 800308c:	40020880 	.word	0x40020880

08003090 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	1000823f 	.word	0x1000823f
 80030d4:	40020940 	.word	0x40020940

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030e6:	e15a      	b.n	800339e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 814c 	beq.w	8003398 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d005      	beq.n	8003118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003114:	2b02      	cmp	r3, #2
 8003116:	d130      	bne.n	800317a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314e:	2201      	movs	r2, #1
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 0201 	and.w	r2, r3, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b03      	cmp	r3, #3
 8003184:	d017      	beq.n	80031b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d123      	bne.n	800320a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	6939      	ldr	r1, [r7, #16]
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80a6 	beq.w	8003398 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324c:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_GPIO_Init+0x2e4>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_GPIO_Init+0x2e4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6613      	str	r3, [r2, #96]	; 0x60
 8003258:	4b58      	ldr	r3, [pc, #352]	; (80033bc <HAL_GPIO_Init+0x2e4>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003264:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_GPIO_Init+0x2e8>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800328e:	d01f      	beq.n	80032d0 <HAL_GPIO_Init+0x1f8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a4c      	ldr	r2, [pc, #304]	; (80033c4 <HAL_GPIO_Init+0x2ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d019      	beq.n	80032cc <HAL_GPIO_Init+0x1f4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_GPIO_Init+0x1f0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <HAL_GPIO_Init+0x2f4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00d      	beq.n	80032c4 <HAL_GPIO_Init+0x1ec>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a49      	ldr	r2, [pc, #292]	; (80033d0 <HAL_GPIO_Init+0x2f8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <HAL_GPIO_Init+0x1e8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a48      	ldr	r2, [pc, #288]	; (80033d4 <HAL_GPIO_Init+0x2fc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_GPIO_Init+0x1e4>
 80032b8:	2305      	movs	r3, #5
 80032ba:	e00a      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032bc:	2306      	movs	r3, #6
 80032be:	e008      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032c0:	2304      	movs	r3, #4
 80032c2:	e006      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e004      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e002      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032d0:	2300      	movs	r3, #0
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	f002 0203 	and.w	r2, r2, #3
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4093      	lsls	r3, r2
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e2:	4937      	ldr	r1, [pc, #220]	; (80033c0 <HAL_GPIO_Init+0x2e8>)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032f0:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_GPIO_Init+0x300>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003314:	4a30      	ldr	r2, [pc, #192]	; (80033d8 <HAL_GPIO_Init+0x300>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x300>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43db      	mvns	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800333e:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_GPIO_Init+0x300>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_GPIO_Init+0x300>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_GPIO_Init+0x300>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_GPIO_Init+0x300>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003392:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <HAL_GPIO_Init+0x300>)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3301      	adds	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f47f ae9d 	bne.w	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40010000 	.word	0x40010000
 80033c4:	48000400 	.word	0x48000400
 80033c8:	48000800 	.word	0x48000800
 80033cc:	48000c00 	.word	0x48000c00
 80033d0:	48001000 	.word	0x48001000
 80033d4:	48001400 	.word	0x48001400
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e081      	b.n	8003522 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fe7e 	bl	8002134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800345c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e006      	b.n	8003494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d104      	bne.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1a      	ldr	r2, [r3, #32]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	f040 80f9 	bne.w	8003746 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_I2C_Mem_Write+0x34>
 800355a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0ed      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Write+0x4e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0e6      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003582:	f7ff f95b 	bl	800283c <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fac3 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0d1      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035cc:	88f8      	ldrh	r0, [r7, #6]
 80035ce:	893a      	ldrh	r2, [r7, #8]
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	4603      	mov	r3, r0
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f9d3 	bl	8003988 <I2C_RequestMemoryWrite>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0a9      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2bff      	cmp	r3, #255	; 0xff
 80035fc:	d90e      	bls.n	800361c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fc2b 	bl	8003e70 <I2C_TransferConfig>
 800361a:	e00f      	b.n	800363c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	b2da      	uxtb	r2, r3
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fc1a 	bl	8003e70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 faad 	bl	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e07b      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d034      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d130      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2200      	movs	r2, #0
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fa3f 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e04d      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	; 0xff
 80036b4:	d90e      	bls.n	80036d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fbcf 	bl	8003e70 <I2C_TransferConfig>
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fbbe 	bl	8003e70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d19e      	bne.n	800363c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fa8c 	bl	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01a      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2220      	movs	r2, #32
 8003718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_I2C_Mem_Write+0x224>)
 8003726:	400b      	ands	r3, r1
 8003728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fe00e800 	.word	0xfe00e800

08003754 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	f040 80fd 	bne.w	8003976 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_I2C_Mem_Read+0x34>
 8003782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0f1      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Mem_Read+0x4e>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0ea      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037aa:	f7ff f847 	bl	800283c <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f9af 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0d5      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2222      	movs	r2, #34	; 0x22
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f4:	88f8      	ldrh	r0, [r7, #6]
 80037f6:	893a      	ldrh	r2, [r7, #8]
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4603      	mov	r3, r0
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f913 	bl	8003a30 <I2C_RequestMemoryRead>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0ad      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2bff      	cmp	r3, #255	; 0xff
 8003824:	d90e      	bls.n	8003844 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	22ff      	movs	r2, #255	; 0xff
 800382a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	b2da      	uxtb	r2, r3
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fb17 	bl	8003e70 <I2C_TransferConfig>
 8003842:	e00f      	b.n	8003864 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	b2da      	uxtb	r2, r3
 8003854:	8979      	ldrh	r1, [r7, #10]
 8003856:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb06 	bl	8003e70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2200      	movs	r2, #0
 800386c:	2104      	movs	r1, #4
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f956 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07c      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d034      	beq.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d130      	bne.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f927 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e04d      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2bff      	cmp	r3, #255	; 0xff
 80038e4:	d90e      	bls.n	8003904 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fab7 	bl	8003e70 <I2C_TransferConfig>
 8003902:	e00f      	b.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	b2da      	uxtb	r2, r3
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	2300      	movs	r3, #0
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 faa6 	bl	8003e70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d19a      	bne.n	8003864 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f974 	bl	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01a      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2220      	movs	r2, #32
 8003948:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_I2C_Mem_Read+0x230>)
 8003956:	400b      	ands	r3, r1
 8003958:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	80002400 	.word	0x80002400
 8003984:	fe00e800 	.word	0xfe00e800

08003988 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4603      	mov	r3, r0
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	460b      	mov	r3, r1
 800399c:	813b      	strh	r3, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <I2C_RequestMemoryWrite+0xa4>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa5d 	bl	8003e70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8f0 	bl	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02c      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
 80039da:	e015      	b.n	8003a08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039dc:	893b      	ldrh	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f8d6 	bl	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e012      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039fe:	893b      	ldrh	r3, [r7, #8]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f884 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	80002000 	.word	0x80002000

08003a30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	8979      	ldrh	r1, [r7, #10]
 8003a50:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <I2C_RequestMemoryRead+0xa4>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa0a 	bl	8003e70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f89d 	bl	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e02c      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a80:	e015      	b.n	8003aae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f883 	bl	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e012      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	; 0x40
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f831 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	80002000 	.word	0x80002000

08003ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d103      	bne.n	8003af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d007      	beq.n	8003b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	619a      	str	r2, [r3, #24]
  }
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e022      	b.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d01e      	beq.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fe7f 	bl	800283c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d113      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00f      	b.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d0cd      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bac:	e02c      	b.n	8003c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f870 	bl	8003c98 <I2C_IsErrorOccurred>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e02a      	b.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d01e      	beq.n	8003c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fe37 	bl	800283c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d113      	bne.n	8003c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d1cb      	bne.n	8003bae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	e028      	b.n	8003c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f830 	bl	8003c98 <I2C_IsErrorOccurred>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e026      	b.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe fdfb 	bl	800283c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d113      	bne.n	8003c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d1cf      	bne.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d075      	beq.n	8003db0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ccc:	e056      	b.n	8003d7c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d052      	beq.n	8003d7c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fe fdb1 	bl	800283c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_IsErrorOccurred+0x54>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d147      	bne.n	8003d7c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d12e      	bne.n	8003d6e <I2C_IsErrorOccurred+0xd6>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d16:	d02a      	beq.n	8003d6e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d027      	beq.n	8003d6e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d2e:	f7fe fd85 	bl	800283c <HAL_GetTick>
 8003d32:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d34:	e01b      	b.n	8003d6e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d36:	f7fe fd81 	bl	800283c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b19      	cmp	r3, #25
 8003d42:	d914      	bls.n	8003d6e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d1dc      	bne.n	8003d36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d003      	beq.n	8003d92 <I2C_IsErrorOccurred+0xfa>
 8003d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d09d      	beq.n	8003cce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01c      	beq.n	8003e60 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff fe56 	bl	8003ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <I2C_IsErrorOccurred+0x1d4>)
 8003e38:	400b      	ands	r3, r1
 8003e3a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	fe00e800 	.word	0xfe00e800

08003e70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e88:	7a7b      	ldrb	r3, [r7, #9]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e90:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e9e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	0d5b      	lsrs	r3, r3, #21
 8003eaa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <I2C_TransferConfig+0x60>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	ea02 0103 	and.w	r1, r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	03ff63ff 	.word	0x03ff63ff

08003ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d138      	bne.n	8003f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e032      	b.n	8003f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	; 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d139      	bne.n	8003ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e033      	b.n	8003ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2224      	movs	r2, #36	; 0x24
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d141      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d131      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004020:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	4a46      	ldr	r2, [pc, #280]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004038:	4a41      	ldr	r2, [pc, #260]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004040:	4b40      	ldr	r3, [pc, #256]	; (8004144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2232      	movs	r2, #50	; 0x32
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	0c9b      	lsrs	r3, r3, #18
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004056:	e002      	b.n	800405e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3b01      	subs	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406a:	d102      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f2      	bne.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004072:	4b33      	ldr	r3, [pc, #204]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d158      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e057      	b.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408a:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004094:	e04d      	b.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d141      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800409e:	4b28      	ldr	r3, [pc, #160]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d131      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b2:	4a23      	ldr	r2, [pc, #140]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040c4:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2232      	movs	r2, #50	; 0x32
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	0c9b      	lsrs	r3, r3, #18
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040e2:	e002      	b.n	80040ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d102      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f2      	bne.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d112      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e011      	b.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004120:	e007      	b.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004130:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40007000 	.word	0x40007000
 8004144:	20000090 	.word	0x20000090
 8004148:	431bde83 	.word	0x431bde83

0800414c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e306      	b.n	800476c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d075      	beq.n	8004256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416a:	4b97      	ldr	r3, [pc, #604]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004174:	4b94      	ldr	r3, [pc, #592]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b0c      	cmp	r3, #12
 8004182:	d102      	bne.n	800418a <HAL_RCC_OscConfig+0x3e>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d002      	beq.n	8004190 <HAL_RCC_OscConfig+0x44>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05b      	beq.n	8004254 <HAL_RCC_OscConfig+0x108>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d157      	bne.n	8004254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e2e1      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x74>
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a84      	ldr	r2, [pc, #528]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e01d      	b.n	80041fc <HAL_RCC_OscConfig+0xb0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x98>
 80041ca:	4b7f      	ldr	r3, [pc, #508]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a7e      	ldr	r2, [pc, #504]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b7c      	ldr	r3, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7b      	ldr	r2, [pc, #492]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xb0>
 80041e4:	4b78      	ldr	r3, [pc, #480]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a77      	ldr	r2, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b75      	ldr	r3, [pc, #468]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a74      	ldr	r2, [pc, #464]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe fb1a 	bl	800283c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fe fb16 	bl	800283c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e2a6      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421e:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xc0>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fb06 	bl	800283c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fb02 	bl	800283c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e292      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004246:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0xe8>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d075      	beq.n	800434e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426c:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	d102      	bne.n	8004282 <HAL_RCC_OscConfig+0x136>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d002      	beq.n	8004288 <HAL_RCC_OscConfig+0x13c>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d11f      	bne.n	80042c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_OscConfig+0x154>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e265      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	4946      	ldr	r1, [pc, #280]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b4:	4b45      	ldr	r3, [pc, #276]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fa73 	bl	80027a4 <HAL_InitTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d043      	beq.n	800434c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e251      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d023      	beq.n	8004318 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe faae 	bl	800283c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e4:	f7fe faaa 	bl	800283c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e23a      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	492d      	ldr	r1, [pc, #180]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
 8004316:	e01a      	b.n	800434e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800431e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe fa8a 	bl	800283c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432c:	f7fe fa86 	bl	800283c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e216      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1e0>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d041      	beq.n	80043de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01c      	beq.n	800439c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fe fa63 	bl	800283c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437a:	f7fe fa5f 	bl	800283c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1ef      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ef      	beq.n	800437a <HAL_RCC_OscConfig+0x22e>
 800439a:	e020      	b.n	80043de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <HAL_RCC_OscConfig+0x27c>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe fa46 	bl	800283c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043b2:	e00d      	b.n	80043d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fe fa42 	bl	800283c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d906      	bls.n	80043d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1d2      	b.n	800476c <HAL_RCC_OscConfig+0x620>
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	20000094 	.word	0x20000094
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d0:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ea      	bne.n	80043b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80a6 	beq.w	8004538 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043f0:	4b84      	ldr	r3, [pc, #528]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_OscConfig+0x2b4>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x2b6>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	4b7f      	ldr	r3, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a7e      	ldr	r2, [pc, #504]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
 8004412:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800441e:	2301      	movs	r3, #1
 8004420:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_RCC_OscConfig+0x4bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442e:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCC_OscConfig+0x4bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x4bc>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7fe f9ff 	bl	800283c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7fe f9fb 	bl	800283c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e18b      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004454:	4b6c      	ldr	r3, [pc, #432]	; (8004608 <HAL_RCC_OscConfig+0x4bc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_RCC_OscConfig+0x32e>
 8004468:	4b66      	ldr	r3, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	4a65      	ldr	r2, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004478:	e024      	b.n	80044c4 <HAL_RCC_OscConfig+0x378>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b05      	cmp	r3, #5
 8004480:	d110      	bne.n	80044a4 <HAL_RCC_OscConfig+0x358>
 8004482:	4b60      	ldr	r3, [pc, #384]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	4a5e      	ldr	r2, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004492:	4b5c      	ldr	r3, [pc, #368]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	4a5a      	ldr	r2, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a2:	e00f      	b.n	80044c4 <HAL_RCC_OscConfig+0x378>
 80044a4:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	4a56      	ldr	r2, [pc, #344]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d016      	beq.n	80044fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fe f9b6 	bl	800283c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fe f9b2 	bl	800283c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e140      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ea:	4b46      	ldr	r3, [pc, #280]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ed      	beq.n	80044d4 <HAL_RCC_OscConfig+0x388>
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fe f99f 	bl	800283c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe f99b 	bl	800283c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e129      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004518:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ed      	bne.n	8004502 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a34      	ldr	r2, [pc, #208]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d03c      	beq.n	80045be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01c      	beq.n	8004586 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800454e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fe f96e 	bl	800283c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fe f96a 	bl	800283c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0fa      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004576:	4b23      	ldr	r3, [pc, #140]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <HAL_RCC_OscConfig+0x418>
 8004584:	e01b      	b.n	80045be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004586:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 8004588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fe f951 	bl	800283c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459e:	f7fe f94d 	bl	800283c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0dd      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b0:	4b14      	ldr	r3, [pc, #80]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ef      	bne.n	800459e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80d1 	beq.w	800476a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	f000 808b 	beq.w	80046ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d15e      	bne.n	800469c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a08      	ldr	r2, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x4b8>)
 80045e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe f927 	bl	800283c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	e00c      	b.n	800460c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fe f923 	bl	800283c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d905      	bls.n	800460c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0b3      	b.n	800476c <HAL_RCC_OscConfig+0x620>
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ec      	bne.n	80045f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004618:	4b56      	ldr	r3, [pc, #344]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b56      	ldr	r3, [pc, #344]	; (8004778 <HAL_RCC_OscConfig+0x62c>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6a11      	ldr	r1, [r2, #32]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004628:	3a01      	subs	r2, #1
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004632:	0212      	lsls	r2, r2, #8
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800463a:	0852      	lsrs	r2, r2, #1
 800463c:	3a01      	subs	r2, #1
 800463e:	0552      	lsls	r2, r2, #21
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004646:	0852      	lsrs	r2, r2, #1
 8004648:	3a01      	subs	r2, #1
 800464a:	0652      	lsls	r2, r2, #25
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004652:	06d2      	lsls	r2, r2, #27
 8004654:	430a      	orrs	r2, r1
 8004656:	4947      	ldr	r1, [pc, #284]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 8004658:	4313      	orrs	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465c:	4b45      	ldr	r3, [pc, #276]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a44      	ldr	r2, [pc, #272]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 8004662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a41      	ldr	r2, [pc, #260]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004672:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe f8e2 	bl	800283c <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe f8de 	bl	800283c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e06e      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x530>
 800469a:	e066      	b.n	800476a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b35      	ldr	r3, [pc, #212]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a34      	ldr	r2, [pc, #208]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046a8:	4b32      	ldr	r3, [pc, #200]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a31      	ldr	r2, [pc, #196]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046b4:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a2e      	ldr	r2, [pc, #184]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fe f8ba 	bl	800283c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe f8b6 	bl	800283c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e046      	b.n	800476c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x580>
 80046ea:	e03e      	b.n	800476a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e039      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <HAL_RCC_OscConfig+0x628>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0203 	and.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	429a      	cmp	r2, r3
 800470a:	d12c      	bne.n	8004766 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	3b01      	subs	r3, #1
 8004718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d123      	bne.n	8004766 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11b      	bne.n	8004766 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d113      	bne.n	8004766 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d109      	bne.n	8004766 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	019f800c 	.word	0x019f800c

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e11e      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b91      	ldr	r3, [pc, #580]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d910      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b8e      	ldr	r3, [pc, #568]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	498c      	ldr	r1, [pc, #560]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b8a      	ldr	r3, [pc, #552]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e106      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d073      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d129      	bne.n	800482c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d8:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0f4      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047e8:	f000 f99e 	bl	8004b28 <RCC_GetSysClockFreqFromPLLSource>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <HAL_RCC_ClockConfig+0x268>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d93f      	bls.n	8004876 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047f6:	4b7a      	ldr	r3, [pc, #488]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800480a:	2b00      	cmp	r3, #0
 800480c:	d033      	beq.n	8004876 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d12f      	bne.n	8004876 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004816:	4b72      	ldr	r3, [pc, #456]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481e:	4a70      	ldr	r2, [pc, #448]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e024      	b.n	8004876 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d107      	bne.n	8004844 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004834:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0c6      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0be      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004854:	f000 f8ce 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 8004858:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4a61      	ldr	r2, [pc, #388]	; (80049e4 <HAL_RCC_ClockConfig+0x268>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d909      	bls.n	8004876 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486a:	4a5d      	ldr	r2, [pc, #372]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 800486c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004870:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b5a      	ldr	r3, [pc, #360]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4957      	ldr	r1, [pc, #348]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004888:	f7fd ffd8 	bl	800283c <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fd ffd4 	bl	800283c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e095      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b4e      	ldr	r3, [pc, #312]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d0:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a42      	ldr	r2, [pc, #264]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048e8:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048f0:	4a3b      	ldr	r2, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4936      	ldr	r1, [pc, #216]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
 800490a:	e008      	b.n	800491e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d105      	bne.n	800491e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d21d      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 020f 	bic.w	r2, r3, #15
 8004934:	4929      	ldr	r1, [pc, #164]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800493c:	f7fd ff7e 	bl	800283c <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fd ff7a 	bl	800283c <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e03b      	b.n	80049d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x260>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d1ed      	bne.n	8004944 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4917      	ldr	r1, [pc, #92]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	490f      	ldr	r1, [pc, #60]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049a6:	f000 f825 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <HAL_RCC_ClockConfig+0x264>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	490c      	ldr	r1, [pc, #48]	; (80049e8 <HAL_RCC_ClockConfig+0x26c>)
 80049b8:	5ccb      	ldrb	r3, [r1, r3]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd feea 	bl	80027a4 <HAL_InitTick>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40021000 	.word	0x40021000
 80049e4:	04c4b400 	.word	0x04c4b400
 80049e8:	0800bca0 	.word	0x0800bca0
 80049ec:	20000090 	.word	0x20000090
 80049f0:	20000094 	.word	0x20000094

080049f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049fa:	4b2c      	ldr	r3, [pc, #176]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d102      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a06:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e047      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d102      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a18:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	e03e      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d136      	bne.n	8004a98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a52:	68d2      	ldr	r2, [r2, #12]
 8004a54:	0a12      	lsrs	r2, r2, #8
 8004a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	617b      	str	r3, [r7, #20]
      break;
 8004a60:	e00c      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a62:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6c:	68d2      	ldr	r2, [r2, #12]
 8004a6e:	0a12      	lsrs	r2, r2, #8
 8004a70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
      break;
 8004a7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0e5b      	lsrs	r3, r3, #25
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	3301      	adds	r3, #1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	e001      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a9c:	693b      	ldr	r3, [r7, #16]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	016e3600 	.word	0x016e3600

08004ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_GetHCLKFreq+0x14>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000090 	.word	0x20000090

08004ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ad4:	f7ff fff0 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4904      	ldr	r1, [pc, #16]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800bcb0 	.word	0x0800bcb0

08004afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b00:	f7ff ffda 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0adb      	lsrs	r3, r3, #11
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4904      	ldr	r1, [pc, #16]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	0800bcb0 	.word	0x0800bcb0

08004b28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b38:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d10c      	bne.n	8004b66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b4c:	4a17      	ldr	r2, [pc, #92]	; (8004bac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b56:	68d2      	ldr	r2, [r2, #12]
 8004b58:	0a12      	lsrs	r2, r2, #8
 8004b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
    break;
 8004b64:	e00c      	b.n	8004b80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b66:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	0a12      	lsrs	r2, r2, #8
 8004b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	617b      	str	r3, [r7, #20]
    break;
 8004b7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0e5b      	lsrs	r3, r3, #25
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b9a:	687b      	ldr	r3, [r7, #4]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	016e3600 	.word	0x016e3600
 8004bb0:	00f42400 	.word	0x00f42400

08004bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8098 	beq.w	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd6:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be2:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	4a3f      	ldr	r2, [pc, #252]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
 8004bee:	4b3d      	ldr	r3, [pc, #244]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a39      	ldr	r2, [pc, #228]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c0a:	f7fd fe17 	bl	800283c <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c10:	e009      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c12:	f7fd fe13 	bl	800283c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d902      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	74fb      	strb	r3, [r7, #19]
        break;
 8004c24:	e005      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ef      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d159      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c38:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01e      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d019      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c70:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fd fdd3 	bl	800283c <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c98:	e00b      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fd fdcf 	bl	800283c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d902      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	74fb      	strb	r3, [r7, #19]
            break;
 8004cb0:	e006      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ec      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	74bb      	strb	r3, [r7, #18]
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf0:	7c7b      	ldrb	r3, [r7, #17]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf6:	4ba6      	ldr	r3, [pc, #664]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	4aa5      	ldr	r2, [pc, #660]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d0e:	4ba0      	ldr	r3, [pc, #640]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f023 0203 	bic.w	r2, r3, #3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	499c      	ldr	r1, [pc, #624]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d30:	4b97      	ldr	r3, [pc, #604]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 020c 	bic.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	4994      	ldr	r1, [pc, #592]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d52:	4b8f      	ldr	r3, [pc, #572]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	498b      	ldr	r1, [pc, #556]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d74:	4b86      	ldr	r3, [pc, #536]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4983      	ldr	r1, [pc, #524]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d96:	4b7e      	ldr	r3, [pc, #504]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	497a      	ldr	r1, [pc, #488]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004db8:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	4972      	ldr	r1, [pc, #456]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dda:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	4969      	ldr	r1, [pc, #420]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dfc:	4b64      	ldr	r3, [pc, #400]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4961      	ldr	r1, [pc, #388]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1e:	4b5c      	ldr	r3, [pc, #368]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	4958      	ldr	r1, [pc, #352]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e40:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	4950      	ldr	r1, [pc, #320]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a4a      	ldr	r2, [pc, #296]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	4942      	ldr	r1, [pc, #264]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eb0:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4934      	ldr	r1, [pc, #208]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ee8:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	4926      	ldr	r1, [pc, #152]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	4918      	ldr	r1, [pc, #96]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	490a      	ldr	r1, [pc, #40]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f84:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e049      	b.n	800503a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fd f940 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f000 fba4 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e049      	b.n	80050e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f841 	bl	80050f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fb4d 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x24>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e03c      	b.n	80051a2 <HAL_TIM_PWM_Start+0x9e>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x3e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e02f      	b.n	80051a2 <HAL_TIM_PWM_Start+0x9e>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x58>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e022      	b.n	80051a2 <HAL_TIM_PWM_Start+0x9e>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b0c      	cmp	r3, #12
 8005160:	d109      	bne.n	8005176 <HAL_TIM_PWM_Start+0x72>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	bf14      	ite	ne
 800516e:	2301      	movne	r3, #1
 8005170:	2300      	moveq	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	e015      	b.n	80051a2 <HAL_TIM_PWM_Start+0x9e>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b10      	cmp	r3, #16
 800517a:	d109      	bne.n	8005190 <HAL_TIM_PWM_Start+0x8c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e008      	b.n	80051a2 <HAL_TIM_PWM_Start+0x9e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e097      	b.n	80052da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xb6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	e023      	b.n	8005202 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xc6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c8:	e01b      	b.n	8005202 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xd6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d8:	e013      	b.n	8005202 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xe6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e8:	e00b      	b.n	8005202 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xf6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f8:	e003      	b.n	8005202 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2201      	movs	r2, #1
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 feaa 	bl	8005f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <HAL_TIM_PWM_Start+0x1e0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_TIM_PWM_Start+0x13e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <HAL_TIM_PWM_Start+0x1e4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIM_PWM_Start+0x13e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a30      	ldr	r2, [pc, #192]	; (80052ec <HAL_TIM_PWM_Start+0x1e8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIM_PWM_Start+0x13e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_TIM_PWM_Start+0x1ec>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIM_PWM_Start+0x13e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_TIM_PWM_Start+0x1f0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_Start+0x142>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_TIM_PWM_Start+0x144>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800525a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <HAL_TIM_PWM_Start+0x1e0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_PWM_Start+0x194>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d013      	beq.n	8005298 <HAL_TIM_PWM_Start+0x194>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <HAL_TIM_PWM_Start+0x1f4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_PWM_Start+0x194>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_PWM_Start+0x1f8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_PWM_Start+0x194>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_PWM_Start+0x1e4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_PWM_Start+0x194>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIM_PWM_Start+0x1e8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d115      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <HAL_TIM_PWM_Start+0x1fc>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d015      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x1d2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b0:	d011      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	00010007 	.word	0x00010007

08005304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800531e:	2302      	movs	r3, #2
 8005320:	e0ff      	b.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b14      	cmp	r3, #20
 800532e:	f200 80f0 	bhi.w	8005512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800538d 	.word	0x0800538d
 800533c:	08005513 	.word	0x08005513
 8005340:	08005513 	.word	0x08005513
 8005344:	08005513 	.word	0x08005513
 8005348:	080053cd 	.word	0x080053cd
 800534c:	08005513 	.word	0x08005513
 8005350:	08005513 	.word	0x08005513
 8005354:	08005513 	.word	0x08005513
 8005358:	0800540f 	.word	0x0800540f
 800535c:	08005513 	.word	0x08005513
 8005360:	08005513 	.word	0x08005513
 8005364:	08005513 	.word	0x08005513
 8005368:	0800544f 	.word	0x0800544f
 800536c:	08005513 	.word	0x08005513
 8005370:	08005513 	.word	0x08005513
 8005374:	08005513 	.word	0x08005513
 8005378:	08005491 	.word	0x08005491
 800537c:	08005513 	.word	0x08005513
 8005380:	08005513 	.word	0x08005513
 8005384:	08005513 	.word	0x08005513
 8005388:	080054d1 	.word	0x080054d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fa54 	bl	8005840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
      break;
 80053ca:	e0a5      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fac4 	bl	8005960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e084      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fb2d 	bl	8005a74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69d9      	ldr	r1, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
      break;
 800544c:	e064      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fb95 	bl	8005b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
      break;
 800548e:	e043      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fbfe 	bl	8005c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0208 	orr.w	r2, r2, #8
 80054aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0204 	bic.w	r2, r2, #4
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054ce:	e023      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fc42 	bl	8005d60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005510:	e002      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
      break;
 8005516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop

0800552c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIM_ConfigClockSource+0x1c>
 8005544:	2302      	movs	r3, #2
 8005546:	e0de      	b.n	8005706 <HAL_TIM_ConfigClockSource+0x1da>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800556a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a63      	ldr	r2, [pc, #396]	; (8005710 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f000 80a9 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005588:	4a61      	ldr	r2, [pc, #388]	; (8005710 <HAL_TIM_ConfigClockSource+0x1e4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f200 80ae 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 8005590:	4a60      	ldr	r2, [pc, #384]	; (8005714 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f000 80a1 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005598:	4a5e      	ldr	r2, [pc, #376]	; (8005714 <HAL_TIM_ConfigClockSource+0x1e8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f200 80a6 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055a0:	4a5d      	ldr	r2, [pc, #372]	; (8005718 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f000 8099 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 80055a8:	4a5b      	ldr	r2, [pc, #364]	; (8005718 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f200 809e 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055b0:	4a5a      	ldr	r2, [pc, #360]	; (800571c <HAL_TIM_ConfigClockSource+0x1f0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f000 8091 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 80055b8:	4a58      	ldr	r2, [pc, #352]	; (800571c <HAL_TIM_ConfigClockSource+0x1f0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f200 8096 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055c4:	f000 8089 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 80055c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055cc:	f200 808e 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d4:	d03e      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x128>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	f200 8087 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	f000 8086 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d87f      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055ec:	2b70      	cmp	r3, #112	; 0x70
 80055ee:	d01a      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0xfa>
 80055f0:	2b70      	cmp	r3, #112	; 0x70
 80055f2:	d87b      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055f4:	2b60      	cmp	r3, #96	; 0x60
 80055f6:	d050      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x16e>
 80055f8:	2b60      	cmp	r3, #96	; 0x60
 80055fa:	d877      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 80055fc:	2b50      	cmp	r3, #80	; 0x50
 80055fe:	d03c      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x14e>
 8005600:	2b50      	cmp	r3, #80	; 0x50
 8005602:	d873      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d058      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x18e>
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d86f      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 800560c:	2b30      	cmp	r3, #48	; 0x30
 800560e:	d064      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005610:	2b30      	cmp	r3, #48	; 0x30
 8005612:	d86b      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d060      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d867      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05c      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005620:	2b10      	cmp	r3, #16
 8005622:	d05a      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x1ae>
 8005624:	e062      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f000 fc75 	bl	8005f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	609a      	str	r2, [r3, #8]
      break;
 8005652:	e04f      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6899      	ldr	r1, [r3, #8]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f000 fc5e 	bl	8005f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005676:	609a      	str	r2, [r3, #8]
      break;
 8005678:	e03c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fbd0 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2150      	movs	r1, #80	; 0x50
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fc29 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005698:	e02c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fbef 	bl	8005e8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2160      	movs	r1, #96	; 0x60
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fc19 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 80056b8:	e01c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fbb0 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2140      	movs	r1, #64	; 0x40
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fc09 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 80056d8:	e00c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 fc00 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 80056ea:	e003      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80056f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	00100070 	.word	0x00100070
 8005714:	00100040 	.word	0x00100040
 8005718:	00100030 	.word	0x00100030
 800571c:	00100020 	.word	0x00100020

08005720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <TIM_Base_SetConfig+0x104>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00f      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d00b      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a39      	ldr	r2, [pc, #228]	; (8005828 <TIM_Base_SetConfig+0x108>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a38      	ldr	r2, [pc, #224]	; (800582c <TIM_Base_SetConfig+0x10c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a37      	ldr	r2, [pc, #220]	; (8005830 <TIM_Base_SetConfig+0x110>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <TIM_Base_SetConfig+0x104>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01b      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d017      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <TIM_Base_SetConfig+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a29      	ldr	r2, [pc, #164]	; (800582c <TIM_Base_SetConfig+0x10c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00f      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a28      	ldr	r2, [pc, #160]	; (8005830 <TIM_Base_SetConfig+0x110>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a27      	ldr	r2, [pc, #156]	; (8005834 <TIM_Base_SetConfig+0x114>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <TIM_Base_SetConfig+0x118>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a25      	ldr	r2, [pc, #148]	; (800583c <TIM_Base_SetConfig+0x11c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d108      	bne.n	80057bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <TIM_Base_SetConfig+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <TIM_Base_SetConfig+0x110>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <TIM_Base_SetConfig+0x114>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <TIM_Base_SetConfig+0x118>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <TIM_Base_SetConfig+0x11c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40013400 	.word	0x40013400
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800

08005840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0201 	bic.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0302 	bic.w	r3, r3, #2
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2c      	ldr	r2, [pc, #176]	; (800594c <TIM_OC1_SetConfig+0x10c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00f      	beq.n	80058c0 <TIM_OC1_SetConfig+0x80>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <TIM_OC1_SetConfig+0x110>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <TIM_OC1_SetConfig+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_OC1_SetConfig+0x114>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <TIM_OC1_SetConfig+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_OC1_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC1_SetConfig+0x80>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_OC1_SetConfig+0x11c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0308 	bic.w	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <TIM_OC1_SetConfig+0x10c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_OC1_SetConfig+0xc2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <TIM_OC1_SetConfig+0x110>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_OC1_SetConfig+0xc2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <TIM_OC1_SetConfig+0x114>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_OC1_SetConfig+0xc2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a18      	ldr	r2, [pc, #96]	; (8005958 <TIM_OC1_SetConfig+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0xc2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a17      	ldr	r2, [pc, #92]	; (800595c <TIM_OC1_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800

08005960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0210 	bic.w	r2, r3, #16
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0320 	bic.w	r3, r3, #32
 80059ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <TIM_OC2_SetConfig+0x100>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC2_SetConfig+0x6c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <TIM_OC2_SetConfig+0x104>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10d      	bne.n	80059e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <TIM_OC2_SetConfig+0x100>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_OC2_SetConfig+0xb0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <TIM_OC2_SetConfig+0x104>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_OC2_SetConfig+0xb0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <TIM_OC2_SetConfig+0x108>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_OC2_SetConfig+0xb0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <TIM_OC2_SetConfig+0x10c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC2_SetConfig+0xb0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <TIM_OC2_SetConfig+0x110>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d113      	bne.n	8005a38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800

08005a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <TIM_OC3_SetConfig+0xfc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC3_SetConfig+0x6a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <TIM_OC3_SetConfig+0x100>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d10d      	bne.n	8005afa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <TIM_OC3_SetConfig+0xfc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_OC3_SetConfig+0xae>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <TIM_OC3_SetConfig+0x100>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_OC3_SetConfig+0xae>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a1a      	ldr	r2, [pc, #104]	; (8005b78 <TIM_OC3_SetConfig+0x104>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_OC3_SetConfig+0xae>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <TIM_OC3_SetConfig+0x108>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC3_SetConfig+0xae>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <TIM_OC3_SetConfig+0x10c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d113      	bne.n	8005b4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <TIM_OC4_SetConfig+0x100>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x6c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <TIM_OC4_SetConfig+0x104>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10d      	bne.n	8005c0c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <TIM_OC4_SetConfig+0x100>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00f      	beq.n	8005c34 <TIM_OC4_SetConfig+0xb0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <TIM_OC4_SetConfig+0x104>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_OC4_SetConfig+0xb0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <TIM_OC4_SetConfig+0x108>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC4_SetConfig+0xb0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <TIM_OC4_SetConfig+0x10c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC4_SetConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <TIM_OC4_SetConfig+0x110>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d113      	bne.n	8005c5c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	019b      	lsls	r3, r3, #6
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <TIM_OC5_SetConfig+0xb4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_OC5_SetConfig+0x7a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <TIM_OC5_SetConfig+0xb8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_OC5_SetConfig+0x7a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <TIM_OC5_SetConfig+0xbc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_OC5_SetConfig+0x7a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <TIM_OC5_SetConfig+0xc0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_OC5_SetConfig+0x7a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <TIM_OC5_SetConfig+0xc4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d109      	bne.n	8005d26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <TIM_OC6_SetConfig+0xb8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00f      	beq.n	8005ddc <TIM_OC6_SetConfig+0x7c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <TIM_OC6_SetConfig+0xbc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00b      	beq.n	8005ddc <TIM_OC6_SetConfig+0x7c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC6_SetConfig+0xc0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_OC6_SetConfig+0x7c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <TIM_OC6_SetConfig+0xc4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC6_SetConfig+0x7c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <TIM_OC6_SetConfig+0xc8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800

08005e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 030a 	bic.w	r3, r3, #10
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0210 	bic.w	r2, r3, #16
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f043 0307 	orr.w	r3, r3, #7
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	609a      	str	r2, [r3, #8]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e065      	b.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2b      	ldr	r2, [pc, #172]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d013      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10c      	bne.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e087      	b.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a27      	ldr	r2, [pc, #156]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d106      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d126      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	051b      	lsls	r3, r3, #20
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d106      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400

080061f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e042      	b.n	800628c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc f8b5 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fc62 	bl	8006b00 <UART_SetConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e022      	b.n	800628c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 ff22 	bl	8007098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 ffa9 	bl	80071dc <UART_CheckIdleState>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006294:	b480      	push	{r7}
 8006296:	b091      	sub	sp, #68	; 0x44
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 808c 	bne.w	80063c6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Transmit_IT+0x26>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e084      	b.n	80063c8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit_IT+0x38>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e07d      	b.n	80063c8 <HAL_UART_Transmit_IT+0x134>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2221      	movs	r2, #33	; 0x21
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006308:	d12e      	bne.n	8006368 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d107      	bne.n	8006324 <HAL_UART_Transmit_IT+0x90>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_UART_Transmit_IT+0x140>)
 8006320:	675a      	str	r2, [r3, #116]	; 0x74
 8006322:	e002      	b.n	800632a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <HAL_UART_Transmit_IT+0x144>)
 8006328:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006352:	637a      	str	r2, [r7, #52]	; 0x34
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <HAL_UART_Transmit_IT+0x9e>
 8006366:	e02c      	b.n	80063c2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d107      	bne.n	8006382 <HAL_UART_Transmit_IT+0xee>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_UART_Transmit_IT+0x148>)
 800637e:	675a      	str	r2, [r3, #116]	; 0x74
 8006380:	e002      	b.n	8006388 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_UART_Transmit_IT+0x14c>)
 8006386:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	613b      	str	r3, [r7, #16]
   return(result);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	69f9      	ldr	r1, [r7, #28]
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e6      	bne.n	8006390 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3744      	adds	r7, #68	; 0x44
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	08007b07 	.word	0x08007b07
 80063d8:	08007a27 	.word	0x08007a27
 80063dc:	08007965 	.word	0x08007965
 80063e0:	080078ad 	.word	0x080078ad

080063e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d142      	bne.n	8006482 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_UART_Receive_DMA+0x24>
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e03b      	b.n	8006484 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UART_Receive_DMA+0x36>
 8006416:	2302      	movs	r3, #2
 8006418:	e034      	b.n	8006484 <HAL_UART_Receive_DMA+0xa0>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a17      	ldr	r2, [pc, #92]	; (800648c <HAL_UART_Receive_DMA+0xa8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01f      	beq.n	8006472 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d018      	beq.n	8006472 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	61bb      	str	r3, [r7, #24]
   return(result);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 ffc3 	bl	8007404 <UART_Start_Receive_DMA>
 800647e:	4603      	mov	r3, r0
 8006480:	e000      	b.n	8006484 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006482:	2302      	movs	r3, #2
  }
}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	; 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40008000 	.word	0x40008000

08006490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b0ba      	sub	sp, #232	; 0xe8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80064be:	4013      	ands	r3, r2
 80064c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d11b      	bne.n	8006504 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 82d6 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
      }
      return;
 8006502:	e2d0      	b.n	8006aa6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 811f 	beq.w	800674c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800650e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006512:	4b8b      	ldr	r3, [pc, #556]	; (8006740 <HAL_UART_IRQHandler+0x2b0>)
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800651a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800651e:	4b89      	ldr	r3, [pc, #548]	; (8006744 <HAL_UART_IRQHandler+0x2b4>)
 8006520:	4013      	ands	r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8112 	beq.w	800674c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d011      	beq.n	8006558 <HAL_UART_IRQHandler+0xc8>
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654e:	f043 0201 	orr.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <HAL_UART_IRQHandler+0xf8>
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2202      	movs	r2, #2
 8006576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657e:	f043 0204 	orr.w	r2, r3, #4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d011      	beq.n	80065b8 <HAL_UART_IRQHandler+0x128>
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2204      	movs	r2, #4
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ae:	f043 0202 	orr.w	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065d4:	4b5a      	ldr	r3, [pc, #360]	; (8006740 <HAL_UART_IRQHandler+0x2b0>)
 80065d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ea:	f043 0208 	orr.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <HAL_UART_IRQHandler+0x196>
 8006600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00c      	beq.n	8006626 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 823c 	beq.w	8006aaa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800667e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006686:	2b00      	cmp	r3, #0
 8006688:	d04f      	beq.n	800672a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 ffa3 	bl	80075d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d141      	bne.n	8006722 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d9      	bne.n	800669e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f6:	4a14      	ldr	r2, [pc, #80]	; (8006748 <HAL_UART_IRQHandler+0x2b8>)
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fc fb34 	bl	8002d6c <HAL_DMA_Abort_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d017      	beq.n	800673a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	e00f      	b.n	800673a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f9da 	bl	8006ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	e00b      	b.n	800673a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9d6 	bl	8006ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e007      	b.n	800673a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9d2 	bl	8006ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006738:	e1b7      	b.n	8006aaa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673a:	bf00      	nop
    return;
 800673c:	e1b5      	b.n	8006aaa <HAL_UART_IRQHandler+0x61a>
 800673e:	bf00      	nop
 8006740:	10000001 	.word	0x10000001
 8006744:	04000120 	.word	0x04000120
 8006748:	08007881 	.word	0x08007881

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006750:	2b01      	cmp	r3, #1
 8006752:	f040 814a 	bne.w	80069ea <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8143 	beq.w	80069ea <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 813c 	beq.w	80069ea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2210      	movs	r2, #16
 8006778:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	f040 80b5 	bne.w	80068f4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006796:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8187 	beq.w	8006aae <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067aa:	429a      	cmp	r2, r3
 80067ac:	f080 817f 	bcs.w	8006aae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 8086 	bne.w	80068d8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800680e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1da      	bne.n	80067cc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800683a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800683e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800684c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e1      	bne.n	8006816 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800687c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e3      	bne.n	8006852 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a8:	f023 0310 	bic.w	r3, r3, #16
 80068ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80068bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e4      	bne.n	8006898 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fc f9f1 	bl	8002cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f8fb 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068f2:	e0dc      	b.n	8006aae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006900:	b29b      	uxth	r3, r3
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80ce 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006916:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80c9 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006942:	647b      	str	r3, [r7, #68]	; 0x44
 8006944:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e4      	bne.n	8006920 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	623b      	str	r3, [r7, #32]
   return(result);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800697e:	633a      	str	r2, [r7, #48]	; 0x30
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e1      	bne.n	8006956 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	617b      	str	r3, [r7, #20]
   return(result);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e4      	bne.n	80069a6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f880 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069e8:	e063      	b.n	8006ab2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <HAL_UART_IRQHandler+0x584>
 80069f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f91a 	bl	8007c46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a12:	e051      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d014      	beq.n	8006a4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d03a      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
    }
    return;
 8006a48:	e035      	b.n	8006ab6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_UART_IRQHandler+0x5da>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f8c4 	bl	8007bf0 <UART_EndTransmit_IT>
    return;
 8006a68:	e026      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5fa>
 8006a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f8f3 	bl	8007c6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a88:	e016      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x628>
 8006a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da0c      	bge.n	8006ab8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 f8db 	bl	8007c5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa4:	e008      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
      return;
 8006aa6:	bf00      	nop
 8006aa8:	e006      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
    return;
 8006aaa:	bf00      	nop
 8006aac:	e004      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
      return;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_UART_IRQHandler+0x628>
    return;
 8006ab6:	bf00      	nop
  }
}
 8006ab8:	37e8      	adds	r7, #232	; 0xe8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b04:	b08c      	sub	sp, #48	; 0x30
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4bab      	ldr	r3, [pc, #684]	; (8006ddc <UART_SetConfig+0x2dc>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4aa0      	ldr	r2, [pc, #640]	; (8006de0 <UART_SetConfig+0x2e0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	f023 010f 	bic.w	r1, r3, #15
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a91      	ldr	r2, [pc, #580]	; (8006de4 <UART_SetConfig+0x2e4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d125      	bne.n	8006bf0 <UART_SetConfig+0xf0>
 8006ba4:	4b90      	ldr	r3, [pc, #576]	; (8006de8 <UART_SetConfig+0x2e8>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d81a      	bhi.n	8006be8 <UART_SetConfig+0xe8>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0xb8>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e0d6      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e0d2      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e0ce      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e0ca      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e0c6      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7d      	ldr	r2, [pc, #500]	; (8006dec <UART_SetConfig+0x2ec>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d138      	bne.n	8006c6c <UART_SetConfig+0x16c>
 8006bfa:	4b7b      	ldr	r3, [pc, #492]	; (8006de8 <UART_SetConfig+0x2e8>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f003 030c 	and.w	r3, r3, #12
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	d82d      	bhi.n	8006c64 <UART_SetConfig+0x164>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x110>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c65 	.word	0x08006c65
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c65 	.word	0x08006c65
 8006c28:	08006c65 	.word	0x08006c65
 8006c2c:	08006c65 	.word	0x08006c65
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4a:	e098      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c52:	e094      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e090      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e08c      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e088      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5f      	ldr	r2, [pc, #380]	; (8006df0 <UART_SetConfig+0x2f0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d125      	bne.n	8006cc2 <UART_SetConfig+0x1c2>
 8006c76:	4b5c      	ldr	r3, [pc, #368]	; (8006de8 <UART_SetConfig+0x2e8>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c80:	2b30      	cmp	r3, #48	; 0x30
 8006c82:	d016      	beq.n	8006cb2 <UART_SetConfig+0x1b2>
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d818      	bhi.n	8006cba <UART_SetConfig+0x1ba>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d00a      	beq.n	8006ca2 <UART_SetConfig+0x1a2>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d814      	bhi.n	8006cba <UART_SetConfig+0x1ba>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <UART_SetConfig+0x19a>
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d008      	beq.n	8006caa <UART_SetConfig+0x1aa>
 8006c98:	e00f      	b.n	8006cba <UART_SetConfig+0x1ba>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca0:	e06d      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca8:	e069      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006caa:	2304      	movs	r3, #4
 8006cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb0:	e065      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb8:	e061      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006cba:	2310      	movs	r3, #16
 8006cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc0:	e05d      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a4b      	ldr	r2, [pc, #300]	; (8006df4 <UART_SetConfig+0x2f4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d125      	bne.n	8006d18 <UART_SetConfig+0x218>
 8006ccc:	4b46      	ldr	r3, [pc, #280]	; (8006de8 <UART_SetConfig+0x2e8>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cd8:	d016      	beq.n	8006d08 <UART_SetConfig+0x208>
 8006cda:	2bc0      	cmp	r3, #192	; 0xc0
 8006cdc:	d818      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d00a      	beq.n	8006cf8 <UART_SetConfig+0x1f8>
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d814      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <UART_SetConfig+0x1f0>
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d008      	beq.n	8006d00 <UART_SetConfig+0x200>
 8006cee:	e00f      	b.n	8006d10 <UART_SetConfig+0x210>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e042      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e03e      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d00:	2304      	movs	r3, #4
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e03a      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d08:	2308      	movs	r3, #8
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0e:	e036      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d10:	2310      	movs	r3, #16
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d16:	e032      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <UART_SetConfig+0x2e0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d12a      	bne.n	8006d78 <UART_SetConfig+0x278>
 8006d22:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <UART_SetConfig+0x2e8>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d30:	d01a      	beq.n	8006d68 <UART_SetConfig+0x268>
 8006d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d36:	d81b      	bhi.n	8006d70 <UART_SetConfig+0x270>
 8006d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3c:	d00c      	beq.n	8006d58 <UART_SetConfig+0x258>
 8006d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d42:	d815      	bhi.n	8006d70 <UART_SetConfig+0x270>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <UART_SetConfig+0x250>
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4c:	d008      	beq.n	8006d60 <UART_SetConfig+0x260>
 8006d4e:	e00f      	b.n	8006d70 <UART_SetConfig+0x270>
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e012      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e00e      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e00a      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	e006      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d76:	e002      	b.n	8006d7e <UART_SetConfig+0x27e>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <UART_SetConfig+0x2e0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	f040 80a8 	bne.w	8006eda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d834      	bhi.n	8006dfc <UART_SetConfig+0x2fc>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x298>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dfd 	.word	0x08006dfd
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006dcb 	.word	0x08006dcb
 8006dac:	08006dfd 	.word	0x08006dfd
 8006db0:	08006dfd 	.word	0x08006dfd
 8006db4:	08006dfd 	.word	0x08006dfd
 8006db8:	08006dd3 	.word	0x08006dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fd fe88 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dc2:	e021      	b.n	8006e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <UART_SetConfig+0x2f8>)
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dc8:	e01e      	b.n	8006e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fd fe13 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 8006dce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dd0:	e01a      	b.n	8006e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dd8:	e016      	b.n	8006e08 <UART_SetConfig+0x308>
 8006dda:	bf00      	nop
 8006ddc:	cfff69f3 	.word	0xcfff69f3
 8006de0:	40008000 	.word	0x40008000
 8006de4:	40013800 	.word	0x40013800
 8006de8:	40021000 	.word	0x40021000
 8006dec:	40004400 	.word	0x40004400
 8006df0:	40004800 	.word	0x40004800
 8006df4:	40004c00 	.word	0x40004c00
 8006df8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 812a 	beq.w	8007064 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	4a9e      	ldr	r2, [pc, #632]	; (8007090 <UART_SetConfig+0x590>)
 8006e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d305      	bcc.n	8006e40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d903      	bls.n	8006e48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e46:	e10d      	b.n	8007064 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	60fa      	str	r2, [r7, #12]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	4a8e      	ldr	r2, [pc, #568]	; (8007090 <UART_SetConfig+0x590>)
 8006e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e6a:	f7f9 ff35 	bl	8000cd8 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	020b      	lsls	r3, r1, #8
 8006e80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e84:	0202      	lsls	r2, r0, #8
 8006e86:	6979      	ldr	r1, [r7, #20]
 8006e88:	6849      	ldr	r1, [r1, #4]
 8006e8a:	0849      	lsrs	r1, r1, #1
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	4605      	mov	r5, r0
 8006e92:	eb12 0804 	adds.w	r8, r2, r4
 8006e96:	eb43 0905 	adc.w	r9, r3, r5
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	469a      	mov	sl, r3
 8006ea2:	4693      	mov	fp, r2
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 ff14 	bl	8000cd8 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ebe:	d308      	bcc.n	8006ed2 <UART_SetConfig+0x3d2>
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec6:	d204      	bcs.n	8006ed2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	e0c8      	b.n	8007064 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ed8:	e0c4      	b.n	8007064 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d167      	bne.n	8006fb4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d828      	bhi.n	8006f3e <UART_SetConfig+0x43e>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x3f4>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f3f 	.word	0x08006f3f
 8006f04:	08006f2f 	.word	0x08006f2f
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f3f 	.word	0x08006f3f
 8006f14:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fd fdda 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f1e:	e014      	b.n	8006f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f20:	f7fd fdec 	bl	8004afc <HAL_RCC_GetPCLK2Freq>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f26:	e010      	b.n	8006f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b5a      	ldr	r3, [pc, #360]	; (8007094 <UART_SetConfig+0x594>)
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f2c:	e00d      	b.n	8006f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fd fd61 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f34:	e009      	b.n	8006f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f3c:	e005      	b.n	8006f4a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8089 	beq.w	8007064 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	4a4e      	ldr	r2, [pc, #312]	; (8007090 <UART_SetConfig+0x590>)
 8006f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f64:	005a      	lsls	r2, r3, #1
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	441a      	add	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d916      	bls.n	8006fac <UART_SetConfig+0x4ac>
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d212      	bcs.n	8006fac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f023 030f 	bic.w	r3, r3, #15
 8006f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	8bfb      	ldrh	r3, [r7, #30]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	8bfa      	ldrh	r2, [r7, #30]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e05b      	b.n	8007064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fb2:	e057      	b.n	8007064 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d828      	bhi.n	800700e <UART_SetConfig+0x50e>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x4c4>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fd fd72 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8006fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fee:	e014      	b.n	800701a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fd fd84 	bl	8004afc <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ff6:	e010      	b.n	800701a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b26      	ldr	r3, [pc, #152]	; (8007094 <UART_SetConfig+0x594>)
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ffc:	e00d      	b.n	800701a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fd fcf9 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007004:	e009      	b.n	800701a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800700c:	e005      	b.n	800701a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007018:	bf00      	nop
    }

    if (pclk != 0U)
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d021      	beq.n	8007064 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <UART_SetConfig+0x590>)
 8007026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702a:	461a      	mov	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d909      	bls.n	800705e <UART_SetConfig+0x55e>
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007050:	d205      	bcs.n	800705e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	b29a      	uxth	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	e002      	b.n	8007064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2201      	movs	r2, #1
 8007068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2201      	movs	r2, #1
 8007070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2200      	movs	r2, #0
 8007078:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007080:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007084:	4618      	mov	r0, r3
 8007086:	3730      	adds	r7, #48	; 0x30
 8007088:	46bd      	mov	sp, r7
 800708a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708e:	bf00      	nop
 8007090:	0800bcb8 	.word	0x0800bcb8
 8007094:	00f42400 	.word	0x00f42400

08007098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01a      	beq.n	80071ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007196:	d10a      	bne.n	80071ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ec:	f7fb fb26 	bl	800283c <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f82f 	bl	8007272 <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e025      	b.n	800726a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d10e      	bne.n	800724a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f819 	bl	8007272 <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e00f      	b.n	800726a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b09c      	sub	sp, #112	; 0x70
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007282:	e0a9      	b.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	f000 80a5 	beq.w	80073d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728e:	f7fb fad5 	bl	800283c <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800729e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d140      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072b8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e6      	bne.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	663b      	str	r3, [r7, #96]	; 0x60
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e5      	bne.n	80072d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e069      	b.n	80073fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d051      	beq.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007342:	d149      	bne.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800734c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	66bb      	str	r3, [r7, #104]	; 0x68
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073a0:	623a      	str	r2, [r7, #32]
 80073a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69f9      	ldr	r1, [r7, #28]
 80073a6:	6a3a      	ldr	r2, [r7, #32]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e5      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e010      	b.n	80073fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69da      	ldr	r2, [r3, #28]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4013      	ands	r3, r2
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	bf0c      	ite	eq
 80073e8:	2301      	moveq	r3, #1
 80073ea:	2300      	movne	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f43f af46 	beq.w	8007284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3770      	adds	r7, #112	; 0x70
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b096      	sub	sp, #88	; 0x58
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2222      	movs	r2, #34	; 0x22
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02c      	beq.n	8007492 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	4a42      	ldr	r2, [pc, #264]	; (8007548 <UART_Start_Receive_DMA+0x144>)
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007444:	4a41      	ldr	r2, [pc, #260]	; (800754c <UART_Start_Receive_DMA+0x148>)
 8007446:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744c:	4a40      	ldr	r2, [pc, #256]	; (8007550 <UART_Start_Receive_DMA+0x14c>)
 800744e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007454:	2200      	movs	r2, #0
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	4619      	mov	r1, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	461a      	mov	r2, r3
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	f7fb fbaa 	bl	8002bc4 <HAL_DMA_Start_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00d      	beq.n	8007492 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2210      	movs	r2, #16
 800747a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e055      	b.n	800753e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d018      	beq.n	80074d4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b6:	657b      	str	r3, [r7, #84]	; 0x54
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	653b      	str	r3, [r7, #80]	; 0x50
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074f4:	637a      	str	r2, [r7, #52]	; 0x34
 80074f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e5      	bne.n	80074d4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	613b      	str	r3, [r7, #16]
   return(result);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007528:	623a      	str	r2, [r7, #32]
 800752a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	69f9      	ldr	r1, [r7, #28]
 800752e:	6a3a      	ldr	r2, [r7, #32]
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	61bb      	str	r3, [r7, #24]
   return(result);
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3758      	adds	r7, #88	; 0x58
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	080076a3 	.word	0x080076a3
 800754c:	080077c9 	.word	0x080077c9
 8007550:	08007801 	.word	0x08007801

08007554 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b08f      	sub	sp, #60	; 0x3c
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	61fb      	str	r3, [r7, #28]
   return(result);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800757c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	60bb      	str	r3, [r7, #8]
   return(result);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075a4:	633b      	str	r3, [r7, #48]	; 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ae:	61ba      	str	r2, [r7, #24]
 80075b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6979      	ldr	r1, [r7, #20]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	613b      	str	r3, [r7, #16]
   return(result);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e5      	bne.n	800758e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80075ca:	bf00      	nop
 80075cc:	373c      	adds	r7, #60	; 0x3c
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b095      	sub	sp, #84	; 0x54
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	643b      	str	r3, [r7, #64]	; 0x40
 80075fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	64bb      	str	r3, [r7, #72]	; 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800763a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e3      	bne.n	8007610 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800764c:	2b01      	cmp	r3, #1
 800764e:	d118      	bne.n	8007682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	60bb      	str	r3, [r7, #8]
   return(result);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e6      	bne.n	8007650 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007696:	bf00      	nop
 8007698:	3754      	adds	r7, #84	; 0x54
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b09c      	sub	sp, #112	; 0x70
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d171      	bne.n	80077a2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076da:	66bb      	str	r3, [r7, #104]	; 0x68
 80076dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80076e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	667b      	str	r3, [r7, #100]	; 0x64
 8007710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007718:	647a      	str	r2, [r7, #68]	; 0x44
 800771a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800771e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800772c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	623b      	str	r3, [r7, #32]
   return(result);
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007742:	663b      	str	r3, [r7, #96]	; 0x60
 8007744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800774c:	633a      	str	r2, [r7, #48]	; 0x30
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d118      	bne.n	80077a2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	60fb      	str	r3, [r7, #12]
   return(result);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	69b9      	ldr	r1, [r7, #24]
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	617b      	str	r3, [r7, #20]
   return(result);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d107      	bne.n	80077ba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b0:	4619      	mov	r1, r3
 80077b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077b4:	f7ff f998 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077b8:	e002      	b.n	80077c0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80077ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077bc:	f7f9 fcb0 	bl	8001120 <HAL_UART_RxCpltCallback>
}
 80077c0:	bf00      	nop
 80077c2:	3770      	adds	r7, #112	; 0x70
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d109      	bne.n	80077f2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff f97c 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077f0:	e002      	b.n	80077f8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff f964 	bl	8006ac0 <HAL_UART_RxHalfCpltCallback>
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007814:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007828:	2b80      	cmp	r3, #128	; 0x80
 800782a:	d109      	bne.n	8007840 <UART_DMAError+0x40>
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b21      	cmp	r3, #33	; 0x21
 8007830:	d106      	bne.n	8007840 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2200      	movs	r2, #0
 8007836:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800783a:	6978      	ldr	r0, [r7, #20]
 800783c:	f7ff fe8a 	bl	8007554 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d109      	bne.n	8007862 <UART_DMAError+0x62>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b22      	cmp	r3, #34	; 0x22
 8007852:	d106      	bne.n	8007862 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800785c:	6978      	ldr	r0, [r7, #20]
 800785e:	f7ff feba 	bl	80075d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007868:	f043 0210 	orr.w	r2, r3, #16
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007872:	6978      	ldr	r0, [r7, #20]
 8007874:	f7ff f92e 	bl	8006ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007878:	bf00      	nop
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff f918 	bl	8006ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b08f      	sub	sp, #60	; 0x3c
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ba:	2b21      	cmp	r3, #33	; 0x21
 80078bc:	d14c      	bne.n	8007958 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d132      	bne.n	8007930 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	60bb      	str	r3, [r7, #8]
   return(result);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007910:	633b      	str	r3, [r7, #48]	; 0x30
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6979      	ldr	r1, [r7, #20]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	613b      	str	r3, [r7, #16]
   return(result);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e6      	bne.n	80078fc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800792e:	e013      	b.n	8007958 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007958:	bf00      	nop
 800795a:	373c      	adds	r7, #60	; 0x3c
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b091      	sub	sp, #68	; 0x44
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007972:	2b21      	cmp	r3, #33	; 0x21
 8007974:	d151      	bne.n	8007a1a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d132      	bne.n	80079e8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	623b      	str	r3, [r7, #32]
   return(result);
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
 80079a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e6      	bne.n	8007982 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	69b9      	ldr	r1, [r7, #24]
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	617b      	str	r3, [r7, #20]
   return(result);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80079e6:	e018      	b.n	8007a1a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007a1a:	bf00      	nop
 8007a1c:	3744      	adds	r7, #68	; 0x44
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b091      	sub	sp, #68	; 0x44
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a34:	2b21      	cmp	r3, #33	; 0x21
 8007a36:	d160      	bne.n	8007afa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a40:	e057      	b.n	8007af2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d133      	bne.n	8007ab6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	617b      	str	r3, [r7, #20]
   return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e6      	bne.n	8007a82 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ab4:	e021      	b.n	8007afa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d013      	beq.n	8007aec <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac8:	781a      	ldrb	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007aee:	3b01      	subs	r3, #1
 8007af0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007af2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1a4      	bne.n	8007a42 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007af8:	e7ff      	b.n	8007afa <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007afa:	bf00      	nop
 8007afc:	3744      	adds	r7, #68	; 0x44
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b091      	sub	sp, #68	; 0x44
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b14:	2b21      	cmp	r3, #33	; 0x21
 8007b16:	d165      	bne.n	8007be4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b20:	e05c      	b.n	8007bdc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d133      	bne.n	8007b96 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b76:	633b      	str	r3, [r7, #48]	; 0x30
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6979      	ldr	r1, [r7, #20]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007b94:	e026      	b.n	8007be4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d018      	beq.n	8007bd6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	1c9a      	adds	r2, r3, #2
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d19f      	bne.n	8007b22 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007be2:	e7ff      	b.n	8007be4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007be4:	bf00      	nop
 8007be6:	3744      	adds	r7, #68	; 0x44
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	613b      	str	r3, [r7, #16]
   return(result);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7f9 fa61 	bl	8001100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c3e:	bf00      	nop
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e027      	b.n	8007ce8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	; 0x24
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e02d      	b.n	8007d68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f84f 	bl	8007dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e02d      	b.n	8007de4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2224      	movs	r2, #36	; 0x24
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f811 	bl	8007dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e0c:	e031      	b.n	8007e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e0e:	2308      	movs	r3, #8
 8007e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e12:	2308      	movs	r3, #8
 8007e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	0e5b      	lsrs	r3, r3, #25
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	0f5b      	lsrs	r3, r3, #29
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	7b3a      	ldrb	r2, [r7, #12]
 8007e3a:	4911      	ldr	r1, [pc, #68]	; (8007e80 <UARTEx_SetNbDataToProcess+0x94>)
 8007e3c:	5c8a      	ldrb	r2, [r1, r2]
 8007e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e42:	7b3a      	ldrb	r2, [r7, #12]
 8007e44:	490f      	ldr	r1, [pc, #60]	; (8007e84 <UARTEx_SetNbDataToProcess+0x98>)
 8007e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	7b7a      	ldrb	r2, [r7, #13]
 8007e58:	4909      	ldr	r1, [pc, #36]	; (8007e80 <UARTEx_SetNbDataToProcess+0x94>)
 8007e5a:	5c8a      	ldrb	r2, [r1, r2]
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e60:	7b7a      	ldrb	r2, [r7, #13]
 8007e62:	4908      	ldr	r1, [pc, #32]	; (8007e84 <UARTEx_SetNbDataToProcess+0x98>)
 8007e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	0800bcd0 	.word	0x0800bcd0
 8007e84:	0800bcd8 	.word	0x0800bcd8

08007e88 <atan>:
 8007e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	ec55 4b10 	vmov	r4, r5, d0
 8007e90:	4bc3      	ldr	r3, [pc, #780]	; (80081a0 <atan+0x318>)
 8007e92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e96:	429e      	cmp	r6, r3
 8007e98:	46ab      	mov	fp, r5
 8007e9a:	dd18      	ble.n	8007ece <atan+0x46>
 8007e9c:	4bc1      	ldr	r3, [pc, #772]	; (80081a4 <atan+0x31c>)
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	dc01      	bgt.n	8007ea6 <atan+0x1e>
 8007ea2:	d109      	bne.n	8007eb8 <atan+0x30>
 8007ea4:	b144      	cbz	r4, 8007eb8 <atan+0x30>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 fa15 	bl	80002dc <__adddf3>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	e006      	b.n	8007ec6 <atan+0x3e>
 8007eb8:	f1bb 0f00 	cmp.w	fp, #0
 8007ebc:	f300 8131 	bgt.w	8008122 <atan+0x29a>
 8007ec0:	a59b      	add	r5, pc, #620	; (adr r5, 8008130 <atan+0x2a8>)
 8007ec2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ec6:	ec45 4b10 	vmov	d0, r4, r5
 8007eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ece:	4bb6      	ldr	r3, [pc, #728]	; (80081a8 <atan+0x320>)
 8007ed0:	429e      	cmp	r6, r3
 8007ed2:	dc14      	bgt.n	8007efe <atan+0x76>
 8007ed4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ed8:	429e      	cmp	r6, r3
 8007eda:	dc0d      	bgt.n	8007ef8 <atan+0x70>
 8007edc:	a396      	add	r3, pc, #600	; (adr r3, 8008138 <atan+0x2b0>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	ee10 0a10 	vmov	r0, s0
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 f9f8 	bl	80002dc <__adddf3>
 8007eec:	4baf      	ldr	r3, [pc, #700]	; (80081ac <atan+0x324>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f7f8 fe3a 	bl	8000b68 <__aeabi_dcmpgt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d1e6      	bne.n	8007ec6 <atan+0x3e>
 8007ef8:	f04f 3aff 	mov.w	sl, #4294967295
 8007efc:	e02b      	b.n	8007f56 <atan+0xce>
 8007efe:	f000 f963 	bl	80081c8 <fabs>
 8007f02:	4bab      	ldr	r3, [pc, #684]	; (80081b0 <atan+0x328>)
 8007f04:	429e      	cmp	r6, r3
 8007f06:	ec55 4b10 	vmov	r4, r5, d0
 8007f0a:	f300 80bf 	bgt.w	800808c <atan+0x204>
 8007f0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f12:	429e      	cmp	r6, r3
 8007f14:	f300 80a0 	bgt.w	8008058 <atan+0x1d0>
 8007f18:	ee10 2a10 	vmov	r2, s0
 8007f1c:	ee10 0a10 	vmov	r0, s0
 8007f20:	462b      	mov	r3, r5
 8007f22:	4629      	mov	r1, r5
 8007f24:	f7f8 f9da 	bl	80002dc <__adddf3>
 8007f28:	4ba0      	ldr	r3, [pc, #640]	; (80081ac <atan+0x324>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f7f8 f9d4 	bl	80002d8 <__aeabi_dsub>
 8007f30:	2200      	movs	r2, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 f9cd 	bl	80002dc <__adddf3>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 fca7 	bl	800089c <__aeabi_ddiv>
 8007f4e:	f04f 0a00 	mov.w	sl, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	460d      	mov	r5, r1
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fb73 	bl	8000648 <__aeabi_dmul>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	f7f8 fb6d 	bl	8000648 <__aeabi_dmul>
 8007f6e:	a374      	add	r3, pc, #464	; (adr r3, 8008140 <atan+0x2b8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	f7f8 fb66 	bl	8000648 <__aeabi_dmul>
 8007f7c:	a372      	add	r3, pc, #456	; (adr r3, 8008148 <atan+0x2c0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f9ab 	bl	80002dc <__adddf3>
 8007f86:	4632      	mov	r2, r6
 8007f88:	463b      	mov	r3, r7
 8007f8a:	f7f8 fb5d 	bl	8000648 <__aeabi_dmul>
 8007f8e:	a370      	add	r3, pc, #448	; (adr r3, 8008150 <atan+0x2c8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f9a2 	bl	80002dc <__adddf3>
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	f7f8 fb54 	bl	8000648 <__aeabi_dmul>
 8007fa0:	a36d      	add	r3, pc, #436	; (adr r3, 8008158 <atan+0x2d0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f999 	bl	80002dc <__adddf3>
 8007faa:	4632      	mov	r2, r6
 8007fac:	463b      	mov	r3, r7
 8007fae:	f7f8 fb4b 	bl	8000648 <__aeabi_dmul>
 8007fb2:	a36b      	add	r3, pc, #428	; (adr r3, 8008160 <atan+0x2d8>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f990 	bl	80002dc <__adddf3>
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	f7f8 fb42 	bl	8000648 <__aeabi_dmul>
 8007fc4:	a368      	add	r3, pc, #416	; (adr r3, 8008168 <atan+0x2e0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 f987 	bl	80002dc <__adddf3>
 8007fce:	4642      	mov	r2, r8
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	f7f8 fb39 	bl	8000648 <__aeabi_dmul>
 8007fd6:	a366      	add	r3, pc, #408	; (adr r3, 8008170 <atan+0x2e8>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	4680      	mov	r8, r0
 8007fde:	4689      	mov	r9, r1
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 fb30 	bl	8000648 <__aeabi_dmul>
 8007fe8:	a363      	add	r3, pc, #396	; (adr r3, 8008178 <atan+0x2f0>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 f973 	bl	80002d8 <__aeabi_dsub>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	f7f8 fb27 	bl	8000648 <__aeabi_dmul>
 8007ffa:	a361      	add	r3, pc, #388	; (adr r3, 8008180 <atan+0x2f8>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f96a 	bl	80002d8 <__aeabi_dsub>
 8008004:	4632      	mov	r2, r6
 8008006:	463b      	mov	r3, r7
 8008008:	f7f8 fb1e 	bl	8000648 <__aeabi_dmul>
 800800c:	a35e      	add	r3, pc, #376	; (adr r3, 8008188 <atan+0x300>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 f961 	bl	80002d8 <__aeabi_dsub>
 8008016:	4632      	mov	r2, r6
 8008018:	463b      	mov	r3, r7
 800801a:	f7f8 fb15 	bl	8000648 <__aeabi_dmul>
 800801e:	a35c      	add	r3, pc, #368	; (adr r3, 8008190 <atan+0x308>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 f958 	bl	80002d8 <__aeabi_dsub>
 8008028:	4632      	mov	r2, r6
 800802a:	463b      	mov	r3, r7
 800802c:	f7f8 fb0c 	bl	8000648 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4640      	mov	r0, r8
 8008036:	4649      	mov	r1, r9
 8008038:	f7f8 f950 	bl	80002dc <__adddf3>
 800803c:	4622      	mov	r2, r4
 800803e:	462b      	mov	r3, r5
 8008040:	f7f8 fb02 	bl	8000648 <__aeabi_dmul>
 8008044:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	d14b      	bne.n	80080e6 <atan+0x25e>
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 f941 	bl	80002d8 <__aeabi_dsub>
 8008056:	e72c      	b.n	8007eb2 <atan+0x2a>
 8008058:	ee10 0a10 	vmov	r0, s0
 800805c:	4b53      	ldr	r3, [pc, #332]	; (80081ac <atan+0x324>)
 800805e:	2200      	movs	r2, #0
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f939 	bl	80002d8 <__aeabi_dsub>
 8008066:	4b51      	ldr	r3, [pc, #324]	; (80081ac <atan+0x324>)
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	2200      	movs	r2, #0
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 f933 	bl	80002dc <__adddf3>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4630      	mov	r0, r6
 800807c:	4639      	mov	r1, r7
 800807e:	f7f8 fc0d 	bl	800089c <__aeabi_ddiv>
 8008082:	f04f 0a01 	mov.w	sl, #1
 8008086:	4604      	mov	r4, r0
 8008088:	460d      	mov	r5, r1
 800808a:	e764      	b.n	8007f56 <atan+0xce>
 800808c:	4b49      	ldr	r3, [pc, #292]	; (80081b4 <atan+0x32c>)
 800808e:	429e      	cmp	r6, r3
 8008090:	da1d      	bge.n	80080ce <atan+0x246>
 8008092:	ee10 0a10 	vmov	r0, s0
 8008096:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <atan+0x330>)
 8008098:	2200      	movs	r2, #0
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f91c 	bl	80002d8 <__aeabi_dsub>
 80080a0:	4b45      	ldr	r3, [pc, #276]	; (80081b8 <atan+0x330>)
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	2200      	movs	r2, #0
 80080a8:	4620      	mov	r0, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7f8 facc 	bl	8000648 <__aeabi_dmul>
 80080b0:	4b3e      	ldr	r3, [pc, #248]	; (80081ac <atan+0x324>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 f912 	bl	80002dc <__adddf3>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 fbec 	bl	800089c <__aeabi_ddiv>
 80080c4:	f04f 0a02 	mov.w	sl, #2
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	e743      	b.n	8007f56 <atan+0xce>
 80080ce:	462b      	mov	r3, r5
 80080d0:	ee10 2a10 	vmov	r2, s0
 80080d4:	4939      	ldr	r1, [pc, #228]	; (80081bc <atan+0x334>)
 80080d6:	2000      	movs	r0, #0
 80080d8:	f7f8 fbe0 	bl	800089c <__aeabi_ddiv>
 80080dc:	f04f 0a03 	mov.w	sl, #3
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	e737      	b.n	8007f56 <atan+0xce>
 80080e6:	4b36      	ldr	r3, [pc, #216]	; (80081c0 <atan+0x338>)
 80080e8:	4e36      	ldr	r6, [pc, #216]	; (80081c4 <atan+0x33c>)
 80080ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80080ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80080f2:	e9da 2300 	ldrd	r2, r3, [sl]
 80080f6:	f7f8 f8ef 	bl	80002d8 <__aeabi_dsub>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 f8eb 	bl	80002d8 <__aeabi_dsub>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	e9d6 0100 	ldrd	r0, r1, [r6]
 800810a:	f7f8 f8e5 	bl	80002d8 <__aeabi_dsub>
 800810e:	f1bb 0f00 	cmp.w	fp, #0
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	f6bf aed6 	bge.w	8007ec6 <atan+0x3e>
 800811a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800811e:	461d      	mov	r5, r3
 8008120:	e6d1      	b.n	8007ec6 <atan+0x3e>
 8008122:	a51d      	add	r5, pc, #116	; (adr r5, 8008198 <atan+0x310>)
 8008124:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008128:	e6cd      	b.n	8007ec6 <atan+0x3e>
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w
 8008130:	54442d18 	.word	0x54442d18
 8008134:	bff921fb 	.word	0xbff921fb
 8008138:	8800759c 	.word	0x8800759c
 800813c:	7e37e43c 	.word	0x7e37e43c
 8008140:	e322da11 	.word	0xe322da11
 8008144:	3f90ad3a 	.word	0x3f90ad3a
 8008148:	24760deb 	.word	0x24760deb
 800814c:	3fa97b4b 	.word	0x3fa97b4b
 8008150:	a0d03d51 	.word	0xa0d03d51
 8008154:	3fb10d66 	.word	0x3fb10d66
 8008158:	c54c206e 	.word	0xc54c206e
 800815c:	3fb745cd 	.word	0x3fb745cd
 8008160:	920083ff 	.word	0x920083ff
 8008164:	3fc24924 	.word	0x3fc24924
 8008168:	5555550d 	.word	0x5555550d
 800816c:	3fd55555 	.word	0x3fd55555
 8008170:	2c6a6c2f 	.word	0x2c6a6c2f
 8008174:	bfa2b444 	.word	0xbfa2b444
 8008178:	52defd9a 	.word	0x52defd9a
 800817c:	3fadde2d 	.word	0x3fadde2d
 8008180:	af749a6d 	.word	0xaf749a6d
 8008184:	3fb3b0f2 	.word	0x3fb3b0f2
 8008188:	fe231671 	.word	0xfe231671
 800818c:	3fbc71c6 	.word	0x3fbc71c6
 8008190:	9998ebc4 	.word	0x9998ebc4
 8008194:	3fc99999 	.word	0x3fc99999
 8008198:	54442d18 	.word	0x54442d18
 800819c:	3ff921fb 	.word	0x3ff921fb
 80081a0:	440fffff 	.word	0x440fffff
 80081a4:	7ff00000 	.word	0x7ff00000
 80081a8:	3fdbffff 	.word	0x3fdbffff
 80081ac:	3ff00000 	.word	0x3ff00000
 80081b0:	3ff2ffff 	.word	0x3ff2ffff
 80081b4:	40038000 	.word	0x40038000
 80081b8:	3ff80000 	.word	0x3ff80000
 80081bc:	bff00000 	.word	0xbff00000
 80081c0:	0800bd00 	.word	0x0800bd00
 80081c4:	0800bce0 	.word	0x0800bce0

080081c8 <fabs>:
 80081c8:	ec51 0b10 	vmov	r0, r1, d0
 80081cc:	ee10 2a10 	vmov	r2, s0
 80081d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081d4:	ec43 2b10 	vmov	d0, r2, r3
 80081d8:	4770      	bx	lr

080081da <atan2>:
 80081da:	f000 b89d 	b.w	8008318 <__ieee754_atan2>
	...

080081e0 <pow>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	ed2d 8b02 	vpush	{d8}
 80081e6:	eeb0 8a40 	vmov.f32	s16, s0
 80081ea:	eef0 8a60 	vmov.f32	s17, s1
 80081ee:	ec55 4b11 	vmov	r4, r5, d1
 80081f2:	f000 f95d 	bl	80084b0 <__ieee754_pow>
 80081f6:	4622      	mov	r2, r4
 80081f8:	462b      	mov	r3, r5
 80081fa:	4620      	mov	r0, r4
 80081fc:	4629      	mov	r1, r5
 80081fe:	ec57 6b10 	vmov	r6, r7, d0
 8008202:	f7f8 fcbb 	bl	8000b7c <__aeabi_dcmpun>
 8008206:	2800      	cmp	r0, #0
 8008208:	d13b      	bne.n	8008282 <pow+0xa2>
 800820a:	ec51 0b18 	vmov	r0, r1, d8
 800820e:	2200      	movs	r2, #0
 8008210:	2300      	movs	r3, #0
 8008212:	f7f8 fc81 	bl	8000b18 <__aeabi_dcmpeq>
 8008216:	b1b8      	cbz	r0, 8008248 <pow+0x68>
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	f7f8 fc7a 	bl	8000b18 <__aeabi_dcmpeq>
 8008224:	2800      	cmp	r0, #0
 8008226:	d146      	bne.n	80082b6 <pow+0xd6>
 8008228:	ec45 4b10 	vmov	d0, r4, r5
 800822c:	f000 ff50 	bl	80090d0 <finite>
 8008230:	b338      	cbz	r0, 8008282 <pow+0xa2>
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 fc77 	bl	8000b2c <__aeabi_dcmplt>
 800823e:	b300      	cbz	r0, 8008282 <pow+0xa2>
 8008240:	f000 ffd8 	bl	80091f4 <__errno>
 8008244:	2322      	movs	r3, #34	; 0x22
 8008246:	e01b      	b.n	8008280 <pow+0xa0>
 8008248:	ec47 6b10 	vmov	d0, r6, r7
 800824c:	f000 ff40 	bl	80090d0 <finite>
 8008250:	b9e0      	cbnz	r0, 800828c <pow+0xac>
 8008252:	eeb0 0a48 	vmov.f32	s0, s16
 8008256:	eef0 0a68 	vmov.f32	s1, s17
 800825a:	f000 ff39 	bl	80090d0 <finite>
 800825e:	b1a8      	cbz	r0, 800828c <pow+0xac>
 8008260:	ec45 4b10 	vmov	d0, r4, r5
 8008264:	f000 ff34 	bl	80090d0 <finite>
 8008268:	b180      	cbz	r0, 800828c <pow+0xac>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 fc83 	bl	8000b7c <__aeabi_dcmpun>
 8008276:	2800      	cmp	r0, #0
 8008278:	d0e2      	beq.n	8008240 <pow+0x60>
 800827a:	f000 ffbb 	bl	80091f4 <__errno>
 800827e:	2321      	movs	r3, #33	; 0x21
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	ecbd 8b02 	vpop	{d8}
 8008286:	ec47 6b10 	vmov	d0, r6, r7
 800828a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fc40 	bl	8000b18 <__aeabi_dcmpeq>
 8008298:	2800      	cmp	r0, #0
 800829a:	d0f2      	beq.n	8008282 <pow+0xa2>
 800829c:	eeb0 0a48 	vmov.f32	s0, s16
 80082a0:	eef0 0a68 	vmov.f32	s1, s17
 80082a4:	f000 ff14 	bl	80090d0 <finite>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d0ea      	beq.n	8008282 <pow+0xa2>
 80082ac:	ec45 4b10 	vmov	d0, r4, r5
 80082b0:	f000 ff0e 	bl	80090d0 <finite>
 80082b4:	e7c3      	b.n	800823e <pow+0x5e>
 80082b6:	4f01      	ldr	r7, [pc, #4]	; (80082bc <pow+0xdc>)
 80082b8:	2600      	movs	r6, #0
 80082ba:	e7e2      	b.n	8008282 <pow+0xa2>
 80082bc:	3ff00000 	.word	0x3ff00000

080082c0 <sqrt>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	ed2d 8b02 	vpush	{d8}
 80082c6:	ec55 4b10 	vmov	r4, r5, d0
 80082ca:	f000 fe1f 	bl	8008f0c <__ieee754_sqrt>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	eeb0 8a40 	vmov.f32	s16, s0
 80082da:	eef0 8a60 	vmov.f32	s17, s1
 80082de:	f7f8 fc4d 	bl	8000b7c <__aeabi_dcmpun>
 80082e2:	b990      	cbnz	r0, 800830a <sqrt+0x4a>
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f8 fc1e 	bl	8000b2c <__aeabi_dcmplt>
 80082f0:	b158      	cbz	r0, 800830a <sqrt+0x4a>
 80082f2:	f000 ff7f 	bl	80091f4 <__errno>
 80082f6:	2321      	movs	r3, #33	; 0x21
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	2300      	movs	r3, #0
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	f7f8 facb 	bl	800089c <__aeabi_ddiv>
 8008306:	ec41 0b18 	vmov	d8, r0, r1
 800830a:	eeb0 0a48 	vmov.f32	s0, s16
 800830e:	eef0 0a68 	vmov.f32	s1, s17
 8008312:	ecbd 8b02 	vpop	{d8}
 8008316:	bd38      	pop	{r3, r4, r5, pc}

08008318 <__ieee754_atan2>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	ec57 6b11 	vmov	r6, r7, d1
 8008320:	4273      	negs	r3, r6
 8008322:	f8df e184 	ldr.w	lr, [pc, #388]	; 80084a8 <__ieee754_atan2+0x190>
 8008326:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800832a:	4333      	orrs	r3, r6
 800832c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008330:	4573      	cmp	r3, lr
 8008332:	ec51 0b10 	vmov	r0, r1, d0
 8008336:	ee11 8a10 	vmov	r8, s2
 800833a:	d80a      	bhi.n	8008352 <__ieee754_atan2+0x3a>
 800833c:	4244      	negs	r4, r0
 800833e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008342:	4304      	orrs	r4, r0
 8008344:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008348:	4574      	cmp	r4, lr
 800834a:	ee10 9a10 	vmov	r9, s0
 800834e:	468c      	mov	ip, r1
 8008350:	d907      	bls.n	8008362 <__ieee754_atan2+0x4a>
 8008352:	4632      	mov	r2, r6
 8008354:	463b      	mov	r3, r7
 8008356:	f7f7 ffc1 	bl	80002dc <__adddf3>
 800835a:	ec41 0b10 	vmov	d0, r0, r1
 800835e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008362:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008366:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800836a:	4334      	orrs	r4, r6
 800836c:	d103      	bne.n	8008376 <__ieee754_atan2+0x5e>
 800836e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008372:	f7ff bd89 	b.w	8007e88 <atan>
 8008376:	17bc      	asrs	r4, r7, #30
 8008378:	f004 0402 	and.w	r4, r4, #2
 800837c:	ea53 0909 	orrs.w	r9, r3, r9
 8008380:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008384:	d107      	bne.n	8008396 <__ieee754_atan2+0x7e>
 8008386:	2c02      	cmp	r4, #2
 8008388:	d060      	beq.n	800844c <__ieee754_atan2+0x134>
 800838a:	2c03      	cmp	r4, #3
 800838c:	d1e5      	bne.n	800835a <__ieee754_atan2+0x42>
 800838e:	a142      	add	r1, pc, #264	; (adr r1, 8008498 <__ieee754_atan2+0x180>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	e7e1      	b.n	800835a <__ieee754_atan2+0x42>
 8008396:	ea52 0808 	orrs.w	r8, r2, r8
 800839a:	d106      	bne.n	80083aa <__ieee754_atan2+0x92>
 800839c:	f1bc 0f00 	cmp.w	ip, #0
 80083a0:	da5f      	bge.n	8008462 <__ieee754_atan2+0x14a>
 80083a2:	a13f      	add	r1, pc, #252	; (adr r1, 80084a0 <__ieee754_atan2+0x188>)
 80083a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a8:	e7d7      	b.n	800835a <__ieee754_atan2+0x42>
 80083aa:	4572      	cmp	r2, lr
 80083ac:	d10f      	bne.n	80083ce <__ieee754_atan2+0xb6>
 80083ae:	4293      	cmp	r3, r2
 80083b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80083b4:	d107      	bne.n	80083c6 <__ieee754_atan2+0xae>
 80083b6:	2c02      	cmp	r4, #2
 80083b8:	d84c      	bhi.n	8008454 <__ieee754_atan2+0x13c>
 80083ba:	4b35      	ldr	r3, [pc, #212]	; (8008490 <__ieee754_atan2+0x178>)
 80083bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80083c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80083c4:	e7c9      	b.n	800835a <__ieee754_atan2+0x42>
 80083c6:	2c02      	cmp	r4, #2
 80083c8:	d848      	bhi.n	800845c <__ieee754_atan2+0x144>
 80083ca:	4b32      	ldr	r3, [pc, #200]	; (8008494 <__ieee754_atan2+0x17c>)
 80083cc:	e7f6      	b.n	80083bc <__ieee754_atan2+0xa4>
 80083ce:	4573      	cmp	r3, lr
 80083d0:	d0e4      	beq.n	800839c <__ieee754_atan2+0x84>
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80083d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80083dc:	da1e      	bge.n	800841c <__ieee754_atan2+0x104>
 80083de:	2f00      	cmp	r7, #0
 80083e0:	da01      	bge.n	80083e6 <__ieee754_atan2+0xce>
 80083e2:	323c      	adds	r2, #60	; 0x3c
 80083e4:	db1e      	blt.n	8008424 <__ieee754_atan2+0x10c>
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	f7f8 fa57 	bl	800089c <__aeabi_ddiv>
 80083ee:	ec41 0b10 	vmov	d0, r0, r1
 80083f2:	f7ff fee9 	bl	80081c8 <fabs>
 80083f6:	f7ff fd47 	bl	8007e88 <atan>
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	2c01      	cmp	r4, #1
 8008400:	d013      	beq.n	800842a <__ieee754_atan2+0x112>
 8008402:	2c02      	cmp	r4, #2
 8008404:	d015      	beq.n	8008432 <__ieee754_atan2+0x11a>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d0a7      	beq.n	800835a <__ieee754_atan2+0x42>
 800840a:	a319      	add	r3, pc, #100	; (adr r3, 8008470 <__ieee754_atan2+0x158>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f7 ff62 	bl	80002d8 <__aeabi_dsub>
 8008414:	a318      	add	r3, pc, #96	; (adr r3, 8008478 <__ieee754_atan2+0x160>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	e014      	b.n	8008446 <__ieee754_atan2+0x12e>
 800841c:	a118      	add	r1, pc, #96	; (adr r1, 8008480 <__ieee754_atan2+0x168>)
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	e7ec      	b.n	80083fe <__ieee754_atan2+0xe6>
 8008424:	2000      	movs	r0, #0
 8008426:	2100      	movs	r1, #0
 8008428:	e7e9      	b.n	80083fe <__ieee754_atan2+0xe6>
 800842a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842e:	4619      	mov	r1, r3
 8008430:	e793      	b.n	800835a <__ieee754_atan2+0x42>
 8008432:	a30f      	add	r3, pc, #60	; (adr r3, 8008470 <__ieee754_atan2+0x158>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff4e 	bl	80002d8 <__aeabi_dsub>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	a10d      	add	r1, pc, #52	; (adr r1, 8008478 <__ieee754_atan2+0x160>)
 8008442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008446:	f7f7 ff47 	bl	80002d8 <__aeabi_dsub>
 800844a:	e786      	b.n	800835a <__ieee754_atan2+0x42>
 800844c:	a10a      	add	r1, pc, #40	; (adr r1, 8008478 <__ieee754_atan2+0x160>)
 800844e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008452:	e782      	b.n	800835a <__ieee754_atan2+0x42>
 8008454:	a10c      	add	r1, pc, #48	; (adr r1, 8008488 <__ieee754_atan2+0x170>)
 8008456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845a:	e77e      	b.n	800835a <__ieee754_atan2+0x42>
 800845c:	2000      	movs	r0, #0
 800845e:	2100      	movs	r1, #0
 8008460:	e77b      	b.n	800835a <__ieee754_atan2+0x42>
 8008462:	a107      	add	r1, pc, #28	; (adr r1, 8008480 <__ieee754_atan2+0x168>)
 8008464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008468:	e777      	b.n	800835a <__ieee754_atan2+0x42>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	33145c07 	.word	0x33145c07
 8008474:	3ca1a626 	.word	0x3ca1a626
 8008478:	54442d18 	.word	0x54442d18
 800847c:	400921fb 	.word	0x400921fb
 8008480:	54442d18 	.word	0x54442d18
 8008484:	3ff921fb 	.word	0x3ff921fb
 8008488:	54442d18 	.word	0x54442d18
 800848c:	3fe921fb 	.word	0x3fe921fb
 8008490:	0800bd20 	.word	0x0800bd20
 8008494:	0800bd38 	.word	0x0800bd38
 8008498:	54442d18 	.word	0x54442d18
 800849c:	c00921fb 	.word	0xc00921fb
 80084a0:	54442d18 	.word	0x54442d18
 80084a4:	bff921fb 	.word	0xbff921fb
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	00000000 	.word	0x00000000

080084b0 <__ieee754_pow>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	ed2d 8b06 	vpush	{d8-d10}
 80084b8:	b089      	sub	sp, #36	; 0x24
 80084ba:	ed8d 1b00 	vstr	d1, [sp]
 80084be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80084c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80084c6:	ea58 0102 	orrs.w	r1, r8, r2
 80084ca:	ec57 6b10 	vmov	r6, r7, d0
 80084ce:	d115      	bne.n	80084fc <__ieee754_pow+0x4c>
 80084d0:	19b3      	adds	r3, r6, r6
 80084d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80084d6:	4152      	adcs	r2, r2
 80084d8:	4299      	cmp	r1, r3
 80084da:	4b89      	ldr	r3, [pc, #548]	; (8008700 <__ieee754_pow+0x250>)
 80084dc:	4193      	sbcs	r3, r2
 80084de:	f080 84d2 	bcs.w	8008e86 <__ieee754_pow+0x9d6>
 80084e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fef7 	bl	80002dc <__adddf3>
 80084ee:	ec41 0b10 	vmov	d0, r0, r1
 80084f2:	b009      	add	sp, #36	; 0x24
 80084f4:	ecbd 8b06 	vpop	{d8-d10}
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	4b81      	ldr	r3, [pc, #516]	; (8008704 <__ieee754_pow+0x254>)
 80084fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008502:	429c      	cmp	r4, r3
 8008504:	ee10 aa10 	vmov	sl, s0
 8008508:	463d      	mov	r5, r7
 800850a:	dc06      	bgt.n	800851a <__ieee754_pow+0x6a>
 800850c:	d101      	bne.n	8008512 <__ieee754_pow+0x62>
 800850e:	2e00      	cmp	r6, #0
 8008510:	d1e7      	bne.n	80084e2 <__ieee754_pow+0x32>
 8008512:	4598      	cmp	r8, r3
 8008514:	dc01      	bgt.n	800851a <__ieee754_pow+0x6a>
 8008516:	d10f      	bne.n	8008538 <__ieee754_pow+0x88>
 8008518:	b172      	cbz	r2, 8008538 <__ieee754_pow+0x88>
 800851a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800851e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008522:	ea55 050a 	orrs.w	r5, r5, sl
 8008526:	d1dc      	bne.n	80084e2 <__ieee754_pow+0x32>
 8008528:	e9dd 3200 	ldrd	r3, r2, [sp]
 800852c:	18db      	adds	r3, r3, r3
 800852e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008532:	4152      	adcs	r2, r2
 8008534:	429d      	cmp	r5, r3
 8008536:	e7d0      	b.n	80084da <__ieee754_pow+0x2a>
 8008538:	2d00      	cmp	r5, #0
 800853a:	da3b      	bge.n	80085b4 <__ieee754_pow+0x104>
 800853c:	4b72      	ldr	r3, [pc, #456]	; (8008708 <__ieee754_pow+0x258>)
 800853e:	4598      	cmp	r8, r3
 8008540:	dc51      	bgt.n	80085e6 <__ieee754_pow+0x136>
 8008542:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008546:	4598      	cmp	r8, r3
 8008548:	f340 84ac 	ble.w	8008ea4 <__ieee754_pow+0x9f4>
 800854c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008550:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008554:	2b14      	cmp	r3, #20
 8008556:	dd0f      	ble.n	8008578 <__ieee754_pow+0xc8>
 8008558:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800855c:	fa22 f103 	lsr.w	r1, r2, r3
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	4293      	cmp	r3, r2
 8008566:	f040 849d 	bne.w	8008ea4 <__ieee754_pow+0x9f4>
 800856a:	f001 0101 	and.w	r1, r1, #1
 800856e:	f1c1 0302 	rsb	r3, r1, #2
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	b182      	cbz	r2, 8008598 <__ieee754_pow+0xe8>
 8008576:	e05f      	b.n	8008638 <__ieee754_pow+0x188>
 8008578:	2a00      	cmp	r2, #0
 800857a:	d15b      	bne.n	8008634 <__ieee754_pow+0x184>
 800857c:	f1c3 0314 	rsb	r3, r3, #20
 8008580:	fa48 f103 	asr.w	r1, r8, r3
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	4543      	cmp	r3, r8
 800858a:	f040 8488 	bne.w	8008e9e <__ieee754_pow+0x9ee>
 800858e:	f001 0101 	and.w	r1, r1, #1
 8008592:	f1c1 0302 	rsb	r3, r1, #2
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	4b5c      	ldr	r3, [pc, #368]	; (800870c <__ieee754_pow+0x25c>)
 800859a:	4598      	cmp	r8, r3
 800859c:	d132      	bne.n	8008604 <__ieee754_pow+0x154>
 800859e:	f1b9 0f00 	cmp.w	r9, #0
 80085a2:	f280 8478 	bge.w	8008e96 <__ieee754_pow+0x9e6>
 80085a6:	4959      	ldr	r1, [pc, #356]	; (800870c <__ieee754_pow+0x25c>)
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7f8 f975 	bl	800089c <__aeabi_ddiv>
 80085b2:	e79c      	b.n	80084ee <__ieee754_pow+0x3e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d13d      	bne.n	8008638 <__ieee754_pow+0x188>
 80085bc:	4b51      	ldr	r3, [pc, #324]	; (8008704 <__ieee754_pow+0x254>)
 80085be:	4598      	cmp	r8, r3
 80085c0:	d1ea      	bne.n	8008598 <__ieee754_pow+0xe8>
 80085c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085ca:	ea53 030a 	orrs.w	r3, r3, sl
 80085ce:	f000 845a 	beq.w	8008e86 <__ieee754_pow+0x9d6>
 80085d2:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <__ieee754_pow+0x260>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	dd08      	ble.n	80085ea <__ieee754_pow+0x13a>
 80085d8:	f1b9 0f00 	cmp.w	r9, #0
 80085dc:	f2c0 8457 	blt.w	8008e8e <__ieee754_pow+0x9de>
 80085e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085e4:	e783      	b.n	80084ee <__ieee754_pow+0x3e>
 80085e6:	2302      	movs	r3, #2
 80085e8:	e7e5      	b.n	80085b6 <__ieee754_pow+0x106>
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	f04f 0000 	mov.w	r0, #0
 80085f2:	f04f 0100 	mov.w	r1, #0
 80085f6:	f6bf af7a 	bge.w	80084ee <__ieee754_pow+0x3e>
 80085fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80085fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008602:	e774      	b.n	80084ee <__ieee754_pow+0x3e>
 8008604:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008608:	d106      	bne.n	8008618 <__ieee754_pow+0x168>
 800860a:	4632      	mov	r2, r6
 800860c:	463b      	mov	r3, r7
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f8 f819 	bl	8000648 <__aeabi_dmul>
 8008616:	e76a      	b.n	80084ee <__ieee754_pow+0x3e>
 8008618:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <__ieee754_pow+0x264>)
 800861a:	4599      	cmp	r9, r3
 800861c:	d10c      	bne.n	8008638 <__ieee754_pow+0x188>
 800861e:	2d00      	cmp	r5, #0
 8008620:	db0a      	blt.n	8008638 <__ieee754_pow+0x188>
 8008622:	ec47 6b10 	vmov	d0, r6, r7
 8008626:	b009      	add	sp, #36	; 0x24
 8008628:	ecbd 8b06 	vpop	{d8-d10}
 800862c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	f000 bc6c 	b.w	8008f0c <__ieee754_sqrt>
 8008634:	2300      	movs	r3, #0
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	ec47 6b10 	vmov	d0, r6, r7
 800863c:	f7ff fdc4 	bl	80081c8 <fabs>
 8008640:	ec51 0b10 	vmov	r0, r1, d0
 8008644:	f1ba 0f00 	cmp.w	sl, #0
 8008648:	d129      	bne.n	800869e <__ieee754_pow+0x1ee>
 800864a:	b124      	cbz	r4, 8008656 <__ieee754_pow+0x1a6>
 800864c:	4b2f      	ldr	r3, [pc, #188]	; (800870c <__ieee754_pow+0x25c>)
 800864e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008652:	429a      	cmp	r2, r3
 8008654:	d123      	bne.n	800869e <__ieee754_pow+0x1ee>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	da05      	bge.n	8008668 <__ieee754_pow+0x1b8>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	2000      	movs	r0, #0
 8008662:	492a      	ldr	r1, [pc, #168]	; (800870c <__ieee754_pow+0x25c>)
 8008664:	f7f8 f91a 	bl	800089c <__aeabi_ddiv>
 8008668:	2d00      	cmp	r5, #0
 800866a:	f6bf af40 	bge.w	80084ee <__ieee754_pow+0x3e>
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008674:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008678:	4323      	orrs	r3, r4
 800867a:	d108      	bne.n	800868e <__ieee754_pow+0x1de>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	f7f7 fe28 	bl	80002d8 <__aeabi_dsub>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	e78f      	b.n	80085ae <__ieee754_pow+0xfe>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	2b01      	cmp	r3, #1
 8008692:	f47f af2c 	bne.w	80084ee <__ieee754_pow+0x3e>
 8008696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800869a:	4619      	mov	r1, r3
 800869c:	e727      	b.n	80084ee <__ieee754_pow+0x3e>
 800869e:	0feb      	lsrs	r3, r5, #31
 80086a0:	3b01      	subs	r3, #1
 80086a2:	9306      	str	r3, [sp, #24]
 80086a4:	9a06      	ldr	r2, [sp, #24]
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	d102      	bne.n	80086b2 <__ieee754_pow+0x202>
 80086ac:	4632      	mov	r2, r6
 80086ae:	463b      	mov	r3, r7
 80086b0:	e7e6      	b.n	8008680 <__ieee754_pow+0x1d0>
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <__ieee754_pow+0x268>)
 80086b4:	4598      	cmp	r8, r3
 80086b6:	f340 80fb 	ble.w	80088b0 <__ieee754_pow+0x400>
 80086ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086be:	4598      	cmp	r8, r3
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <__ieee754_pow+0x260>)
 80086c2:	dd0c      	ble.n	80086de <__ieee754_pow+0x22e>
 80086c4:	429c      	cmp	r4, r3
 80086c6:	dc0f      	bgt.n	80086e8 <__ieee754_pow+0x238>
 80086c8:	f1b9 0f00 	cmp.w	r9, #0
 80086cc:	da0f      	bge.n	80086ee <__ieee754_pow+0x23e>
 80086ce:	2000      	movs	r0, #0
 80086d0:	b009      	add	sp, #36	; 0x24
 80086d2:	ecbd 8b06 	vpop	{d8-d10}
 80086d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	f000 bcf0 	b.w	80090be <__math_oflow>
 80086de:	429c      	cmp	r4, r3
 80086e0:	dbf2      	blt.n	80086c8 <__ieee754_pow+0x218>
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <__ieee754_pow+0x25c>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	dd19      	ble.n	800871c <__ieee754_pow+0x26c>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dcef      	bgt.n	80086ce <__ieee754_pow+0x21e>
 80086ee:	2000      	movs	r0, #0
 80086f0:	b009      	add	sp, #36	; 0x24
 80086f2:	ecbd 8b06 	vpop	{d8-d10}
 80086f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f000 bcd7 	b.w	80090ac <__math_uflow>
 80086fe:	bf00      	nop
 8008700:	fff00000 	.word	0xfff00000
 8008704:	7ff00000 	.word	0x7ff00000
 8008708:	433fffff 	.word	0x433fffff
 800870c:	3ff00000 	.word	0x3ff00000
 8008710:	3fefffff 	.word	0x3fefffff
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	41e00000 	.word	0x41e00000
 800871c:	4b60      	ldr	r3, [pc, #384]	; (80088a0 <__ieee754_pow+0x3f0>)
 800871e:	2200      	movs	r2, #0
 8008720:	f7f7 fdda 	bl	80002d8 <__aeabi_dsub>
 8008724:	a354      	add	r3, pc, #336	; (adr r3, 8008878 <__ieee754_pow+0x3c8>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	f7f7 ff8b 	bl	8000648 <__aeabi_dmul>
 8008732:	a353      	add	r3, pc, #332	; (adr r3, 8008880 <__ieee754_pow+0x3d0>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 ff82 	bl	8000648 <__aeabi_dmul>
 8008744:	4b57      	ldr	r3, [pc, #348]	; (80088a4 <__ieee754_pow+0x3f4>)
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	2200      	movs	r2, #0
 800874c:	4620      	mov	r0, r4
 800874e:	4629      	mov	r1, r5
 8008750:	f7f7 ff7a 	bl	8000648 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	a14b      	add	r1, pc, #300	; (adr r1, 8008888 <__ieee754_pow+0x3d8>)
 800875a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800875e:	f7f7 fdbb 	bl	80002d8 <__aeabi_dsub>
 8008762:	4622      	mov	r2, r4
 8008764:	462b      	mov	r3, r5
 8008766:	f7f7 ff6f 	bl	8000648 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	2000      	movs	r0, #0
 8008770:	494d      	ldr	r1, [pc, #308]	; (80088a8 <__ieee754_pow+0x3f8>)
 8008772:	f7f7 fdb1 	bl	80002d8 <__aeabi_dsub>
 8008776:	4622      	mov	r2, r4
 8008778:	4680      	mov	r8, r0
 800877a:	4689      	mov	r9, r1
 800877c:	462b      	mov	r3, r5
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	f7f7 ff61 	bl	8000648 <__aeabi_dmul>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff5b 	bl	8000648 <__aeabi_dmul>
 8008792:	a33f      	add	r3, pc, #252	; (adr r3, 8008890 <__ieee754_pow+0x3e0>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 ff56 	bl	8000648 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	f7f7 fd98 	bl	80002d8 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fd92 	bl	80002dc <__adddf3>
 80087b8:	2000      	movs	r0, #0
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	4604      	mov	r4, r0
 80087c0:	460d      	mov	r5, r1
 80087c2:	f7f7 fd89 	bl	80002d8 <__aeabi_dsub>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fd83 	bl	80002d8 <__aeabi_dsub>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4313      	orrs	r3, r2
 80087da:	4682      	mov	sl, r0
 80087dc:	468b      	mov	fp, r1
 80087de:	f040 81e7 	bne.w	8008bb0 <__ieee754_pow+0x700>
 80087e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008898 <__ieee754_pow+0x3e8>
 80087e6:	eeb0 8a47 	vmov.f32	s16, s14
 80087ea:	eef0 8a67 	vmov.f32	s17, s15
 80087ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087f2:	2600      	movs	r6, #0
 80087f4:	4632      	mov	r2, r6
 80087f6:	463b      	mov	r3, r7
 80087f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087fc:	f7f7 fd6c 	bl	80002d8 <__aeabi_dsub>
 8008800:	4622      	mov	r2, r4
 8008802:	462b      	mov	r3, r5
 8008804:	f7f7 ff20 	bl	8000648 <__aeabi_dmul>
 8008808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	4650      	mov	r0, sl
 8008812:	4659      	mov	r1, fp
 8008814:	f7f7 ff18 	bl	8000648 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f7 fd5c 	bl	80002dc <__adddf3>
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	4680      	mov	r8, r0
 800882a:	4689      	mov	r9, r1
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f7 ff0a 	bl	8000648 <__aeabi_dmul>
 8008834:	460b      	mov	r3, r1
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	4602      	mov	r2, r0
 800883c:	4649      	mov	r1, r9
 800883e:	4640      	mov	r0, r8
 8008840:	f7f7 fd4c 	bl	80002dc <__adddf3>
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <__ieee754_pow+0x3fc>)
 8008846:	4299      	cmp	r1, r3
 8008848:	ec45 4b19 	vmov	d9, r4, r5
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	468b      	mov	fp, r1
 8008852:	f340 82f1 	ble.w	8008e38 <__ieee754_pow+0x988>
 8008856:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800885a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800885e:	4303      	orrs	r3, r0
 8008860:	f000 81e4 	beq.w	8008c2c <__ieee754_pow+0x77c>
 8008864:	ec51 0b18 	vmov	r0, r1, d8
 8008868:	2200      	movs	r2, #0
 800886a:	2300      	movs	r3, #0
 800886c:	f7f8 f95e 	bl	8000b2c <__aeabi_dcmplt>
 8008870:	3800      	subs	r0, #0
 8008872:	bf18      	it	ne
 8008874:	2001      	movne	r0, #1
 8008876:	e72b      	b.n	80086d0 <__ieee754_pow+0x220>
 8008878:	60000000 	.word	0x60000000
 800887c:	3ff71547 	.word	0x3ff71547
 8008880:	f85ddf44 	.word	0xf85ddf44
 8008884:	3e54ae0b 	.word	0x3e54ae0b
 8008888:	55555555 	.word	0x55555555
 800888c:	3fd55555 	.word	0x3fd55555
 8008890:	652b82fe 	.word	0x652b82fe
 8008894:	3ff71547 	.word	0x3ff71547
 8008898:	00000000 	.word	0x00000000
 800889c:	bff00000 	.word	0xbff00000
 80088a0:	3ff00000 	.word	0x3ff00000
 80088a4:	3fd00000 	.word	0x3fd00000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	408fffff 	.word	0x408fffff
 80088b0:	4bd5      	ldr	r3, [pc, #852]	; (8008c08 <__ieee754_pow+0x758>)
 80088b2:	402b      	ands	r3, r5
 80088b4:	2200      	movs	r2, #0
 80088b6:	b92b      	cbnz	r3, 80088c4 <__ieee754_pow+0x414>
 80088b8:	4bd4      	ldr	r3, [pc, #848]	; (8008c0c <__ieee754_pow+0x75c>)
 80088ba:	f7f7 fec5 	bl	8000648 <__aeabi_dmul>
 80088be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088c2:	460c      	mov	r4, r1
 80088c4:	1523      	asrs	r3, r4, #20
 80088c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088ca:	4413      	add	r3, r2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	4bd0      	ldr	r3, [pc, #832]	; (8008c10 <__ieee754_pow+0x760>)
 80088d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80088d8:	429c      	cmp	r4, r3
 80088da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088de:	dd08      	ble.n	80088f2 <__ieee754_pow+0x442>
 80088e0:	4bcc      	ldr	r3, [pc, #816]	; (8008c14 <__ieee754_pow+0x764>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	f340 8162 	ble.w	8008bac <__ieee754_pow+0x6fc>
 80088e8:	9b05      	ldr	r3, [sp, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	9305      	str	r3, [sp, #20]
 80088ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80088f2:	2400      	movs	r4, #0
 80088f4:	00e3      	lsls	r3, r4, #3
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	4bc7      	ldr	r3, [pc, #796]	; (8008c18 <__ieee754_pow+0x768>)
 80088fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088fe:	ed93 7b00 	vldr	d7, [r3]
 8008902:	4629      	mov	r1, r5
 8008904:	ec53 2b17 	vmov	r2, r3, d7
 8008908:	eeb0 9a47 	vmov.f32	s18, s14
 800890c:	eef0 9a67 	vmov.f32	s19, s15
 8008910:	4682      	mov	sl, r0
 8008912:	f7f7 fce1 	bl	80002d8 <__aeabi_dsub>
 8008916:	4652      	mov	r2, sl
 8008918:	4606      	mov	r6, r0
 800891a:	460f      	mov	r7, r1
 800891c:	462b      	mov	r3, r5
 800891e:	ec51 0b19 	vmov	r0, r1, d9
 8008922:	f7f7 fcdb 	bl	80002dc <__adddf3>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	2000      	movs	r0, #0
 800892c:	49bb      	ldr	r1, [pc, #748]	; (8008c1c <__ieee754_pow+0x76c>)
 800892e:	f7f7 ffb5 	bl	800089c <__aeabi_ddiv>
 8008932:	ec41 0b1a 	vmov	d10, r0, r1
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f7 fe83 	bl	8000648 <__aeabi_dmul>
 8008942:	2300      	movs	r3, #0
 8008944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800894e:	46ab      	mov	fp, r5
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008956:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800895a:	ec41 0b18 	vmov	d8, r0, r1
 800895e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008962:	2200      	movs	r2, #0
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	4614      	mov	r4, r2
 800896a:	461d      	mov	r5, r3
 800896c:	f7f7 fe6c 	bl	8000648 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f7 fcae 	bl	80002d8 <__aeabi_dsub>
 800897c:	ec53 2b19 	vmov	r2, r3, d9
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fca6 	bl	80002d8 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4650      	mov	r0, sl
 8008992:	4659      	mov	r1, fp
 8008994:	f7f7 fca0 	bl	80002d8 <__aeabi_dsub>
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	f7f7 fe54 	bl	8000648 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4630      	mov	r0, r6
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 fc96 	bl	80002d8 <__aeabi_dsub>
 80089ac:	ec53 2b1a 	vmov	r2, r3, d10
 80089b0:	f7f7 fe4a 	bl	8000648 <__aeabi_dmul>
 80089b4:	ec53 2b18 	vmov	r2, r3, d8
 80089b8:	ec41 0b19 	vmov	d9, r0, r1
 80089bc:	ec51 0b18 	vmov	r0, r1, d8
 80089c0:	f7f7 fe42 	bl	8000648 <__aeabi_dmul>
 80089c4:	a37c      	add	r3, pc, #496	; (adr r3, 8008bb8 <__ieee754_pow+0x708>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	4604      	mov	r4, r0
 80089cc:	460d      	mov	r5, r1
 80089ce:	f7f7 fe3b 	bl	8000648 <__aeabi_dmul>
 80089d2:	a37b      	add	r3, pc, #492	; (adr r3, 8008bc0 <__ieee754_pow+0x710>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fc80 	bl	80002dc <__adddf3>
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	f7f7 fe32 	bl	8000648 <__aeabi_dmul>
 80089e4:	a378      	add	r3, pc, #480	; (adr r3, 8008bc8 <__ieee754_pow+0x718>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fc77 	bl	80002dc <__adddf3>
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	f7f7 fe29 	bl	8000648 <__aeabi_dmul>
 80089f6:	a376      	add	r3, pc, #472	; (adr r3, 8008bd0 <__ieee754_pow+0x720>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fc6e 	bl	80002dc <__adddf3>
 8008a00:	4622      	mov	r2, r4
 8008a02:	462b      	mov	r3, r5
 8008a04:	f7f7 fe20 	bl	8000648 <__aeabi_dmul>
 8008a08:	a373      	add	r3, pc, #460	; (adr r3, 8008bd8 <__ieee754_pow+0x728>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fc65 	bl	80002dc <__adddf3>
 8008a12:	4622      	mov	r2, r4
 8008a14:	462b      	mov	r3, r5
 8008a16:	f7f7 fe17 	bl	8000648 <__aeabi_dmul>
 8008a1a:	a371      	add	r3, pc, #452	; (adr r3, 8008be0 <__ieee754_pow+0x730>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fc5c 	bl	80002dc <__adddf3>
 8008a24:	4622      	mov	r2, r4
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fe0a 	bl	8000648 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fe04 	bl	8000648 <__aeabi_dmul>
 8008a40:	4642      	mov	r2, r8
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	464b      	mov	r3, r9
 8008a48:	ec51 0b18 	vmov	r0, r1, d8
 8008a4c:	f7f7 fc46 	bl	80002dc <__adddf3>
 8008a50:	ec53 2b19 	vmov	r2, r3, d9
 8008a54:	f7f7 fdf8 	bl	8000648 <__aeabi_dmul>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	f7f7 fc3e 	bl	80002dc <__adddf3>
 8008a60:	4642      	mov	r2, r8
 8008a62:	4682      	mov	sl, r0
 8008a64:	468b      	mov	fp, r1
 8008a66:	464b      	mov	r3, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f7 fdec 	bl	8000648 <__aeabi_dmul>
 8008a70:	4b6b      	ldr	r3, [pc, #428]	; (8008c20 <__ieee754_pow+0x770>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f7 fc30 	bl	80002dc <__adddf3>
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	f7f7 fc2c 	bl	80002dc <__adddf3>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f7 fdd9 	bl	8000648 <__aeabi_dmul>
 8008a96:	4b62      	ldr	r3, [pc, #392]	; (8008c20 <__ieee754_pow+0x770>)
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4689      	mov	r9, r1
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f7 fc19 	bl	80002d8 <__aeabi_dsub>
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	f7f7 fc15 	bl	80002d8 <__aeabi_dsub>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4650      	mov	r0, sl
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	f7f7 fc0f 	bl	80002d8 <__aeabi_dsub>
 8008aba:	ec53 2b18 	vmov	r2, r3, d8
 8008abe:	f7f7 fdc3 	bl	8000648 <__aeabi_dmul>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	462b      	mov	r3, r5
 8008aca:	ec51 0b19 	vmov	r0, r1, d9
 8008ace:	f7f7 fdbb 	bl	8000648 <__aeabi_dmul>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f7 fbff 	bl	80002dc <__adddf3>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fbf7 	bl	80002dc <__adddf3>
 8008aee:	a33e      	add	r3, pc, #248	; (adr r3, 8008be8 <__ieee754_pow+0x738>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	2000      	movs	r0, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	f7f7 fda5 	bl	8000648 <__aeabi_dmul>
 8008afe:	4642      	mov	r2, r8
 8008b00:	ec41 0b18 	vmov	d8, r0, r1
 8008b04:	464b      	mov	r3, r9
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fbe5 	bl	80002d8 <__aeabi_dsub>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fbdf 	bl	80002d8 <__aeabi_dsub>
 8008b1a:	a335      	add	r3, pc, #212	; (adr r3, 8008bf0 <__ieee754_pow+0x740>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fd92 	bl	8000648 <__aeabi_dmul>
 8008b24:	a334      	add	r3, pc, #208	; (adr r3, 8008bf8 <__ieee754_pow+0x748>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fd89 	bl	8000648 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 fbcd 	bl	80002dc <__adddf3>
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	4b37      	ldr	r3, [pc, #220]	; (8008c24 <__ieee754_pow+0x774>)
 8008b46:	4413      	add	r3, r2
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	f7f7 fbc6 	bl	80002dc <__adddf3>
 8008b50:	4682      	mov	sl, r0
 8008b52:	9805      	ldr	r0, [sp, #20]
 8008b54:	468b      	mov	fp, r1
 8008b56:	f7f7 fd0d 	bl	8000574 <__aeabi_i2d>
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	4b32      	ldr	r3, [pc, #200]	; (8008c28 <__ieee754_pow+0x778>)
 8008b5e:	4413      	add	r3, r2
 8008b60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	4652      	mov	r2, sl
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	ec51 0b18 	vmov	r0, r1, d8
 8008b70:	f7f7 fbb4 	bl	80002dc <__adddf3>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 fbb0 	bl	80002dc <__adddf3>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 fbac 	bl	80002dc <__adddf3>
 8008b84:	2000      	movs	r0, #0
 8008b86:	4632      	mov	r2, r6
 8008b88:	463b      	mov	r3, r7
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	f7f7 fba3 	bl	80002d8 <__aeabi_dsub>
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	f7f7 fb9f 	bl	80002d8 <__aeabi_dsub>
 8008b9a:	ec53 2b18 	vmov	r2, r3, d8
 8008b9e:	f7f7 fb9b 	bl	80002d8 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	4659      	mov	r1, fp
 8008baa:	e610      	b.n	80087ce <__ieee754_pow+0x31e>
 8008bac:	2401      	movs	r4, #1
 8008bae:	e6a1      	b.n	80088f4 <__ieee754_pow+0x444>
 8008bb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008c00 <__ieee754_pow+0x750>
 8008bb4:	e617      	b.n	80087e6 <__ieee754_pow+0x336>
 8008bb6:	bf00      	nop
 8008bb8:	4a454eef 	.word	0x4a454eef
 8008bbc:	3fca7e28 	.word	0x3fca7e28
 8008bc0:	93c9db65 	.word	0x93c9db65
 8008bc4:	3fcd864a 	.word	0x3fcd864a
 8008bc8:	a91d4101 	.word	0xa91d4101
 8008bcc:	3fd17460 	.word	0x3fd17460
 8008bd0:	518f264d 	.word	0x518f264d
 8008bd4:	3fd55555 	.word	0x3fd55555
 8008bd8:	db6fabff 	.word	0xdb6fabff
 8008bdc:	3fdb6db6 	.word	0x3fdb6db6
 8008be0:	33333303 	.word	0x33333303
 8008be4:	3fe33333 	.word	0x3fe33333
 8008be8:	e0000000 	.word	0xe0000000
 8008bec:	3feec709 	.word	0x3feec709
 8008bf0:	dc3a03fd 	.word	0xdc3a03fd
 8008bf4:	3feec709 	.word	0x3feec709
 8008bf8:	145b01f5 	.word	0x145b01f5
 8008bfc:	be3e2fe0 	.word	0xbe3e2fe0
 8008c00:	00000000 	.word	0x00000000
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	43400000 	.word	0x43400000
 8008c10:	0003988e 	.word	0x0003988e
 8008c14:	000bb679 	.word	0x000bb679
 8008c18:	0800bd50 	.word	0x0800bd50
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	40080000 	.word	0x40080000
 8008c24:	0800bd70 	.word	0x0800bd70
 8008c28:	0800bd60 	.word	0x0800bd60
 8008c2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008f04 <__ieee754_pow+0xa54>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 fb51 	bl	80002dc <__adddf3>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	ec41 0b1a 	vmov	d10, r0, r1
 8008c40:	462b      	mov	r3, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fb47 	bl	80002d8 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	ec51 0b1a 	vmov	r0, r1, d10
 8008c52:	f7f7 ff89 	bl	8000b68 <__aeabi_dcmpgt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f47f ae04 	bne.w	8008864 <__ieee754_pow+0x3b4>
 8008c5c:	4aa4      	ldr	r2, [pc, #656]	; (8008ef0 <__ieee754_pow+0xa40>)
 8008c5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c62:	4293      	cmp	r3, r2
 8008c64:	f340 8108 	ble.w	8008e78 <__ieee754_pow+0x9c8>
 8008c68:	151b      	asrs	r3, r3, #20
 8008c6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c72:	fa4a f303 	asr.w	r3, sl, r3
 8008c76:	445b      	add	r3, fp
 8008c78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c7c:	4e9d      	ldr	r6, [pc, #628]	; (8008ef4 <__ieee754_pow+0xa44>)
 8008c7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c82:	4116      	asrs	r6, r2
 8008c84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c88:	2000      	movs	r0, #0
 8008c8a:	ea23 0106 	bic.w	r1, r3, r6
 8008c8e:	f1c2 0214 	rsb	r2, r2, #20
 8008c92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c96:	fa4a fa02 	asr.w	sl, sl, r2
 8008c9a:	f1bb 0f00 	cmp.w	fp, #0
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	bfb8      	it	lt
 8008ca8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008cac:	f7f7 fb14 	bl	80002d8 <__aeabi_dsub>
 8008cb0:	ec41 0b19 	vmov	d9, r0, r1
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	ec51 0b19 	vmov	r0, r1, d9
 8008cbc:	f7f7 fb0e 	bl	80002dc <__adddf3>
 8008cc0:	a37b      	add	r3, pc, #492	; (adr r3, 8008eb0 <__ieee754_pow+0xa00>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	4604      	mov	r4, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	f7f7 fcbc 	bl	8000648 <__aeabi_dmul>
 8008cd0:	ec53 2b19 	vmov	r2, r3, d9
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	4620      	mov	r0, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fafc 	bl	80002d8 <__aeabi_dsub>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 faf6 	bl	80002d8 <__aeabi_dsub>
 8008cec:	a372      	add	r3, pc, #456	; (adr r3, 8008eb8 <__ieee754_pow+0xa08>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fca9 	bl	8000648 <__aeabi_dmul>
 8008cf6:	a372      	add	r3, pc, #456	; (adr r3, 8008ec0 <__ieee754_pow+0xa10>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	4689      	mov	r9, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7f7 fca0 	bl	8000648 <__aeabi_dmul>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 fae4 	bl	80002dc <__adddf3>
 8008d14:	4604      	mov	r4, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fadc 	bl	80002dc <__adddf3>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	f7f7 fad4 	bl	80002d8 <__aeabi_dsub>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 face 	bl	80002d8 <__aeabi_dsub>
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	464b      	mov	r3, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 fc7e 	bl	8000648 <__aeabi_dmul>
 8008d4c:	a35e      	add	r3, pc, #376	; (adr r3, 8008ec8 <__ieee754_pow+0xa18>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	4604      	mov	r4, r0
 8008d54:	460d      	mov	r5, r1
 8008d56:	f7f7 fc77 	bl	8000648 <__aeabi_dmul>
 8008d5a:	a35d      	add	r3, pc, #372	; (adr r3, 8008ed0 <__ieee754_pow+0xa20>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 faba 	bl	80002d8 <__aeabi_dsub>
 8008d64:	4622      	mov	r2, r4
 8008d66:	462b      	mov	r3, r5
 8008d68:	f7f7 fc6e 	bl	8000648 <__aeabi_dmul>
 8008d6c:	a35a      	add	r3, pc, #360	; (adr r3, 8008ed8 <__ieee754_pow+0xa28>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fab3 	bl	80002dc <__adddf3>
 8008d76:	4622      	mov	r2, r4
 8008d78:	462b      	mov	r3, r5
 8008d7a:	f7f7 fc65 	bl	8000648 <__aeabi_dmul>
 8008d7e:	a358      	add	r3, pc, #352	; (adr r3, 8008ee0 <__ieee754_pow+0xa30>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 faa8 	bl	80002d8 <__aeabi_dsub>
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	f7f7 fc5c 	bl	8000648 <__aeabi_dmul>
 8008d90:	a355      	add	r3, pc, #340	; (adr r3, 8008ee8 <__ieee754_pow+0xa38>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 faa1 	bl	80002dc <__adddf3>
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	462b      	mov	r3, r5
 8008d9e:	f7f7 fc53 	bl	8000648 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4640      	mov	r0, r8
 8008da8:	4649      	mov	r1, r9
 8008daa:	f7f7 fa95 	bl	80002d8 <__aeabi_dsub>
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4640      	mov	r0, r8
 8008db8:	4649      	mov	r1, r9
 8008dba:	f7f7 fc45 	bl	8000648 <__aeabi_dmul>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	ec41 0b19 	vmov	d9, r0, r1
 8008dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f7 fa84 	bl	80002d8 <__aeabi_dsub>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	ec51 0b19 	vmov	r0, r1, d9
 8008dd8:	f7f7 fd60 	bl	800089c <__aeabi_ddiv>
 8008ddc:	4632      	mov	r2, r6
 8008dde:	4604      	mov	r4, r0
 8008de0:	460d      	mov	r5, r1
 8008de2:	463b      	mov	r3, r7
 8008de4:	4640      	mov	r0, r8
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 fc2e 	bl	8000648 <__aeabi_dmul>
 8008dec:	4632      	mov	r2, r6
 8008dee:	463b      	mov	r3, r7
 8008df0:	f7f7 fa74 	bl	80002dc <__adddf3>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fa6c 	bl	80002d8 <__aeabi_dsub>
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	f7f7 fa68 	bl	80002d8 <__aeabi_dsub>
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	493a      	ldr	r1, [pc, #232]	; (8008ef8 <__ieee754_pow+0xa48>)
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f7f7 fa62 	bl	80002d8 <__aeabi_dsub>
 8008e14:	ec41 0b10 	vmov	d0, r0, r1
 8008e18:	ee10 3a90 	vmov	r3, s1
 8008e1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e24:	da2b      	bge.n	8008e7e <__ieee754_pow+0x9ce>
 8008e26:	4650      	mov	r0, sl
 8008e28:	f000 f95e 	bl	80090e8 <scalbn>
 8008e2c:	ec51 0b10 	vmov	r0, r1, d0
 8008e30:	ec53 2b18 	vmov	r2, r3, d8
 8008e34:	f7ff bbed 	b.w	8008612 <__ieee754_pow+0x162>
 8008e38:	4b30      	ldr	r3, [pc, #192]	; (8008efc <__ieee754_pow+0xa4c>)
 8008e3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	f77f af0c 	ble.w	8008c5c <__ieee754_pow+0x7ac>
 8008e44:	4b2e      	ldr	r3, [pc, #184]	; (8008f00 <__ieee754_pow+0xa50>)
 8008e46:	440b      	add	r3, r1
 8008e48:	4303      	orrs	r3, r0
 8008e4a:	d009      	beq.n	8008e60 <__ieee754_pow+0x9b0>
 8008e4c:	ec51 0b18 	vmov	r0, r1, d8
 8008e50:	2200      	movs	r2, #0
 8008e52:	2300      	movs	r3, #0
 8008e54:	f7f7 fe6a 	bl	8000b2c <__aeabi_dcmplt>
 8008e58:	3800      	subs	r0, #0
 8008e5a:	bf18      	it	ne
 8008e5c:	2001      	movne	r0, #1
 8008e5e:	e447      	b.n	80086f0 <__ieee754_pow+0x240>
 8008e60:	4622      	mov	r2, r4
 8008e62:	462b      	mov	r3, r5
 8008e64:	f7f7 fa38 	bl	80002d8 <__aeabi_dsub>
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	f7f7 fe72 	bl	8000b54 <__aeabi_dcmpge>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f43f aef3 	beq.w	8008c5c <__ieee754_pow+0x7ac>
 8008e76:	e7e9      	b.n	8008e4c <__ieee754_pow+0x99c>
 8008e78:	f04f 0a00 	mov.w	sl, #0
 8008e7c:	e71a      	b.n	8008cb4 <__ieee754_pow+0x804>
 8008e7e:	ec51 0b10 	vmov	r0, r1, d0
 8008e82:	4619      	mov	r1, r3
 8008e84:	e7d4      	b.n	8008e30 <__ieee754_pow+0x980>
 8008e86:	491c      	ldr	r1, [pc, #112]	; (8008ef8 <__ieee754_pow+0xa48>)
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f7ff bb30 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	f7ff bb2c 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e96:	4630      	mov	r0, r6
 8008e98:	4639      	mov	r1, r7
 8008e9a:	f7ff bb28 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	f7ff bb7a 	b.w	8008598 <__ieee754_pow+0xe8>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f7ff bb64 	b.w	8008572 <__ieee754_pow+0xc2>
 8008eaa:	bf00      	nop
 8008eac:	f3af 8000 	nop.w
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	3fe62e43 	.word	0x3fe62e43
 8008eb8:	fefa39ef 	.word	0xfefa39ef
 8008ebc:	3fe62e42 	.word	0x3fe62e42
 8008ec0:	0ca86c39 	.word	0x0ca86c39
 8008ec4:	be205c61 	.word	0xbe205c61
 8008ec8:	72bea4d0 	.word	0x72bea4d0
 8008ecc:	3e663769 	.word	0x3e663769
 8008ed0:	c5d26bf1 	.word	0xc5d26bf1
 8008ed4:	3ebbbd41 	.word	0x3ebbbd41
 8008ed8:	af25de2c 	.word	0xaf25de2c
 8008edc:	3f11566a 	.word	0x3f11566a
 8008ee0:	16bebd93 	.word	0x16bebd93
 8008ee4:	3f66c16c 	.word	0x3f66c16c
 8008ee8:	5555553e 	.word	0x5555553e
 8008eec:	3fc55555 	.word	0x3fc55555
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	000fffff 	.word	0x000fffff
 8008ef8:	3ff00000 	.word	0x3ff00000
 8008efc:	4090cbff 	.word	0x4090cbff
 8008f00:	3f6f3400 	.word	0x3f6f3400
 8008f04:	652b82fe 	.word	0x652b82fe
 8008f08:	3c971547 	.word	0x3c971547

08008f0c <__ieee754_sqrt>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	ec55 4b10 	vmov	r4, r5, d0
 8008f14:	4e55      	ldr	r6, [pc, #340]	; (800906c <__ieee754_sqrt+0x160>)
 8008f16:	43ae      	bics	r6, r5
 8008f18:	ee10 0a10 	vmov	r0, s0
 8008f1c:	ee10 3a10 	vmov	r3, s0
 8008f20:	462a      	mov	r2, r5
 8008f22:	4629      	mov	r1, r5
 8008f24:	d110      	bne.n	8008f48 <__ieee754_sqrt+0x3c>
 8008f26:	ee10 2a10 	vmov	r2, s0
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	f7f7 fb8c 	bl	8000648 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 f9d0 	bl	80002dc <__adddf3>
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	ec45 4b10 	vmov	d0, r4, r5
 8008f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	dc10      	bgt.n	8008f6e <__ieee754_sqrt+0x62>
 8008f4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f50:	4330      	orrs	r0, r6
 8008f52:	d0f5      	beq.n	8008f40 <__ieee754_sqrt+0x34>
 8008f54:	b15d      	cbz	r5, 8008f6e <__ieee754_sqrt+0x62>
 8008f56:	ee10 2a10 	vmov	r2, s0
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	ee10 0a10 	vmov	r0, s0
 8008f60:	f7f7 f9ba 	bl	80002d8 <__aeabi_dsub>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	f7f7 fc98 	bl	800089c <__aeabi_ddiv>
 8008f6c:	e7e6      	b.n	8008f3c <__ieee754_sqrt+0x30>
 8008f6e:	1512      	asrs	r2, r2, #20
 8008f70:	d074      	beq.n	800905c <__ieee754_sqrt+0x150>
 8008f72:	07d4      	lsls	r4, r2, #31
 8008f74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008f78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f80:	bf5e      	ittt	pl
 8008f82:	0fda      	lsrpl	r2, r3, #31
 8008f84:	005b      	lslpl	r3, r3, #1
 8008f86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	0fda      	lsrs	r2, r3, #31
 8008f8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008f92:	107f      	asrs	r7, r7, #1
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	2516      	movs	r5, #22
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008f9e:	1886      	adds	r6, r0, r2
 8008fa0:	428e      	cmp	r6, r1
 8008fa2:	bfde      	ittt	le
 8008fa4:	1b89      	suble	r1, r1, r6
 8008fa6:	18b0      	addle	r0, r6, r2
 8008fa8:	18a4      	addle	r4, r4, r2
 8008faa:	0049      	lsls	r1, r1, #1
 8008fac:	3d01      	subs	r5, #1
 8008fae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008fb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fba:	d1f0      	bne.n	8008f9e <__ieee754_sqrt+0x92>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	f04f 0e20 	mov.w	lr, #32
 8008fc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008fc6:	4281      	cmp	r1, r0
 8008fc8:	eb06 0c05 	add.w	ip, r6, r5
 8008fcc:	dc02      	bgt.n	8008fd4 <__ieee754_sqrt+0xc8>
 8008fce:	d113      	bne.n	8008ff8 <__ieee754_sqrt+0xec>
 8008fd0:	459c      	cmp	ip, r3
 8008fd2:	d811      	bhi.n	8008ff8 <__ieee754_sqrt+0xec>
 8008fd4:	f1bc 0f00 	cmp.w	ip, #0
 8008fd8:	eb0c 0506 	add.w	r5, ip, r6
 8008fdc:	da43      	bge.n	8009066 <__ieee754_sqrt+0x15a>
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	db41      	blt.n	8009066 <__ieee754_sqrt+0x15a>
 8008fe2:	f100 0801 	add.w	r8, r0, #1
 8008fe6:	1a09      	subs	r1, r1, r0
 8008fe8:	459c      	cmp	ip, r3
 8008fea:	bf88      	it	hi
 8008fec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008ff0:	eba3 030c 	sub.w	r3, r3, ip
 8008ff4:	4432      	add	r2, r6
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8009000:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800900c:	d1db      	bne.n	8008fc6 <__ieee754_sqrt+0xba>
 800900e:	430b      	orrs	r3, r1
 8009010:	d006      	beq.n	8009020 <__ieee754_sqrt+0x114>
 8009012:	1c50      	adds	r0, r2, #1
 8009014:	bf13      	iteet	ne
 8009016:	3201      	addne	r2, #1
 8009018:	3401      	addeq	r4, #1
 800901a:	4672      	moveq	r2, lr
 800901c:	f022 0201 	bicne.w	r2, r2, #1
 8009020:	1063      	asrs	r3, r4, #1
 8009022:	0852      	lsrs	r2, r2, #1
 8009024:	07e1      	lsls	r1, r4, #31
 8009026:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800902a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800902e:	bf48      	it	mi
 8009030:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009034:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009038:	4614      	mov	r4, r2
 800903a:	e781      	b.n	8008f40 <__ieee754_sqrt+0x34>
 800903c:	0ad9      	lsrs	r1, r3, #11
 800903e:	3815      	subs	r0, #21
 8009040:	055b      	lsls	r3, r3, #21
 8009042:	2900      	cmp	r1, #0
 8009044:	d0fa      	beq.n	800903c <__ieee754_sqrt+0x130>
 8009046:	02cd      	lsls	r5, r1, #11
 8009048:	d50a      	bpl.n	8009060 <__ieee754_sqrt+0x154>
 800904a:	f1c2 0420 	rsb	r4, r2, #32
 800904e:	fa23 f404 	lsr.w	r4, r3, r4
 8009052:	1e55      	subs	r5, r2, #1
 8009054:	4093      	lsls	r3, r2
 8009056:	4321      	orrs	r1, r4
 8009058:	1b42      	subs	r2, r0, r5
 800905a:	e78a      	b.n	8008f72 <__ieee754_sqrt+0x66>
 800905c:	4610      	mov	r0, r2
 800905e:	e7f0      	b.n	8009042 <__ieee754_sqrt+0x136>
 8009060:	0049      	lsls	r1, r1, #1
 8009062:	3201      	adds	r2, #1
 8009064:	e7ef      	b.n	8009046 <__ieee754_sqrt+0x13a>
 8009066:	4680      	mov	r8, r0
 8009068:	e7bd      	b.n	8008fe6 <__ieee754_sqrt+0xda>
 800906a:	bf00      	nop
 800906c:	7ff00000 	.word	0x7ff00000

08009070 <with_errno>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	4616      	mov	r6, r2
 8009078:	f000 f8bc 	bl	80091f4 <__errno>
 800907c:	4629      	mov	r1, r5
 800907e:	6006      	str	r6, [r0, #0]
 8009080:	4620      	mov	r0, r4
 8009082:	bd70      	pop	{r4, r5, r6, pc}

08009084 <xflow>:
 8009084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009086:	4614      	mov	r4, r2
 8009088:	461d      	mov	r5, r3
 800908a:	b108      	cbz	r0, 8009090 <xflow+0xc>
 800908c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009090:	e9cd 2300 	strd	r2, r3, [sp]
 8009094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 fad4 	bl	8000648 <__aeabi_dmul>
 80090a0:	2222      	movs	r2, #34	; 0x22
 80090a2:	b003      	add	sp, #12
 80090a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a8:	f7ff bfe2 	b.w	8009070 <with_errno>

080090ac <__math_uflow>:
 80090ac:	b508      	push	{r3, lr}
 80090ae:	2200      	movs	r2, #0
 80090b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090b4:	f7ff ffe6 	bl	8009084 <xflow>
 80090b8:	ec41 0b10 	vmov	d0, r0, r1
 80090bc:	bd08      	pop	{r3, pc}

080090be <__math_oflow>:
 80090be:	b508      	push	{r3, lr}
 80090c0:	2200      	movs	r2, #0
 80090c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80090c6:	f7ff ffdd 	bl	8009084 <xflow>
 80090ca:	ec41 0b10 	vmov	d0, r0, r1
 80090ce:	bd08      	pop	{r3, pc}

080090d0 <finite>:
 80090d0:	b082      	sub	sp, #8
 80090d2:	ed8d 0b00 	vstr	d0, [sp]
 80090d6:	9801      	ldr	r0, [sp, #4]
 80090d8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80090dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090e0:	0fc0      	lsrs	r0, r0, #31
 80090e2:	b002      	add	sp, #8
 80090e4:	4770      	bx	lr
	...

080090e8 <scalbn>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	ec55 4b10 	vmov	r4, r5, d0
 80090ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80090f2:	4606      	mov	r6, r0
 80090f4:	462b      	mov	r3, r5
 80090f6:	b99a      	cbnz	r2, 8009120 <scalbn+0x38>
 80090f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090fc:	4323      	orrs	r3, r4
 80090fe:	d036      	beq.n	800916e <scalbn+0x86>
 8009100:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <scalbn+0x100>)
 8009102:	4629      	mov	r1, r5
 8009104:	ee10 0a10 	vmov	r0, s0
 8009108:	2200      	movs	r2, #0
 800910a:	f7f7 fa9d 	bl	8000648 <__aeabi_dmul>
 800910e:	4b37      	ldr	r3, [pc, #220]	; (80091ec <scalbn+0x104>)
 8009110:	429e      	cmp	r6, r3
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	da10      	bge.n	800913a <scalbn+0x52>
 8009118:	a32b      	add	r3, pc, #172	; (adr r3, 80091c8 <scalbn+0xe0>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	e03a      	b.n	8009196 <scalbn+0xae>
 8009120:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009124:	428a      	cmp	r2, r1
 8009126:	d10c      	bne.n	8009142 <scalbn+0x5a>
 8009128:	ee10 2a10 	vmov	r2, s0
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 f8d4 	bl	80002dc <__adddf3>
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	e019      	b.n	800916e <scalbn+0x86>
 800913a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800913e:	460b      	mov	r3, r1
 8009140:	3a36      	subs	r2, #54	; 0x36
 8009142:	4432      	add	r2, r6
 8009144:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009148:	428a      	cmp	r2, r1
 800914a:	dd08      	ble.n	800915e <scalbn+0x76>
 800914c:	2d00      	cmp	r5, #0
 800914e:	a120      	add	r1, pc, #128	; (adr r1, 80091d0 <scalbn+0xe8>)
 8009150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009154:	da1c      	bge.n	8009190 <scalbn+0xa8>
 8009156:	a120      	add	r1, pc, #128	; (adr r1, 80091d8 <scalbn+0xf0>)
 8009158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800915c:	e018      	b.n	8009190 <scalbn+0xa8>
 800915e:	2a00      	cmp	r2, #0
 8009160:	dd08      	ble.n	8009174 <scalbn+0x8c>
 8009162:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009166:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800916a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800916e:	ec45 4b10 	vmov	d0, r4, r5
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009178:	da19      	bge.n	80091ae <scalbn+0xc6>
 800917a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800917e:	429e      	cmp	r6, r3
 8009180:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009184:	dd0a      	ble.n	800919c <scalbn+0xb4>
 8009186:	a112      	add	r1, pc, #72	; (adr r1, 80091d0 <scalbn+0xe8>)
 8009188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e2      	bne.n	8009156 <scalbn+0x6e>
 8009190:	a30f      	add	r3, pc, #60	; (adr r3, 80091d0 <scalbn+0xe8>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 fa57 	bl	8000648 <__aeabi_dmul>
 800919a:	e7cb      	b.n	8009134 <scalbn+0x4c>
 800919c:	a10a      	add	r1, pc, #40	; (adr r1, 80091c8 <scalbn+0xe0>)
 800919e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0b8      	beq.n	8009118 <scalbn+0x30>
 80091a6:	a10e      	add	r1, pc, #56	; (adr r1, 80091e0 <scalbn+0xf8>)
 80091a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ac:	e7b4      	b.n	8009118 <scalbn+0x30>
 80091ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091b2:	3236      	adds	r2, #54	; 0x36
 80091b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80091bc:	4620      	mov	r0, r4
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <scalbn+0x108>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	e7e8      	b.n	8009196 <scalbn+0xae>
 80091c4:	f3af 8000 	nop.w
 80091c8:	c2f8f359 	.word	0xc2f8f359
 80091cc:	01a56e1f 	.word	0x01a56e1f
 80091d0:	8800759c 	.word	0x8800759c
 80091d4:	7e37e43c 	.word	0x7e37e43c
 80091d8:	8800759c 	.word	0x8800759c
 80091dc:	fe37e43c 	.word	0xfe37e43c
 80091e0:	c2f8f359 	.word	0xc2f8f359
 80091e4:	81a56e1f 	.word	0x81a56e1f
 80091e8:	43500000 	.word	0x43500000
 80091ec:	ffff3cb0 	.word	0xffff3cb0
 80091f0:	3c900000 	.word	0x3c900000

080091f4 <__errno>:
 80091f4:	4b01      	ldr	r3, [pc, #4]	; (80091fc <__errno+0x8>)
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	2000009c 	.word	0x2000009c

08009200 <__libc_init_array>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	4d0d      	ldr	r5, [pc, #52]	; (8009238 <__libc_init_array+0x38>)
 8009204:	4c0d      	ldr	r4, [pc, #52]	; (800923c <__libc_init_array+0x3c>)
 8009206:	1b64      	subs	r4, r4, r5
 8009208:	10a4      	asrs	r4, r4, #2
 800920a:	2600      	movs	r6, #0
 800920c:	42a6      	cmp	r6, r4
 800920e:	d109      	bne.n	8009224 <__libc_init_array+0x24>
 8009210:	4d0b      	ldr	r5, [pc, #44]	; (8009240 <__libc_init_array+0x40>)
 8009212:	4c0c      	ldr	r4, [pc, #48]	; (8009244 <__libc_init_array+0x44>)
 8009214:	f002 fd38 	bl	800bc88 <_init>
 8009218:	1b64      	subs	r4, r4, r5
 800921a:	10a4      	asrs	r4, r4, #2
 800921c:	2600      	movs	r6, #0
 800921e:	42a6      	cmp	r6, r4
 8009220:	d105      	bne.n	800922e <__libc_init_array+0x2e>
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	f855 3b04 	ldr.w	r3, [r5], #4
 8009228:	4798      	blx	r3
 800922a:	3601      	adds	r6, #1
 800922c:	e7ee      	b.n	800920c <__libc_init_array+0xc>
 800922e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009232:	4798      	blx	r3
 8009234:	3601      	adds	r6, #1
 8009236:	e7f2      	b.n	800921e <__libc_init_array+0x1e>
 8009238:	0800c164 	.word	0x0800c164
 800923c:	0800c164 	.word	0x0800c164
 8009240:	0800c164 	.word	0x0800c164
 8009244:	0800c168 	.word	0x0800c168

08009248 <memset>:
 8009248:	4402      	add	r2, r0
 800924a:	4603      	mov	r3, r0
 800924c:	4293      	cmp	r3, r2
 800924e:	d100      	bne.n	8009252 <memset+0xa>
 8009250:	4770      	bx	lr
 8009252:	f803 1b01 	strb.w	r1, [r3], #1
 8009256:	e7f9      	b.n	800924c <memset+0x4>

08009258 <__cvt>:
 8009258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	ec55 4b10 	vmov	r4, r5, d0
 8009260:	2d00      	cmp	r5, #0
 8009262:	460e      	mov	r6, r1
 8009264:	4619      	mov	r1, r3
 8009266:	462b      	mov	r3, r5
 8009268:	bfbb      	ittet	lt
 800926a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800926e:	461d      	movlt	r5, r3
 8009270:	2300      	movge	r3, #0
 8009272:	232d      	movlt	r3, #45	; 0x2d
 8009274:	700b      	strb	r3, [r1, #0]
 8009276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009278:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800927c:	4691      	mov	r9, r2
 800927e:	f023 0820 	bic.w	r8, r3, #32
 8009282:	bfbc      	itt	lt
 8009284:	4622      	movlt	r2, r4
 8009286:	4614      	movlt	r4, r2
 8009288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800928c:	d005      	beq.n	800929a <__cvt+0x42>
 800928e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009292:	d100      	bne.n	8009296 <__cvt+0x3e>
 8009294:	3601      	adds	r6, #1
 8009296:	2102      	movs	r1, #2
 8009298:	e000      	b.n	800929c <__cvt+0x44>
 800929a:	2103      	movs	r1, #3
 800929c:	ab03      	add	r3, sp, #12
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	ab02      	add	r3, sp, #8
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	ec45 4b10 	vmov	d0, r4, r5
 80092a8:	4653      	mov	r3, sl
 80092aa:	4632      	mov	r2, r6
 80092ac:	f000 fccc 	bl	8009c48 <_dtoa_r>
 80092b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092b4:	4607      	mov	r7, r0
 80092b6:	d102      	bne.n	80092be <__cvt+0x66>
 80092b8:	f019 0f01 	tst.w	r9, #1
 80092bc:	d022      	beq.n	8009304 <__cvt+0xac>
 80092be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092c2:	eb07 0906 	add.w	r9, r7, r6
 80092c6:	d110      	bne.n	80092ea <__cvt+0x92>
 80092c8:	783b      	ldrb	r3, [r7, #0]
 80092ca:	2b30      	cmp	r3, #48	; 0x30
 80092cc:	d10a      	bne.n	80092e4 <__cvt+0x8c>
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f7 fc1f 	bl	8000b18 <__aeabi_dcmpeq>
 80092da:	b918      	cbnz	r0, 80092e4 <__cvt+0x8c>
 80092dc:	f1c6 0601 	rsb	r6, r6, #1
 80092e0:	f8ca 6000 	str.w	r6, [sl]
 80092e4:	f8da 3000 	ldr.w	r3, [sl]
 80092e8:	4499      	add	r9, r3
 80092ea:	2200      	movs	r2, #0
 80092ec:	2300      	movs	r3, #0
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 fc11 	bl	8000b18 <__aeabi_dcmpeq>
 80092f6:	b108      	cbz	r0, 80092fc <__cvt+0xa4>
 80092f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092fc:	2230      	movs	r2, #48	; 0x30
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	454b      	cmp	r3, r9
 8009302:	d307      	bcc.n	8009314 <__cvt+0xbc>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009308:	1bdb      	subs	r3, r3, r7
 800930a:	4638      	mov	r0, r7
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	b004      	add	sp, #16
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	1c59      	adds	r1, r3, #1
 8009316:	9103      	str	r1, [sp, #12]
 8009318:	701a      	strb	r2, [r3, #0]
 800931a:	e7f0      	b.n	80092fe <__cvt+0xa6>

0800931c <__exponent>:
 800931c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800931e:	4603      	mov	r3, r0
 8009320:	2900      	cmp	r1, #0
 8009322:	bfb8      	it	lt
 8009324:	4249      	neglt	r1, r1
 8009326:	f803 2b02 	strb.w	r2, [r3], #2
 800932a:	bfb4      	ite	lt
 800932c:	222d      	movlt	r2, #45	; 0x2d
 800932e:	222b      	movge	r2, #43	; 0x2b
 8009330:	2909      	cmp	r1, #9
 8009332:	7042      	strb	r2, [r0, #1]
 8009334:	dd2a      	ble.n	800938c <__exponent+0x70>
 8009336:	f10d 0407 	add.w	r4, sp, #7
 800933a:	46a4      	mov	ip, r4
 800933c:	270a      	movs	r7, #10
 800933e:	46a6      	mov	lr, r4
 8009340:	460a      	mov	r2, r1
 8009342:	fb91 f6f7 	sdiv	r6, r1, r7
 8009346:	fb07 1516 	mls	r5, r7, r6, r1
 800934a:	3530      	adds	r5, #48	; 0x30
 800934c:	2a63      	cmp	r2, #99	; 0x63
 800934e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009356:	4631      	mov	r1, r6
 8009358:	dcf1      	bgt.n	800933e <__exponent+0x22>
 800935a:	3130      	adds	r1, #48	; 0x30
 800935c:	f1ae 0502 	sub.w	r5, lr, #2
 8009360:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009364:	1c44      	adds	r4, r0, #1
 8009366:	4629      	mov	r1, r5
 8009368:	4561      	cmp	r1, ip
 800936a:	d30a      	bcc.n	8009382 <__exponent+0x66>
 800936c:	f10d 0209 	add.w	r2, sp, #9
 8009370:	eba2 020e 	sub.w	r2, r2, lr
 8009374:	4565      	cmp	r5, ip
 8009376:	bf88      	it	hi
 8009378:	2200      	movhi	r2, #0
 800937a:	4413      	add	r3, r2
 800937c:	1a18      	subs	r0, r3, r0
 800937e:	b003      	add	sp, #12
 8009380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009386:	f804 2f01 	strb.w	r2, [r4, #1]!
 800938a:	e7ed      	b.n	8009368 <__exponent+0x4c>
 800938c:	2330      	movs	r3, #48	; 0x30
 800938e:	3130      	adds	r1, #48	; 0x30
 8009390:	7083      	strb	r3, [r0, #2]
 8009392:	70c1      	strb	r1, [r0, #3]
 8009394:	1d03      	adds	r3, r0, #4
 8009396:	e7f1      	b.n	800937c <__exponent+0x60>

08009398 <_printf_float>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	ed2d 8b02 	vpush	{d8}
 80093a0:	b08d      	sub	sp, #52	; 0x34
 80093a2:	460c      	mov	r4, r1
 80093a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093a8:	4616      	mov	r6, r2
 80093aa:	461f      	mov	r7, r3
 80093ac:	4605      	mov	r5, r0
 80093ae:	f001 fa39 	bl	800a824 <_localeconv_r>
 80093b2:	f8d0 a000 	ldr.w	sl, [r0]
 80093b6:	4650      	mov	r0, sl
 80093b8:	f7f6 ff32 	bl	8000220 <strlen>
 80093bc:	2300      	movs	r3, #0
 80093be:	930a      	str	r3, [sp, #40]	; 0x28
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	f8d8 3000 	ldr.w	r3, [r8]
 80093c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093cc:	3307      	adds	r3, #7
 80093ce:	f023 0307 	bic.w	r3, r3, #7
 80093d2:	f103 0208 	add.w	r2, r3, #8
 80093d6:	f8c8 2000 	str.w	r2, [r8]
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80093f0:	ee08 0a10 	vmov	s16, r0
 80093f4:	4b9f      	ldr	r3, [pc, #636]	; (8009674 <_printf_float+0x2dc>)
 80093f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295
 80093fe:	f7f7 fbbd 	bl	8000b7c <__aeabi_dcmpun>
 8009402:	bb88      	cbnz	r0, 8009468 <_printf_float+0xd0>
 8009404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009408:	4b9a      	ldr	r3, [pc, #616]	; (8009674 <_printf_float+0x2dc>)
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	f7f7 fb97 	bl	8000b40 <__aeabi_dcmple>
 8009412:	bb48      	cbnz	r0, 8009468 <_printf_float+0xd0>
 8009414:	2200      	movs	r2, #0
 8009416:	2300      	movs	r3, #0
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fb86 	bl	8000b2c <__aeabi_dcmplt>
 8009420:	b110      	cbz	r0, 8009428 <_printf_float+0x90>
 8009422:	232d      	movs	r3, #45	; 0x2d
 8009424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009428:	4b93      	ldr	r3, [pc, #588]	; (8009678 <_printf_float+0x2e0>)
 800942a:	4894      	ldr	r0, [pc, #592]	; (800967c <_printf_float+0x2e4>)
 800942c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009430:	bf94      	ite	ls
 8009432:	4698      	movls	r8, r3
 8009434:	4680      	movhi	r8, r0
 8009436:	2303      	movs	r3, #3
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	f023 0204 	bic.w	r2, r3, #4
 8009440:	6022      	str	r2, [r4, #0]
 8009442:	f04f 0900 	mov.w	r9, #0
 8009446:	9700      	str	r7, [sp, #0]
 8009448:	4633      	mov	r3, r6
 800944a:	aa0b      	add	r2, sp, #44	; 0x2c
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f9d8 	bl	8009804 <_printf_common>
 8009454:	3001      	adds	r0, #1
 8009456:	f040 8090 	bne.w	800957a <_printf_float+0x1e2>
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	b00d      	add	sp, #52	; 0x34
 8009460:	ecbd 8b02 	vpop	{d8}
 8009464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	4640      	mov	r0, r8
 800946e:	4649      	mov	r1, r9
 8009470:	f7f7 fb84 	bl	8000b7c <__aeabi_dcmpun>
 8009474:	b140      	cbz	r0, 8009488 <_printf_float+0xf0>
 8009476:	464b      	mov	r3, r9
 8009478:	2b00      	cmp	r3, #0
 800947a:	bfbc      	itt	lt
 800947c:	232d      	movlt	r3, #45	; 0x2d
 800947e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009482:	487f      	ldr	r0, [pc, #508]	; (8009680 <_printf_float+0x2e8>)
 8009484:	4b7f      	ldr	r3, [pc, #508]	; (8009684 <_printf_float+0x2ec>)
 8009486:	e7d1      	b.n	800942c <_printf_float+0x94>
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800948e:	9206      	str	r2, [sp, #24]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	d13f      	bne.n	8009514 <_printf_float+0x17c>
 8009494:	2306      	movs	r3, #6
 8009496:	6063      	str	r3, [r4, #4]
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	6861      	ldr	r1, [r4, #4]
 800949c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094a0:	2300      	movs	r3, #0
 80094a2:	9303      	str	r3, [sp, #12]
 80094a4:	ab0a      	add	r3, sp, #40	; 0x28
 80094a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094aa:	ab09      	add	r3, sp, #36	; 0x24
 80094ac:	ec49 8b10 	vmov	d0, r8, r9
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff fecd 	bl	8009258 <__cvt>
 80094be:	9b06      	ldr	r3, [sp, #24]
 80094c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094c2:	2b47      	cmp	r3, #71	; 0x47
 80094c4:	4680      	mov	r8, r0
 80094c6:	d108      	bne.n	80094da <_printf_float+0x142>
 80094c8:	1cc8      	adds	r0, r1, #3
 80094ca:	db02      	blt.n	80094d2 <_printf_float+0x13a>
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	4299      	cmp	r1, r3
 80094d0:	dd41      	ble.n	8009556 <_printf_float+0x1be>
 80094d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80094d6:	fa5f fb8b 	uxtb.w	fp, fp
 80094da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094de:	d820      	bhi.n	8009522 <_printf_float+0x18a>
 80094e0:	3901      	subs	r1, #1
 80094e2:	465a      	mov	r2, fp
 80094e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094e8:	9109      	str	r1, [sp, #36]	; 0x24
 80094ea:	f7ff ff17 	bl	800931c <__exponent>
 80094ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f0:	1813      	adds	r3, r2, r0
 80094f2:	2a01      	cmp	r2, #1
 80094f4:	4681      	mov	r9, r0
 80094f6:	6123      	str	r3, [r4, #16]
 80094f8:	dc02      	bgt.n	8009500 <_printf_float+0x168>
 80094fa:	6822      	ldr	r2, [r4, #0]
 80094fc:	07d2      	lsls	r2, r2, #31
 80094fe:	d501      	bpl.n	8009504 <_printf_float+0x16c>
 8009500:	3301      	adds	r3, #1
 8009502:	6123      	str	r3, [r4, #16]
 8009504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009508:	2b00      	cmp	r3, #0
 800950a:	d09c      	beq.n	8009446 <_printf_float+0xae>
 800950c:	232d      	movs	r3, #45	; 0x2d
 800950e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009512:	e798      	b.n	8009446 <_printf_float+0xae>
 8009514:	9a06      	ldr	r2, [sp, #24]
 8009516:	2a47      	cmp	r2, #71	; 0x47
 8009518:	d1be      	bne.n	8009498 <_printf_float+0x100>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1bc      	bne.n	8009498 <_printf_float+0x100>
 800951e:	2301      	movs	r3, #1
 8009520:	e7b9      	b.n	8009496 <_printf_float+0xfe>
 8009522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009526:	d118      	bne.n	800955a <_printf_float+0x1c2>
 8009528:	2900      	cmp	r1, #0
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	dd0b      	ble.n	8009546 <_printf_float+0x1ae>
 800952e:	6121      	str	r1, [r4, #16]
 8009530:	b913      	cbnz	r3, 8009538 <_printf_float+0x1a0>
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	07d0      	lsls	r0, r2, #31
 8009536:	d502      	bpl.n	800953e <_printf_float+0x1a6>
 8009538:	3301      	adds	r3, #1
 800953a:	440b      	add	r3, r1
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009540:	f04f 0900 	mov.w	r9, #0
 8009544:	e7de      	b.n	8009504 <_printf_float+0x16c>
 8009546:	b913      	cbnz	r3, 800954e <_printf_float+0x1b6>
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	07d2      	lsls	r2, r2, #31
 800954c:	d501      	bpl.n	8009552 <_printf_float+0x1ba>
 800954e:	3302      	adds	r3, #2
 8009550:	e7f4      	b.n	800953c <_printf_float+0x1a4>
 8009552:	2301      	movs	r3, #1
 8009554:	e7f2      	b.n	800953c <_printf_float+0x1a4>
 8009556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955c:	4299      	cmp	r1, r3
 800955e:	db05      	blt.n	800956c <_printf_float+0x1d4>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	6121      	str	r1, [r4, #16]
 8009564:	07d8      	lsls	r0, r3, #31
 8009566:	d5ea      	bpl.n	800953e <_printf_float+0x1a6>
 8009568:	1c4b      	adds	r3, r1, #1
 800956a:	e7e7      	b.n	800953c <_printf_float+0x1a4>
 800956c:	2900      	cmp	r1, #0
 800956e:	bfd4      	ite	le
 8009570:	f1c1 0202 	rsble	r2, r1, #2
 8009574:	2201      	movgt	r2, #1
 8009576:	4413      	add	r3, r2
 8009578:	e7e0      	b.n	800953c <_printf_float+0x1a4>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	055a      	lsls	r2, r3, #21
 800957e:	d407      	bmi.n	8009590 <_printf_float+0x1f8>
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	4642      	mov	r2, r8
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	d12c      	bne.n	80095e8 <_printf_float+0x250>
 800958e:	e764      	b.n	800945a <_printf_float+0xc2>
 8009590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009594:	f240 80e0 	bls.w	8009758 <_printf_float+0x3c0>
 8009598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800959c:	2200      	movs	r2, #0
 800959e:	2300      	movs	r3, #0
 80095a0:	f7f7 faba 	bl	8000b18 <__aeabi_dcmpeq>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d034      	beq.n	8009612 <_printf_float+0x27a>
 80095a8:	4a37      	ldr	r2, [pc, #220]	; (8009688 <_printf_float+0x2f0>)
 80095aa:	2301      	movs	r3, #1
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	f43f af51 	beq.w	800945a <_printf_float+0xc2>
 80095b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095bc:	429a      	cmp	r2, r3
 80095be:	db02      	blt.n	80095c6 <_printf_float+0x22e>
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	07d8      	lsls	r0, r3, #31
 80095c4:	d510      	bpl.n	80095e8 <_printf_float+0x250>
 80095c6:	ee18 3a10 	vmov	r3, s16
 80095ca:	4652      	mov	r2, sl
 80095cc:	4631      	mov	r1, r6
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b8      	blx	r7
 80095d2:	3001      	adds	r0, #1
 80095d4:	f43f af41 	beq.w	800945a <_printf_float+0xc2>
 80095d8:	f04f 0800 	mov.w	r8, #0
 80095dc:	f104 091a 	add.w	r9, r4, #26
 80095e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e2:	3b01      	subs	r3, #1
 80095e4:	4543      	cmp	r3, r8
 80095e6:	dc09      	bgt.n	80095fc <_printf_float+0x264>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	079b      	lsls	r3, r3, #30
 80095ec:	f100 8105 	bmi.w	80097fa <_printf_float+0x462>
 80095f0:	68e0      	ldr	r0, [r4, #12]
 80095f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f4:	4298      	cmp	r0, r3
 80095f6:	bfb8      	it	lt
 80095f8:	4618      	movlt	r0, r3
 80095fa:	e730      	b.n	800945e <_printf_float+0xc6>
 80095fc:	2301      	movs	r3, #1
 80095fe:	464a      	mov	r2, r9
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af27 	beq.w	800945a <_printf_float+0xc2>
 800960c:	f108 0801 	add.w	r8, r8, #1
 8009610:	e7e6      	b.n	80095e0 <_printf_float+0x248>
 8009612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	dc39      	bgt.n	800968c <_printf_float+0x2f4>
 8009618:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <_printf_float+0x2f0>)
 800961a:	2301      	movs	r3, #1
 800961c:	4631      	mov	r1, r6
 800961e:	4628      	mov	r0, r5
 8009620:	47b8      	blx	r7
 8009622:	3001      	adds	r0, #1
 8009624:	f43f af19 	beq.w	800945a <_printf_float+0xc2>
 8009628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800962c:	4313      	orrs	r3, r2
 800962e:	d102      	bne.n	8009636 <_printf_float+0x29e>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d5d8      	bpl.n	80095e8 <_printf_float+0x250>
 8009636:	ee18 3a10 	vmov	r3, s16
 800963a:	4652      	mov	r2, sl
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af09 	beq.w	800945a <_printf_float+0xc2>
 8009648:	f04f 0900 	mov.w	r9, #0
 800964c:	f104 0a1a 	add.w	sl, r4, #26
 8009650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009652:	425b      	negs	r3, r3
 8009654:	454b      	cmp	r3, r9
 8009656:	dc01      	bgt.n	800965c <_printf_float+0x2c4>
 8009658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965a:	e792      	b.n	8009582 <_printf_float+0x1ea>
 800965c:	2301      	movs	r3, #1
 800965e:	4652      	mov	r2, sl
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f aef7 	beq.w	800945a <_printf_float+0xc2>
 800966c:	f109 0901 	add.w	r9, r9, #1
 8009670:	e7ee      	b.n	8009650 <_printf_float+0x2b8>
 8009672:	bf00      	nop
 8009674:	7fefffff 	.word	0x7fefffff
 8009678:	0800bd84 	.word	0x0800bd84
 800967c:	0800bd88 	.word	0x0800bd88
 8009680:	0800bd90 	.word	0x0800bd90
 8009684:	0800bd8c 	.word	0x0800bd8c
 8009688:	0800bd94 	.word	0x0800bd94
 800968c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800968e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009690:	429a      	cmp	r2, r3
 8009692:	bfa8      	it	ge
 8009694:	461a      	movge	r2, r3
 8009696:	2a00      	cmp	r2, #0
 8009698:	4691      	mov	r9, r2
 800969a:	dc37      	bgt.n	800970c <_printf_float+0x374>
 800969c:	f04f 0b00 	mov.w	fp, #0
 80096a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096a4:	f104 021a 	add.w	r2, r4, #26
 80096a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	eba3 0309 	sub.w	r3, r3, r9
 80096b0:	455b      	cmp	r3, fp
 80096b2:	dc33      	bgt.n	800971c <_printf_float+0x384>
 80096b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096b8:	429a      	cmp	r2, r3
 80096ba:	db3b      	blt.n	8009734 <_printf_float+0x39c>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	07da      	lsls	r2, r3, #31
 80096c0:	d438      	bmi.n	8009734 <_printf_float+0x39c>
 80096c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c4:	9a05      	ldr	r2, [sp, #20]
 80096c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096c8:	1a9a      	subs	r2, r3, r2
 80096ca:	eba3 0901 	sub.w	r9, r3, r1
 80096ce:	4591      	cmp	r9, r2
 80096d0:	bfa8      	it	ge
 80096d2:	4691      	movge	r9, r2
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	dc35      	bgt.n	8009746 <_printf_float+0x3ae>
 80096da:	f04f 0800 	mov.w	r8, #0
 80096de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096e2:	f104 0a1a 	add.w	sl, r4, #26
 80096e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	eba3 0309 	sub.w	r3, r3, r9
 80096f0:	4543      	cmp	r3, r8
 80096f2:	f77f af79 	ble.w	80095e8 <_printf_float+0x250>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4652      	mov	r2, sl
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f aeaa 	beq.w	800945a <_printf_float+0xc2>
 8009706:	f108 0801 	add.w	r8, r8, #1
 800970a:	e7ec      	b.n	80096e6 <_printf_float+0x34e>
 800970c:	4613      	mov	r3, r2
 800970e:	4631      	mov	r1, r6
 8009710:	4642      	mov	r2, r8
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	d1c0      	bne.n	800969c <_printf_float+0x304>
 800971a:	e69e      	b.n	800945a <_printf_float+0xc2>
 800971c:	2301      	movs	r3, #1
 800971e:	4631      	mov	r1, r6
 8009720:	4628      	mov	r0, r5
 8009722:	9205      	str	r2, [sp, #20]
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f ae97 	beq.w	800945a <_printf_float+0xc2>
 800972c:	9a05      	ldr	r2, [sp, #20]
 800972e:	f10b 0b01 	add.w	fp, fp, #1
 8009732:	e7b9      	b.n	80096a8 <_printf_float+0x310>
 8009734:	ee18 3a10 	vmov	r3, s16
 8009738:	4652      	mov	r2, sl
 800973a:	4631      	mov	r1, r6
 800973c:	4628      	mov	r0, r5
 800973e:	47b8      	blx	r7
 8009740:	3001      	adds	r0, #1
 8009742:	d1be      	bne.n	80096c2 <_printf_float+0x32a>
 8009744:	e689      	b.n	800945a <_printf_float+0xc2>
 8009746:	9a05      	ldr	r2, [sp, #20]
 8009748:	464b      	mov	r3, r9
 800974a:	4442      	add	r2, r8
 800974c:	4631      	mov	r1, r6
 800974e:	4628      	mov	r0, r5
 8009750:	47b8      	blx	r7
 8009752:	3001      	adds	r0, #1
 8009754:	d1c1      	bne.n	80096da <_printf_float+0x342>
 8009756:	e680      	b.n	800945a <_printf_float+0xc2>
 8009758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800975a:	2a01      	cmp	r2, #1
 800975c:	dc01      	bgt.n	8009762 <_printf_float+0x3ca>
 800975e:	07db      	lsls	r3, r3, #31
 8009760:	d538      	bpl.n	80097d4 <_printf_float+0x43c>
 8009762:	2301      	movs	r3, #1
 8009764:	4642      	mov	r2, r8
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	f43f ae74 	beq.w	800945a <_printf_float+0xc2>
 8009772:	ee18 3a10 	vmov	r3, s16
 8009776:	4652      	mov	r2, sl
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	f43f ae6b 	beq.w	800945a <_printf_float+0xc2>
 8009784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009788:	2200      	movs	r2, #0
 800978a:	2300      	movs	r3, #0
 800978c:	f7f7 f9c4 	bl	8000b18 <__aeabi_dcmpeq>
 8009790:	b9d8      	cbnz	r0, 80097ca <_printf_float+0x432>
 8009792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009794:	f108 0201 	add.w	r2, r8, #1
 8009798:	3b01      	subs	r3, #1
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	d10e      	bne.n	80097c2 <_printf_float+0x42a>
 80097a4:	e659      	b.n	800945a <_printf_float+0xc2>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4652      	mov	r2, sl
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f ae52 	beq.w	800945a <_printf_float+0xc2>
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	3b01      	subs	r3, #1
 80097be:	4543      	cmp	r3, r8
 80097c0:	dcf1      	bgt.n	80097a6 <_printf_float+0x40e>
 80097c2:	464b      	mov	r3, r9
 80097c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097c8:	e6dc      	b.n	8009584 <_printf_float+0x1ec>
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	f104 0a1a 	add.w	sl, r4, #26
 80097d2:	e7f2      	b.n	80097ba <_printf_float+0x422>
 80097d4:	2301      	movs	r3, #1
 80097d6:	4642      	mov	r2, r8
 80097d8:	e7df      	b.n	800979a <_printf_float+0x402>
 80097da:	2301      	movs	r3, #1
 80097dc:	464a      	mov	r2, r9
 80097de:	4631      	mov	r1, r6
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b8      	blx	r7
 80097e4:	3001      	adds	r0, #1
 80097e6:	f43f ae38 	beq.w	800945a <_printf_float+0xc2>
 80097ea:	f108 0801 	add.w	r8, r8, #1
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097f2:	1a5b      	subs	r3, r3, r1
 80097f4:	4543      	cmp	r3, r8
 80097f6:	dcf0      	bgt.n	80097da <_printf_float+0x442>
 80097f8:	e6fa      	b.n	80095f0 <_printf_float+0x258>
 80097fa:	f04f 0800 	mov.w	r8, #0
 80097fe:	f104 0919 	add.w	r9, r4, #25
 8009802:	e7f4      	b.n	80097ee <_printf_float+0x456>

08009804 <_printf_common>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	4616      	mov	r6, r2
 800980a:	4699      	mov	r9, r3
 800980c:	688a      	ldr	r2, [r1, #8]
 800980e:	690b      	ldr	r3, [r1, #16]
 8009810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009814:	4293      	cmp	r3, r2
 8009816:	bfb8      	it	lt
 8009818:	4613      	movlt	r3, r2
 800981a:	6033      	str	r3, [r6, #0]
 800981c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009820:	4607      	mov	r7, r0
 8009822:	460c      	mov	r4, r1
 8009824:	b10a      	cbz	r2, 800982a <_printf_common+0x26>
 8009826:	3301      	adds	r3, #1
 8009828:	6033      	str	r3, [r6, #0]
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	0699      	lsls	r1, r3, #26
 800982e:	bf42      	ittt	mi
 8009830:	6833      	ldrmi	r3, [r6, #0]
 8009832:	3302      	addmi	r3, #2
 8009834:	6033      	strmi	r3, [r6, #0]
 8009836:	6825      	ldr	r5, [r4, #0]
 8009838:	f015 0506 	ands.w	r5, r5, #6
 800983c:	d106      	bne.n	800984c <_printf_common+0x48>
 800983e:	f104 0a19 	add.w	sl, r4, #25
 8009842:	68e3      	ldr	r3, [r4, #12]
 8009844:	6832      	ldr	r2, [r6, #0]
 8009846:	1a9b      	subs	r3, r3, r2
 8009848:	42ab      	cmp	r3, r5
 800984a:	dc26      	bgt.n	800989a <_printf_common+0x96>
 800984c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009850:	1e13      	subs	r3, r2, #0
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	bf18      	it	ne
 8009856:	2301      	movne	r3, #1
 8009858:	0692      	lsls	r2, r2, #26
 800985a:	d42b      	bmi.n	80098b4 <_printf_common+0xb0>
 800985c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009860:	4649      	mov	r1, r9
 8009862:	4638      	mov	r0, r7
 8009864:	47c0      	blx	r8
 8009866:	3001      	adds	r0, #1
 8009868:	d01e      	beq.n	80098a8 <_printf_common+0xa4>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	68e5      	ldr	r5, [r4, #12]
 800986e:	6832      	ldr	r2, [r6, #0]
 8009870:	f003 0306 	and.w	r3, r3, #6
 8009874:	2b04      	cmp	r3, #4
 8009876:	bf08      	it	eq
 8009878:	1aad      	subeq	r5, r5, r2
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	6922      	ldr	r2, [r4, #16]
 800987e:	bf0c      	ite	eq
 8009880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009884:	2500      	movne	r5, #0
 8009886:	4293      	cmp	r3, r2
 8009888:	bfc4      	itt	gt
 800988a:	1a9b      	subgt	r3, r3, r2
 800988c:	18ed      	addgt	r5, r5, r3
 800988e:	2600      	movs	r6, #0
 8009890:	341a      	adds	r4, #26
 8009892:	42b5      	cmp	r5, r6
 8009894:	d11a      	bne.n	80098cc <_printf_common+0xc8>
 8009896:	2000      	movs	r0, #0
 8009898:	e008      	b.n	80098ac <_printf_common+0xa8>
 800989a:	2301      	movs	r3, #1
 800989c:	4652      	mov	r2, sl
 800989e:	4649      	mov	r1, r9
 80098a0:	4638      	mov	r0, r7
 80098a2:	47c0      	blx	r8
 80098a4:	3001      	adds	r0, #1
 80098a6:	d103      	bne.n	80098b0 <_printf_common+0xac>
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b0:	3501      	adds	r5, #1
 80098b2:	e7c6      	b.n	8009842 <_printf_common+0x3e>
 80098b4:	18e1      	adds	r1, r4, r3
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	2030      	movs	r0, #48	; 0x30
 80098ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098be:	4422      	add	r2, r4
 80098c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098c8:	3302      	adds	r3, #2
 80098ca:	e7c7      	b.n	800985c <_printf_common+0x58>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4622      	mov	r2, r4
 80098d0:	4649      	mov	r1, r9
 80098d2:	4638      	mov	r0, r7
 80098d4:	47c0      	blx	r8
 80098d6:	3001      	adds	r0, #1
 80098d8:	d0e6      	beq.n	80098a8 <_printf_common+0xa4>
 80098da:	3601      	adds	r6, #1
 80098dc:	e7d9      	b.n	8009892 <_printf_common+0x8e>
	...

080098e0 <_printf_i>:
 80098e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	7e0f      	ldrb	r7, [r1, #24]
 80098e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098e8:	2f78      	cmp	r7, #120	; 0x78
 80098ea:	4691      	mov	r9, r2
 80098ec:	4680      	mov	r8, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	469a      	mov	sl, r3
 80098f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098f6:	d807      	bhi.n	8009908 <_printf_i+0x28>
 80098f8:	2f62      	cmp	r7, #98	; 0x62
 80098fa:	d80a      	bhi.n	8009912 <_printf_i+0x32>
 80098fc:	2f00      	cmp	r7, #0
 80098fe:	f000 80d8 	beq.w	8009ab2 <_printf_i+0x1d2>
 8009902:	2f58      	cmp	r7, #88	; 0x58
 8009904:	f000 80a3 	beq.w	8009a4e <_printf_i+0x16e>
 8009908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800990c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009910:	e03a      	b.n	8009988 <_printf_i+0xa8>
 8009912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009916:	2b15      	cmp	r3, #21
 8009918:	d8f6      	bhi.n	8009908 <_printf_i+0x28>
 800991a:	a101      	add	r1, pc, #4	; (adr r1, 8009920 <_printf_i+0x40>)
 800991c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009920:	08009979 	.word	0x08009979
 8009924:	0800998d 	.word	0x0800998d
 8009928:	08009909 	.word	0x08009909
 800992c:	08009909 	.word	0x08009909
 8009930:	08009909 	.word	0x08009909
 8009934:	08009909 	.word	0x08009909
 8009938:	0800998d 	.word	0x0800998d
 800993c:	08009909 	.word	0x08009909
 8009940:	08009909 	.word	0x08009909
 8009944:	08009909 	.word	0x08009909
 8009948:	08009909 	.word	0x08009909
 800994c:	08009a99 	.word	0x08009a99
 8009950:	080099bd 	.word	0x080099bd
 8009954:	08009a7b 	.word	0x08009a7b
 8009958:	08009909 	.word	0x08009909
 800995c:	08009909 	.word	0x08009909
 8009960:	08009abb 	.word	0x08009abb
 8009964:	08009909 	.word	0x08009909
 8009968:	080099bd 	.word	0x080099bd
 800996c:	08009909 	.word	0x08009909
 8009970:	08009909 	.word	0x08009909
 8009974:	08009a83 	.word	0x08009a83
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	1d1a      	adds	r2, r3, #4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	602a      	str	r2, [r5, #0]
 8009980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009988:	2301      	movs	r3, #1
 800998a:	e0a3      	b.n	8009ad4 <_printf_i+0x1f4>
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	6829      	ldr	r1, [r5, #0]
 8009990:	0606      	lsls	r6, r0, #24
 8009992:	f101 0304 	add.w	r3, r1, #4
 8009996:	d50a      	bpl.n	80099ae <_printf_i+0xce>
 8009998:	680e      	ldr	r6, [r1, #0]
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	2e00      	cmp	r6, #0
 800999e:	da03      	bge.n	80099a8 <_printf_i+0xc8>
 80099a0:	232d      	movs	r3, #45	; 0x2d
 80099a2:	4276      	negs	r6, r6
 80099a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a8:	485e      	ldr	r0, [pc, #376]	; (8009b24 <_printf_i+0x244>)
 80099aa:	230a      	movs	r3, #10
 80099ac:	e019      	b.n	80099e2 <_printf_i+0x102>
 80099ae:	680e      	ldr	r6, [r1, #0]
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099b6:	bf18      	it	ne
 80099b8:	b236      	sxthne	r6, r6
 80099ba:	e7ef      	b.n	800999c <_printf_i+0xbc>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	1d19      	adds	r1, r3, #4
 80099c2:	6029      	str	r1, [r5, #0]
 80099c4:	0601      	lsls	r1, r0, #24
 80099c6:	d501      	bpl.n	80099cc <_printf_i+0xec>
 80099c8:	681e      	ldr	r6, [r3, #0]
 80099ca:	e002      	b.n	80099d2 <_printf_i+0xf2>
 80099cc:	0646      	lsls	r6, r0, #25
 80099ce:	d5fb      	bpl.n	80099c8 <_printf_i+0xe8>
 80099d0:	881e      	ldrh	r6, [r3, #0]
 80099d2:	4854      	ldr	r0, [pc, #336]	; (8009b24 <_printf_i+0x244>)
 80099d4:	2f6f      	cmp	r7, #111	; 0x6f
 80099d6:	bf0c      	ite	eq
 80099d8:	2308      	moveq	r3, #8
 80099da:	230a      	movne	r3, #10
 80099dc:	2100      	movs	r1, #0
 80099de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099e2:	6865      	ldr	r5, [r4, #4]
 80099e4:	60a5      	str	r5, [r4, #8]
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	bfa2      	ittt	ge
 80099ea:	6821      	ldrge	r1, [r4, #0]
 80099ec:	f021 0104 	bicge.w	r1, r1, #4
 80099f0:	6021      	strge	r1, [r4, #0]
 80099f2:	b90e      	cbnz	r6, 80099f8 <_printf_i+0x118>
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	d04d      	beq.n	8009a94 <_printf_i+0x1b4>
 80099f8:	4615      	mov	r5, r2
 80099fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80099fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009a02:	5dc7      	ldrb	r7, [r0, r7]
 8009a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a08:	4637      	mov	r7, r6
 8009a0a:	42bb      	cmp	r3, r7
 8009a0c:	460e      	mov	r6, r1
 8009a0e:	d9f4      	bls.n	80099fa <_printf_i+0x11a>
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d10b      	bne.n	8009a2c <_printf_i+0x14c>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	07de      	lsls	r6, r3, #31
 8009a18:	d508      	bpl.n	8009a2c <_printf_i+0x14c>
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	6861      	ldr	r1, [r4, #4]
 8009a1e:	4299      	cmp	r1, r3
 8009a20:	bfde      	ittt	le
 8009a22:	2330      	movle	r3, #48	; 0x30
 8009a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a2c:	1b52      	subs	r2, r2, r5
 8009a2e:	6122      	str	r2, [r4, #16]
 8009a30:	f8cd a000 	str.w	sl, [sp]
 8009a34:	464b      	mov	r3, r9
 8009a36:	aa03      	add	r2, sp, #12
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	f7ff fee2 	bl	8009804 <_printf_common>
 8009a40:	3001      	adds	r0, #1
 8009a42:	d14c      	bne.n	8009ade <_printf_i+0x1fe>
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	b004      	add	sp, #16
 8009a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4e:	4835      	ldr	r0, [pc, #212]	; (8009b24 <_printf_i+0x244>)
 8009a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a54:	6829      	ldr	r1, [r5, #0]
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a5c:	6029      	str	r1, [r5, #0]
 8009a5e:	061d      	lsls	r5, r3, #24
 8009a60:	d514      	bpl.n	8009a8c <_printf_i+0x1ac>
 8009a62:	07df      	lsls	r7, r3, #31
 8009a64:	bf44      	itt	mi
 8009a66:	f043 0320 	orrmi.w	r3, r3, #32
 8009a6a:	6023      	strmi	r3, [r4, #0]
 8009a6c:	b91e      	cbnz	r6, 8009a76 <_printf_i+0x196>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	f023 0320 	bic.w	r3, r3, #32
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	2310      	movs	r3, #16
 8009a78:	e7b0      	b.n	80099dc <_printf_i+0xfc>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	f043 0320 	orr.w	r3, r3, #32
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	2378      	movs	r3, #120	; 0x78
 8009a84:	4828      	ldr	r0, [pc, #160]	; (8009b28 <_printf_i+0x248>)
 8009a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a8a:	e7e3      	b.n	8009a54 <_printf_i+0x174>
 8009a8c:	0659      	lsls	r1, r3, #25
 8009a8e:	bf48      	it	mi
 8009a90:	b2b6      	uxthmi	r6, r6
 8009a92:	e7e6      	b.n	8009a62 <_printf_i+0x182>
 8009a94:	4615      	mov	r5, r2
 8009a96:	e7bb      	b.n	8009a10 <_printf_i+0x130>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	6826      	ldr	r6, [r4, #0]
 8009a9c:	6961      	ldr	r1, [r4, #20]
 8009a9e:	1d18      	adds	r0, r3, #4
 8009aa0:	6028      	str	r0, [r5, #0]
 8009aa2:	0635      	lsls	r5, r6, #24
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0x1cc>
 8009aa8:	6019      	str	r1, [r3, #0]
 8009aaa:	e002      	b.n	8009ab2 <_printf_i+0x1d2>
 8009aac:	0670      	lsls	r0, r6, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0x1c8>
 8009ab0:	8019      	strh	r1, [r3, #0]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	4615      	mov	r5, r2
 8009ab8:	e7ba      	b.n	8009a30 <_printf_i+0x150>
 8009aba:	682b      	ldr	r3, [r5, #0]
 8009abc:	1d1a      	adds	r2, r3, #4
 8009abe:	602a      	str	r2, [r5, #0]
 8009ac0:	681d      	ldr	r5, [r3, #0]
 8009ac2:	6862      	ldr	r2, [r4, #4]
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f7f6 fbb2 	bl	8000230 <memchr>
 8009acc:	b108      	cbz	r0, 8009ad2 <_printf_i+0x1f2>
 8009ace:	1b40      	subs	r0, r0, r5
 8009ad0:	6060      	str	r0, [r4, #4]
 8009ad2:	6863      	ldr	r3, [r4, #4]
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009adc:	e7a8      	b.n	8009a30 <_printf_i+0x150>
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	47d0      	blx	sl
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d0ab      	beq.n	8009a44 <_printf_i+0x164>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	079b      	lsls	r3, r3, #30
 8009af0:	d413      	bmi.n	8009b1a <_printf_i+0x23a>
 8009af2:	68e0      	ldr	r0, [r4, #12]
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	4298      	cmp	r0, r3
 8009af8:	bfb8      	it	lt
 8009afa:	4618      	movlt	r0, r3
 8009afc:	e7a4      	b.n	8009a48 <_printf_i+0x168>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4632      	mov	r2, r6
 8009b02:	4649      	mov	r1, r9
 8009b04:	4640      	mov	r0, r8
 8009b06:	47d0      	blx	sl
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d09b      	beq.n	8009a44 <_printf_i+0x164>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	9903      	ldr	r1, [sp, #12]
 8009b12:	1a5b      	subs	r3, r3, r1
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	dcf2      	bgt.n	8009afe <_printf_i+0x21e>
 8009b18:	e7eb      	b.n	8009af2 <_printf_i+0x212>
 8009b1a:	2500      	movs	r5, #0
 8009b1c:	f104 0619 	add.w	r6, r4, #25
 8009b20:	e7f5      	b.n	8009b0e <_printf_i+0x22e>
 8009b22:	bf00      	nop
 8009b24:	0800bd96 	.word	0x0800bd96
 8009b28:	0800bda7 	.word	0x0800bda7

08009b2c <quorem>:
 8009b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	6903      	ldr	r3, [r0, #16]
 8009b32:	690c      	ldr	r4, [r1, #16]
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	4607      	mov	r7, r0
 8009b38:	f2c0 8081 	blt.w	8009c3e <quorem+0x112>
 8009b3c:	3c01      	subs	r4, #1
 8009b3e:	f101 0814 	add.w	r8, r1, #20
 8009b42:	f100 0514 	add.w	r5, r0, #20
 8009b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b54:	3301      	adds	r3, #1
 8009b56:	429a      	cmp	r2, r3
 8009b58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b64:	d331      	bcc.n	8009bca <quorem+0x9e>
 8009b66:	f04f 0e00 	mov.w	lr, #0
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	46ac      	mov	ip, r5
 8009b6e:	46f2      	mov	sl, lr
 8009b70:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b74:	b293      	uxth	r3, r2
 8009b76:	fb06 e303 	mla	r3, r6, r3, lr
 8009b7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	ebaa 0303 	sub.w	r3, sl, r3
 8009b84:	f8dc a000 	ldr.w	sl, [ip]
 8009b88:	0c12      	lsrs	r2, r2, #16
 8009b8a:	fa13 f38a 	uxtah	r3, r3, sl
 8009b8e:	fb06 e202 	mla	r2, r6, r2, lr
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ba4:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ba8:	4581      	cmp	r9, r0
 8009baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bae:	f84c 3b04 	str.w	r3, [ip], #4
 8009bb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bb6:	d2db      	bcs.n	8009b70 <quorem+0x44>
 8009bb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bbc:	b92b      	cbnz	r3, 8009bca <quorem+0x9e>
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	3b04      	subs	r3, #4
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	d32e      	bcc.n	8009c26 <quorem+0xfa>
 8009bc8:	613c      	str	r4, [r7, #16]
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f001 f8c6 	bl	800ad5c <__mcmp>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	db24      	blt.n	8009c1e <quorem+0xf2>
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f04f 0c00 	mov.w	ip, #0
 8009bdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009be0:	f8d0 e000 	ldr.w	lr, [r0]
 8009be4:	b293      	uxth	r3, r2
 8009be6:	ebac 0303 	sub.w	r3, ip, r3
 8009bea:	0c12      	lsrs	r2, r2, #16
 8009bec:	fa13 f38e 	uxtah	r3, r3, lr
 8009bf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bfe:	45c1      	cmp	r9, r8
 8009c00:	f840 3b04 	str.w	r3, [r0], #4
 8009c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c08:	d2e8      	bcs.n	8009bdc <quorem+0xb0>
 8009c0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c12:	b922      	cbnz	r2, 8009c1e <quorem+0xf2>
 8009c14:	3b04      	subs	r3, #4
 8009c16:	429d      	cmp	r5, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	d30a      	bcc.n	8009c32 <quorem+0x106>
 8009c1c:	613c      	str	r4, [r7, #16]
 8009c1e:	4630      	mov	r0, r6
 8009c20:	b003      	add	sp, #12
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	d1cc      	bne.n	8009bc8 <quorem+0x9c>
 8009c2e:	3c01      	subs	r4, #1
 8009c30:	e7c7      	b.n	8009bc2 <quorem+0x96>
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	3b04      	subs	r3, #4
 8009c36:	2a00      	cmp	r2, #0
 8009c38:	d1f0      	bne.n	8009c1c <quorem+0xf0>
 8009c3a:	3c01      	subs	r4, #1
 8009c3c:	e7eb      	b.n	8009c16 <quorem+0xea>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e7ee      	b.n	8009c20 <quorem+0xf4>
 8009c42:	0000      	movs	r0, r0
 8009c44:	0000      	movs	r0, r0
	...

08009c48 <_dtoa_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	ed2d 8b04 	vpush	{d8-d9}
 8009c50:	ec57 6b10 	vmov	r6, r7, d0
 8009c54:	b093      	sub	sp, #76	; 0x4c
 8009c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c5c:	9106      	str	r1, [sp, #24]
 8009c5e:	ee10 aa10 	vmov	sl, s0
 8009c62:	4604      	mov	r4, r0
 8009c64:	9209      	str	r2, [sp, #36]	; 0x24
 8009c66:	930c      	str	r3, [sp, #48]	; 0x30
 8009c68:	46bb      	mov	fp, r7
 8009c6a:	b975      	cbnz	r5, 8009c8a <_dtoa_r+0x42>
 8009c6c:	2010      	movs	r0, #16
 8009c6e:	f000 fddd 	bl	800a82c <malloc>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6260      	str	r0, [r4, #36]	; 0x24
 8009c76:	b920      	cbnz	r0, 8009c82 <_dtoa_r+0x3a>
 8009c78:	4ba7      	ldr	r3, [pc, #668]	; (8009f18 <_dtoa_r+0x2d0>)
 8009c7a:	21ea      	movs	r1, #234	; 0xea
 8009c7c:	48a7      	ldr	r0, [pc, #668]	; (8009f1c <_dtoa_r+0x2d4>)
 8009c7e:	f001 fa75 	bl	800b16c <__assert_func>
 8009c82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c86:	6005      	str	r5, [r0, #0]
 8009c88:	60c5      	str	r5, [r0, #12]
 8009c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c8c:	6819      	ldr	r1, [r3, #0]
 8009c8e:	b151      	cbz	r1, 8009ca6 <_dtoa_r+0x5e>
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	604a      	str	r2, [r1, #4]
 8009c94:	2301      	movs	r3, #1
 8009c96:	4093      	lsls	r3, r2
 8009c98:	608b      	str	r3, [r1, #8]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fe1c 	bl	800a8d8 <_Bfree>
 8009ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	1e3b      	subs	r3, r7, #0
 8009ca8:	bfaa      	itet	ge
 8009caa:	2300      	movge	r3, #0
 8009cac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009cb0:	f8c8 3000 	strge.w	r3, [r8]
 8009cb4:	4b9a      	ldr	r3, [pc, #616]	; (8009f20 <_dtoa_r+0x2d8>)
 8009cb6:	bfbc      	itt	lt
 8009cb8:	2201      	movlt	r2, #1
 8009cba:	f8c8 2000 	strlt.w	r2, [r8]
 8009cbe:	ea33 030b 	bics.w	r3, r3, fp
 8009cc2:	d11b      	bne.n	8009cfc <_dtoa_r+0xb4>
 8009cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd0:	4333      	orrs	r3, r6
 8009cd2:	f000 8592 	beq.w	800a7fa <_dtoa_r+0xbb2>
 8009cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cd8:	b963      	cbnz	r3, 8009cf4 <_dtoa_r+0xac>
 8009cda:	4b92      	ldr	r3, [pc, #584]	; (8009f24 <_dtoa_r+0x2dc>)
 8009cdc:	e022      	b.n	8009d24 <_dtoa_r+0xdc>
 8009cde:	4b92      	ldr	r3, [pc, #584]	; (8009f28 <_dtoa_r+0x2e0>)
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	9801      	ldr	r0, [sp, #4]
 8009cea:	b013      	add	sp, #76	; 0x4c
 8009cec:	ecbd 8b04 	vpop	{d8-d9}
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf4:	4b8b      	ldr	r3, [pc, #556]	; (8009f24 <_dtoa_r+0x2dc>)
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	3303      	adds	r3, #3
 8009cfa:	e7f3      	b.n	8009ce4 <_dtoa_r+0x9c>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4650      	mov	r0, sl
 8009d02:	4659      	mov	r1, fp
 8009d04:	f7f6 ff08 	bl	8000b18 <__aeabi_dcmpeq>
 8009d08:	ec4b ab19 	vmov	d9, sl, fp
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	b158      	cbz	r0, 8009d28 <_dtoa_r+0xe0>
 8009d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d12:	2301      	movs	r3, #1
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 856b 	beq.w	800a7f4 <_dtoa_r+0xbac>
 8009d1e:	4883      	ldr	r0, [pc, #524]	; (8009f2c <_dtoa_r+0x2e4>)
 8009d20:	6018      	str	r0, [r3, #0]
 8009d22:	1e43      	subs	r3, r0, #1
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	e7df      	b.n	8009ce8 <_dtoa_r+0xa0>
 8009d28:	ec4b ab10 	vmov	d0, sl, fp
 8009d2c:	aa10      	add	r2, sp, #64	; 0x40
 8009d2e:	a911      	add	r1, sp, #68	; 0x44
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 f8b9 	bl	800aea8 <__d2b>
 8009d36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d3a:	ee08 0a10 	vmov	s16, r0
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	f000 8084 	beq.w	8009e4c <_dtoa_r+0x204>
 8009d44:	ee19 3a90 	vmov	r3, s19
 8009d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d50:	4656      	mov	r6, sl
 8009d52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d5e:	4b74      	ldr	r3, [pc, #464]	; (8009f30 <_dtoa_r+0x2e8>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fab7 	bl	80002d8 <__aeabi_dsub>
 8009d6a:	a365      	add	r3, pc, #404	; (adr r3, 8009f00 <_dtoa_r+0x2b8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fc6a 	bl	8000648 <__aeabi_dmul>
 8009d74:	a364      	add	r3, pc, #400	; (adr r3, 8009f08 <_dtoa_r+0x2c0>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 faaf 	bl	80002dc <__adddf3>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	4628      	mov	r0, r5
 8009d82:	460f      	mov	r7, r1
 8009d84:	f7f6 fbf6 	bl	8000574 <__aeabi_i2d>
 8009d88:	a361      	add	r3, pc, #388	; (adr r3, 8009f10 <_dtoa_r+0x2c8>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fc5b 	bl	8000648 <__aeabi_dmul>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fa9f 	bl	80002dc <__adddf3>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460f      	mov	r7, r1
 8009da2:	f7f6 ff01 	bl	8000ba8 <__aeabi_d2iz>
 8009da6:	2200      	movs	r2, #0
 8009da8:	9000      	str	r0, [sp, #0]
 8009daa:	2300      	movs	r3, #0
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 febc 	bl	8000b2c <__aeabi_dcmplt>
 8009db4:	b150      	cbz	r0, 8009dcc <_dtoa_r+0x184>
 8009db6:	9800      	ldr	r0, [sp, #0]
 8009db8:	f7f6 fbdc 	bl	8000574 <__aeabi_i2d>
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	f7f6 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 8009dc4:	b910      	cbnz	r0, 8009dcc <_dtoa_r+0x184>
 8009dc6:	9b00      	ldr	r3, [sp, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	9b00      	ldr	r3, [sp, #0]
 8009dce:	2b16      	cmp	r3, #22
 8009dd0:	d85a      	bhi.n	8009e88 <_dtoa_r+0x240>
 8009dd2:	9a00      	ldr	r2, [sp, #0]
 8009dd4:	4b57      	ldr	r3, [pc, #348]	; (8009f34 <_dtoa_r+0x2ec>)
 8009dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	ec51 0b19 	vmov	r0, r1, d9
 8009de2:	f7f6 fea3 	bl	8000b2c <__aeabi_dcmplt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d050      	beq.n	8009e8c <_dtoa_r+0x244>
 8009dea:	9b00      	ldr	r3, [sp, #0]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	2300      	movs	r3, #0
 8009df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009df6:	1b5d      	subs	r5, r3, r5
 8009df8:	1e6b      	subs	r3, r5, #1
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	bf45      	ittet	mi
 8009dfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e02:	9304      	strmi	r3, [sp, #16]
 8009e04:	2300      	movpl	r3, #0
 8009e06:	2300      	movmi	r3, #0
 8009e08:	bf4c      	ite	mi
 8009e0a:	9305      	strmi	r3, [sp, #20]
 8009e0c:	9304      	strpl	r3, [sp, #16]
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	db3d      	blt.n	8009e90 <_dtoa_r+0x248>
 8009e14:	9b05      	ldr	r3, [sp, #20]
 8009e16:	9a00      	ldr	r2, [sp, #0]
 8009e18:	920a      	str	r2, [sp, #40]	; 0x28
 8009e1a:	4413      	add	r3, r2
 8009e1c:	9305      	str	r3, [sp, #20]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9307      	str	r3, [sp, #28]
 8009e22:	9b06      	ldr	r3, [sp, #24]
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	f200 8089 	bhi.w	8009f3c <_dtoa_r+0x2f4>
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	bfc4      	itt	gt
 8009e2e:	3b04      	subgt	r3, #4
 8009e30:	9306      	strgt	r3, [sp, #24]
 8009e32:	9b06      	ldr	r3, [sp, #24]
 8009e34:	f1a3 0302 	sub.w	r3, r3, #2
 8009e38:	bfcc      	ite	gt
 8009e3a:	2500      	movgt	r5, #0
 8009e3c:	2501      	movle	r5, #1
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	f200 8087 	bhi.w	8009f52 <_dtoa_r+0x30a>
 8009e44:	e8df f003 	tbb	[pc, r3]
 8009e48:	59383a2d 	.word	0x59383a2d
 8009e4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e50:	441d      	add	r5, r3
 8009e52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	bfc1      	itttt	gt
 8009e5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e62:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e6a:	bfda      	itte	le
 8009e6c:	f1c3 0320 	rsble	r3, r3, #32
 8009e70:	fa06 f003 	lslle.w	r0, r6, r3
 8009e74:	4318      	orrgt	r0, r3
 8009e76:	f7f6 fb6d 	bl	8000554 <__aeabi_ui2d>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e82:	3d01      	subs	r5, #1
 8009e84:	930e      	str	r3, [sp, #56]	; 0x38
 8009e86:	e76a      	b.n	8009d5e <_dtoa_r+0x116>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7b2      	b.n	8009df2 <_dtoa_r+0x1aa>
 8009e8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e8e:	e7b1      	b.n	8009df4 <_dtoa_r+0x1ac>
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	9a00      	ldr	r2, [sp, #0]
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	4253      	negs	r3, r2
 8009e9a:	9307      	str	r3, [sp, #28]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009ea0:	e7bf      	b.n	8009e22 <_dtoa_r+0x1da>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9308      	str	r3, [sp, #32]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc55      	bgt.n	8009f58 <_dtoa_r+0x310>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb6:	e00c      	b.n	8009ed2 <_dtoa_r+0x28a>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e7f3      	b.n	8009ea4 <_dtoa_r+0x25c>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	bfb8      	it	lt
 8009ed0:	2301      	movlt	r3, #1
 8009ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	6042      	str	r2, [r0, #4]
 8009ed8:	2204      	movs	r2, #4
 8009eda:	f102 0614 	add.w	r6, r2, #20
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	6841      	ldr	r1, [r0, #4]
 8009ee2:	d93d      	bls.n	8009f60 <_dtoa_r+0x318>
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fcb7 	bl	800a858 <_Balloc>
 8009eea:	9001      	str	r0, [sp, #4]
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d13b      	bne.n	8009f68 <_dtoa_r+0x320>
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <_dtoa_r+0x2f0>)
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ef8:	e6c0      	b.n	8009c7c <_dtoa_r+0x34>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e7df      	b.n	8009ebe <_dtoa_r+0x276>
 8009efe:	bf00      	nop
 8009f00:	636f4361 	.word	0x636f4361
 8009f04:	3fd287a7 	.word	0x3fd287a7
 8009f08:	8b60c8b3 	.word	0x8b60c8b3
 8009f0c:	3fc68a28 	.word	0x3fc68a28
 8009f10:	509f79fb 	.word	0x509f79fb
 8009f14:	3fd34413 	.word	0x3fd34413
 8009f18:	0800bdc5 	.word	0x0800bdc5
 8009f1c:	0800bddc 	.word	0x0800bddc
 8009f20:	7ff00000 	.word	0x7ff00000
 8009f24:	0800bdc1 	.word	0x0800bdc1
 8009f28:	0800bdb8 	.word	0x0800bdb8
 8009f2c:	0800bd95 	.word	0x0800bd95
 8009f30:	3ff80000 	.word	0x3ff80000
 8009f34:	0800bed0 	.word	0x0800bed0
 8009f38:	0800be37 	.word	0x0800be37
 8009f3c:	2501      	movs	r5, #1
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9306      	str	r3, [sp, #24]
 8009f42:	9508      	str	r5, [sp, #32]
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2312      	movs	r3, #18
 8009f50:	e7b0      	b.n	8009eb4 <_dtoa_r+0x26c>
 8009f52:	2301      	movs	r3, #1
 8009f54:	9308      	str	r3, [sp, #32]
 8009f56:	e7f5      	b.n	8009f44 <_dtoa_r+0x2fc>
 8009f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f5e:	e7b8      	b.n	8009ed2 <_dtoa_r+0x28a>
 8009f60:	3101      	adds	r1, #1
 8009f62:	6041      	str	r1, [r0, #4]
 8009f64:	0052      	lsls	r2, r2, #1
 8009f66:	e7b8      	b.n	8009eda <_dtoa_r+0x292>
 8009f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f6a:	9a01      	ldr	r2, [sp, #4]
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	2b0e      	cmp	r3, #14
 8009f72:	f200 809d 	bhi.w	800a0b0 <_dtoa_r+0x468>
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	f000 809a 	beq.w	800a0b0 <_dtoa_r+0x468>
 8009f7c:	9b00      	ldr	r3, [sp, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dd32      	ble.n	8009fe8 <_dtoa_r+0x3a0>
 8009f82:	4ab7      	ldr	r2, [pc, #732]	; (800a260 <_dtoa_r+0x618>)
 8009f84:	f003 030f 	and.w	r3, r3, #15
 8009f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f90:	9b00      	ldr	r3, [sp, #0]
 8009f92:	05d8      	lsls	r0, r3, #23
 8009f94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f98:	d516      	bpl.n	8009fc8 <_dtoa_r+0x380>
 8009f9a:	4bb2      	ldr	r3, [pc, #712]	; (800a264 <_dtoa_r+0x61c>)
 8009f9c:	ec51 0b19 	vmov	r0, r1, d9
 8009fa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fa4:	f7f6 fc7a 	bl	800089c <__aeabi_ddiv>
 8009fa8:	f007 070f 	and.w	r7, r7, #15
 8009fac:	4682      	mov	sl, r0
 8009fae:	468b      	mov	fp, r1
 8009fb0:	2503      	movs	r5, #3
 8009fb2:	4eac      	ldr	r6, [pc, #688]	; (800a264 <_dtoa_r+0x61c>)
 8009fb4:	b957      	cbnz	r7, 8009fcc <_dtoa_r+0x384>
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	464b      	mov	r3, r9
 8009fba:	4650      	mov	r0, sl
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	f7f6 fc6d 	bl	800089c <__aeabi_ddiv>
 8009fc2:	4682      	mov	sl, r0
 8009fc4:	468b      	mov	fp, r1
 8009fc6:	e028      	b.n	800a01a <_dtoa_r+0x3d2>
 8009fc8:	2502      	movs	r5, #2
 8009fca:	e7f2      	b.n	8009fb2 <_dtoa_r+0x36a>
 8009fcc:	07f9      	lsls	r1, r7, #31
 8009fce:	d508      	bpl.n	8009fe2 <_dtoa_r+0x39a>
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fd8:	f7f6 fb36 	bl	8000648 <__aeabi_dmul>
 8009fdc:	3501      	adds	r5, #1
 8009fde:	4680      	mov	r8, r0
 8009fe0:	4689      	mov	r9, r1
 8009fe2:	107f      	asrs	r7, r7, #1
 8009fe4:	3608      	adds	r6, #8
 8009fe6:	e7e5      	b.n	8009fb4 <_dtoa_r+0x36c>
 8009fe8:	f000 809b 	beq.w	800a122 <_dtoa_r+0x4da>
 8009fec:	9b00      	ldr	r3, [sp, #0]
 8009fee:	4f9d      	ldr	r7, [pc, #628]	; (800a264 <_dtoa_r+0x61c>)
 8009ff0:	425e      	negs	r6, r3
 8009ff2:	4b9b      	ldr	r3, [pc, #620]	; (800a260 <_dtoa_r+0x618>)
 8009ff4:	f006 020f 	and.w	r2, r6, #15
 8009ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	ec51 0b19 	vmov	r0, r1, d9
 800a004:	f7f6 fb20 	bl	8000648 <__aeabi_dmul>
 800a008:	1136      	asrs	r6, r6, #4
 800a00a:	4682      	mov	sl, r0
 800a00c:	468b      	mov	fp, r1
 800a00e:	2300      	movs	r3, #0
 800a010:	2502      	movs	r5, #2
 800a012:	2e00      	cmp	r6, #0
 800a014:	d17a      	bne.n	800a10c <_dtoa_r+0x4c4>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1d3      	bne.n	8009fc2 <_dtoa_r+0x37a>
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 8082 	beq.w	800a126 <_dtoa_r+0x4de>
 800a022:	4b91      	ldr	r3, [pc, #580]	; (800a268 <_dtoa_r+0x620>)
 800a024:	2200      	movs	r2, #0
 800a026:	4650      	mov	r0, sl
 800a028:	4659      	mov	r1, fp
 800a02a:	f7f6 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d079      	beq.n	800a126 <_dtoa_r+0x4de>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d076      	beq.n	800a126 <_dtoa_r+0x4de>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dd36      	ble.n	800a0ac <_dtoa_r+0x464>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	1e5f      	subs	r7, r3, #1
 800a046:	2200      	movs	r2, #0
 800a048:	4b88      	ldr	r3, [pc, #544]	; (800a26c <_dtoa_r+0x624>)
 800a04a:	f7f6 fafd 	bl	8000648 <__aeabi_dmul>
 800a04e:	9e02      	ldr	r6, [sp, #8]
 800a050:	4682      	mov	sl, r0
 800a052:	468b      	mov	fp, r1
 800a054:	3501      	adds	r5, #1
 800a056:	4628      	mov	r0, r5
 800a058:	f7f6 fa8c 	bl	8000574 <__aeabi_i2d>
 800a05c:	4652      	mov	r2, sl
 800a05e:	465b      	mov	r3, fp
 800a060:	f7f6 faf2 	bl	8000648 <__aeabi_dmul>
 800a064:	4b82      	ldr	r3, [pc, #520]	; (800a270 <_dtoa_r+0x628>)
 800a066:	2200      	movs	r2, #0
 800a068:	f7f6 f938 	bl	80002dc <__adddf3>
 800a06c:	46d0      	mov	r8, sl
 800a06e:	46d9      	mov	r9, fp
 800a070:	4682      	mov	sl, r0
 800a072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a076:	2e00      	cmp	r6, #0
 800a078:	d158      	bne.n	800a12c <_dtoa_r+0x4e4>
 800a07a:	4b7e      	ldr	r3, [pc, #504]	; (800a274 <_dtoa_r+0x62c>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	4640      	mov	r0, r8
 800a080:	4649      	mov	r1, r9
 800a082:	f7f6 f929 	bl	80002d8 <__aeabi_dsub>
 800a086:	4652      	mov	r2, sl
 800a088:	465b      	mov	r3, fp
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	f7f6 fd6b 	bl	8000b68 <__aeabi_dcmpgt>
 800a092:	2800      	cmp	r0, #0
 800a094:	f040 8295 	bne.w	800a5c2 <_dtoa_r+0x97a>
 800a098:	4652      	mov	r2, sl
 800a09a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 fd43 	bl	8000b2c <__aeabi_dcmplt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f040 8289 	bne.w	800a5be <_dtoa_r+0x976>
 800a0ac:	ec5b ab19 	vmov	sl, fp, d9
 800a0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f2c0 8148 	blt.w	800a348 <_dtoa_r+0x700>
 800a0b8:	9a00      	ldr	r2, [sp, #0]
 800a0ba:	2a0e      	cmp	r2, #14
 800a0bc:	f300 8144 	bgt.w	800a348 <_dtoa_r+0x700>
 800a0c0:	4b67      	ldr	r3, [pc, #412]	; (800a260 <_dtoa_r+0x618>)
 800a0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f280 80d5 	bge.w	800a27c <_dtoa_r+0x634>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f300 80d1 	bgt.w	800a27c <_dtoa_r+0x634>
 800a0da:	f040 826f 	bne.w	800a5bc <_dtoa_r+0x974>
 800a0de:	4b65      	ldr	r3, [pc, #404]	; (800a274 <_dtoa_r+0x62c>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 faaf 	bl	8000648 <__aeabi_dmul>
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	f7f6 fd31 	bl	8000b54 <__aeabi_dcmpge>
 800a0f2:	9e03      	ldr	r6, [sp, #12]
 800a0f4:	4637      	mov	r7, r6
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f040 8245 	bne.w	800a586 <_dtoa_r+0x93e>
 800a0fc:	9d01      	ldr	r5, [sp, #4]
 800a0fe:	2331      	movs	r3, #49	; 0x31
 800a100:	f805 3b01 	strb.w	r3, [r5], #1
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	e240      	b.n	800a58e <_dtoa_r+0x946>
 800a10c:	07f2      	lsls	r2, r6, #31
 800a10e:	d505      	bpl.n	800a11c <_dtoa_r+0x4d4>
 800a110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a114:	f7f6 fa98 	bl	8000648 <__aeabi_dmul>
 800a118:	3501      	adds	r5, #1
 800a11a:	2301      	movs	r3, #1
 800a11c:	1076      	asrs	r6, r6, #1
 800a11e:	3708      	adds	r7, #8
 800a120:	e777      	b.n	800a012 <_dtoa_r+0x3ca>
 800a122:	2502      	movs	r5, #2
 800a124:	e779      	b.n	800a01a <_dtoa_r+0x3d2>
 800a126:	9f00      	ldr	r7, [sp, #0]
 800a128:	9e03      	ldr	r6, [sp, #12]
 800a12a:	e794      	b.n	800a056 <_dtoa_r+0x40e>
 800a12c:	9901      	ldr	r1, [sp, #4]
 800a12e:	4b4c      	ldr	r3, [pc, #304]	; (800a260 <_dtoa_r+0x618>)
 800a130:	4431      	add	r1, r6
 800a132:	910d      	str	r1, [sp, #52]	; 0x34
 800a134:	9908      	ldr	r1, [sp, #32]
 800a136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a13a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d043      	beq.n	800a1ca <_dtoa_r+0x582>
 800a142:	494d      	ldr	r1, [pc, #308]	; (800a278 <_dtoa_r+0x630>)
 800a144:	2000      	movs	r0, #0
 800a146:	f7f6 fba9 	bl	800089c <__aeabi_ddiv>
 800a14a:	4652      	mov	r2, sl
 800a14c:	465b      	mov	r3, fp
 800a14e:	f7f6 f8c3 	bl	80002d8 <__aeabi_dsub>
 800a152:	9d01      	ldr	r5, [sp, #4]
 800a154:	4682      	mov	sl, r0
 800a156:	468b      	mov	fp, r1
 800a158:	4649      	mov	r1, r9
 800a15a:	4640      	mov	r0, r8
 800a15c:	f7f6 fd24 	bl	8000ba8 <__aeabi_d2iz>
 800a160:	4606      	mov	r6, r0
 800a162:	f7f6 fa07 	bl	8000574 <__aeabi_i2d>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f6 f8b3 	bl	80002d8 <__aeabi_dsub>
 800a172:	3630      	adds	r6, #48	; 0x30
 800a174:	f805 6b01 	strb.w	r6, [r5], #1
 800a178:	4652      	mov	r2, sl
 800a17a:	465b      	mov	r3, fp
 800a17c:	4680      	mov	r8, r0
 800a17e:	4689      	mov	r9, r1
 800a180:	f7f6 fcd4 	bl	8000b2c <__aeabi_dcmplt>
 800a184:	2800      	cmp	r0, #0
 800a186:	d163      	bne.n	800a250 <_dtoa_r+0x608>
 800a188:	4642      	mov	r2, r8
 800a18a:	464b      	mov	r3, r9
 800a18c:	4936      	ldr	r1, [pc, #216]	; (800a268 <_dtoa_r+0x620>)
 800a18e:	2000      	movs	r0, #0
 800a190:	f7f6 f8a2 	bl	80002d8 <__aeabi_dsub>
 800a194:	4652      	mov	r2, sl
 800a196:	465b      	mov	r3, fp
 800a198:	f7f6 fcc8 	bl	8000b2c <__aeabi_dcmplt>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f040 80b5 	bne.w	800a30c <_dtoa_r+0x6c4>
 800a1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a4:	429d      	cmp	r5, r3
 800a1a6:	d081      	beq.n	800a0ac <_dtoa_r+0x464>
 800a1a8:	4b30      	ldr	r3, [pc, #192]	; (800a26c <_dtoa_r+0x624>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	f7f6 fa4a 	bl	8000648 <__aeabi_dmul>
 800a1b4:	4b2d      	ldr	r3, [pc, #180]	; (800a26c <_dtoa_r+0x624>)
 800a1b6:	4682      	mov	sl, r0
 800a1b8:	468b      	mov	fp, r1
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f7f6 fa42 	bl	8000648 <__aeabi_dmul>
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	e7c6      	b.n	800a158 <_dtoa_r+0x510>
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	f7f6 fa3b 	bl	8000648 <__aeabi_dmul>
 800a1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d4:	9d01      	ldr	r5, [sp, #4]
 800a1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4640      	mov	r0, r8
 800a1e0:	f7f6 fce2 	bl	8000ba8 <__aeabi_d2iz>
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	f7f6 f9c5 	bl	8000574 <__aeabi_i2d>
 800a1ea:	3630      	adds	r6, #48	; 0x30
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	f7f6 f870 	bl	80002d8 <__aeabi_dsub>
 800a1f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a1fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1fe:	429d      	cmp	r5, r3
 800a200:	4680      	mov	r8, r0
 800a202:	4689      	mov	r9, r1
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	d124      	bne.n	800a254 <_dtoa_r+0x60c>
 800a20a:	4b1b      	ldr	r3, [pc, #108]	; (800a278 <_dtoa_r+0x630>)
 800a20c:	4650      	mov	r0, sl
 800a20e:	4659      	mov	r1, fp
 800a210:	f7f6 f864 	bl	80002dc <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4640      	mov	r0, r8
 800a21a:	4649      	mov	r1, r9
 800a21c:	f7f6 fca4 	bl	8000b68 <__aeabi_dcmpgt>
 800a220:	2800      	cmp	r0, #0
 800a222:	d173      	bne.n	800a30c <_dtoa_r+0x6c4>
 800a224:	4652      	mov	r2, sl
 800a226:	465b      	mov	r3, fp
 800a228:	4913      	ldr	r1, [pc, #76]	; (800a278 <_dtoa_r+0x630>)
 800a22a:	2000      	movs	r0, #0
 800a22c:	f7f6 f854 	bl	80002d8 <__aeabi_dsub>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f6 fc78 	bl	8000b2c <__aeabi_dcmplt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f43f af35 	beq.w	800a0ac <_dtoa_r+0x464>
 800a242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a244:	1e6b      	subs	r3, r5, #1
 800a246:	930f      	str	r3, [sp, #60]	; 0x3c
 800a248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a24c:	2b30      	cmp	r3, #48	; 0x30
 800a24e:	d0f8      	beq.n	800a242 <_dtoa_r+0x5fa>
 800a250:	9700      	str	r7, [sp, #0]
 800a252:	e049      	b.n	800a2e8 <_dtoa_r+0x6a0>
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <_dtoa_r+0x624>)
 800a256:	f7f6 f9f7 	bl	8000648 <__aeabi_dmul>
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	e7bd      	b.n	800a1dc <_dtoa_r+0x594>
 800a260:	0800bed0 	.word	0x0800bed0
 800a264:	0800bea8 	.word	0x0800bea8
 800a268:	3ff00000 	.word	0x3ff00000
 800a26c:	40240000 	.word	0x40240000
 800a270:	401c0000 	.word	0x401c0000
 800a274:	40140000 	.word	0x40140000
 800a278:	3fe00000 	.word	0x3fe00000
 800a27c:	9d01      	ldr	r5, [sp, #4]
 800a27e:	4656      	mov	r6, sl
 800a280:	465f      	mov	r7, fp
 800a282:	4642      	mov	r2, r8
 800a284:	464b      	mov	r3, r9
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f6 fb07 	bl	800089c <__aeabi_ddiv>
 800a28e:	f7f6 fc8b 	bl	8000ba8 <__aeabi_d2iz>
 800a292:	4682      	mov	sl, r0
 800a294:	f7f6 f96e 	bl	8000574 <__aeabi_i2d>
 800a298:	4642      	mov	r2, r8
 800a29a:	464b      	mov	r3, r9
 800a29c:	f7f6 f9d4 	bl	8000648 <__aeabi_dmul>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a2ac:	f7f6 f814 	bl	80002d8 <__aeabi_dsub>
 800a2b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2b4:	9e01      	ldr	r6, [sp, #4]
 800a2b6:	9f03      	ldr	r7, [sp, #12]
 800a2b8:	1bae      	subs	r6, r5, r6
 800a2ba:	42b7      	cmp	r7, r6
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	d135      	bne.n	800a32e <_dtoa_r+0x6e6>
 800a2c2:	f7f6 f80b 	bl	80002dc <__adddf3>
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	f7f6 fc4b 	bl	8000b68 <__aeabi_dcmpgt>
 800a2d2:	b9d0      	cbnz	r0, 800a30a <_dtoa_r+0x6c2>
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	464b      	mov	r3, r9
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 fc1c 	bl	8000b18 <__aeabi_dcmpeq>
 800a2e0:	b110      	cbz	r0, 800a2e8 <_dtoa_r+0x6a0>
 800a2e2:	f01a 0f01 	tst.w	sl, #1
 800a2e6:	d110      	bne.n	800a30a <_dtoa_r+0x6c2>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	ee18 1a10 	vmov	r1, s16
 800a2ee:	f000 faf3 	bl	800a8d8 <_Bfree>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9800      	ldr	r0, [sp, #0]
 800a2f6:	702b      	strb	r3, [r5, #0]
 800a2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	6018      	str	r0, [r3, #0]
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	f43f acf1 	beq.w	8009ce8 <_dtoa_r+0xa0>
 800a306:	601d      	str	r5, [r3, #0]
 800a308:	e4ee      	b.n	8009ce8 <_dtoa_r+0xa0>
 800a30a:	9f00      	ldr	r7, [sp, #0]
 800a30c:	462b      	mov	r3, r5
 800a30e:	461d      	mov	r5, r3
 800a310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a314:	2a39      	cmp	r2, #57	; 0x39
 800a316:	d106      	bne.n	800a326 <_dtoa_r+0x6de>
 800a318:	9a01      	ldr	r2, [sp, #4]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d1f7      	bne.n	800a30e <_dtoa_r+0x6c6>
 800a31e:	9901      	ldr	r1, [sp, #4]
 800a320:	2230      	movs	r2, #48	; 0x30
 800a322:	3701      	adds	r7, #1
 800a324:	700a      	strb	r2, [r1, #0]
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	3201      	adds	r2, #1
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	e790      	b.n	800a250 <_dtoa_r+0x608>
 800a32e:	4ba6      	ldr	r3, [pc, #664]	; (800a5c8 <_dtoa_r+0x980>)
 800a330:	2200      	movs	r2, #0
 800a332:	f7f6 f989 	bl	8000648 <__aeabi_dmul>
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	f7f6 fbeb 	bl	8000b18 <__aeabi_dcmpeq>
 800a342:	2800      	cmp	r0, #0
 800a344:	d09d      	beq.n	800a282 <_dtoa_r+0x63a>
 800a346:	e7cf      	b.n	800a2e8 <_dtoa_r+0x6a0>
 800a348:	9a08      	ldr	r2, [sp, #32]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	f000 80d7 	beq.w	800a4fe <_dtoa_r+0x8b6>
 800a350:	9a06      	ldr	r2, [sp, #24]
 800a352:	2a01      	cmp	r2, #1
 800a354:	f300 80ba 	bgt.w	800a4cc <_dtoa_r+0x884>
 800a358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	f000 80b2 	beq.w	800a4c4 <_dtoa_r+0x87c>
 800a360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a364:	9e07      	ldr	r6, [sp, #28]
 800a366:	9d04      	ldr	r5, [sp, #16]
 800a368:	9a04      	ldr	r2, [sp, #16]
 800a36a:	441a      	add	r2, r3
 800a36c:	9204      	str	r2, [sp, #16]
 800a36e:	9a05      	ldr	r2, [sp, #20]
 800a370:	2101      	movs	r1, #1
 800a372:	441a      	add	r2, r3
 800a374:	4620      	mov	r0, r4
 800a376:	9205      	str	r2, [sp, #20]
 800a378:	f000 fb66 	bl	800aa48 <__i2b>
 800a37c:	4607      	mov	r7, r0
 800a37e:	2d00      	cmp	r5, #0
 800a380:	dd0c      	ble.n	800a39c <_dtoa_r+0x754>
 800a382:	9b05      	ldr	r3, [sp, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	dd09      	ble.n	800a39c <_dtoa_r+0x754>
 800a388:	42ab      	cmp	r3, r5
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	bfa8      	it	ge
 800a38e:	462b      	movge	r3, r5
 800a390:	1ad2      	subs	r2, r2, r3
 800a392:	9204      	str	r2, [sp, #16]
 800a394:	9a05      	ldr	r2, [sp, #20]
 800a396:	1aed      	subs	r5, r5, r3
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	b31b      	cbz	r3, 800a3e8 <_dtoa_r+0x7a0>
 800a3a0:	9b08      	ldr	r3, [sp, #32]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 80af 	beq.w	800a506 <_dtoa_r+0x8be>
 800a3a8:	2e00      	cmp	r6, #0
 800a3aa:	dd13      	ble.n	800a3d4 <_dtoa_r+0x78c>
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fc09 	bl	800abc8 <__pow5mult>
 800a3b6:	ee18 2a10 	vmov	r2, s16
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4607      	mov	r7, r0
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f000 fb58 	bl	800aa74 <__multiply>
 800a3c4:	ee18 1a10 	vmov	r1, s16
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fa84 	bl	800a8d8 <_Bfree>
 800a3d0:	ee08 8a10 	vmov	s16, r8
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	1b9a      	subs	r2, r3, r6
 800a3d8:	d006      	beq.n	800a3e8 <_dtoa_r+0x7a0>
 800a3da:	ee18 1a10 	vmov	r1, s16
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fbf2 	bl	800abc8 <__pow5mult>
 800a3e4:	ee08 0a10 	vmov	s16, r0
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fb2c 	bl	800aa48 <__i2b>
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	f340 8088 	ble.w	800a50a <_dtoa_r+0x8c2>
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 fbe2 	bl	800abc8 <__pow5mult>
 800a404:	9b06      	ldr	r3, [sp, #24]
 800a406:	2b01      	cmp	r3, #1
 800a408:	4606      	mov	r6, r0
 800a40a:	f340 8081 	ble.w	800a510 <_dtoa_r+0x8c8>
 800a40e:	f04f 0800 	mov.w	r8, #0
 800a412:	6933      	ldr	r3, [r6, #16]
 800a414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a418:	6918      	ldr	r0, [r3, #16]
 800a41a:	f000 fac5 	bl	800a9a8 <__hi0bits>
 800a41e:	f1c0 0020 	rsb	r0, r0, #32
 800a422:	9b05      	ldr	r3, [sp, #20]
 800a424:	4418      	add	r0, r3
 800a426:	f010 001f 	ands.w	r0, r0, #31
 800a42a:	f000 8092 	beq.w	800a552 <_dtoa_r+0x90a>
 800a42e:	f1c0 0320 	rsb	r3, r0, #32
 800a432:	2b04      	cmp	r3, #4
 800a434:	f340 808a 	ble.w	800a54c <_dtoa_r+0x904>
 800a438:	f1c0 001c 	rsb	r0, r0, #28
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4403      	add	r3, r0
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	9b05      	ldr	r3, [sp, #20]
 800a444:	4403      	add	r3, r0
 800a446:	4405      	add	r5, r0
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dd07      	ble.n	800a460 <_dtoa_r+0x818>
 800a450:	ee18 1a10 	vmov	r1, s16
 800a454:	461a      	mov	r2, r3
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fc10 	bl	800ac7c <__lshift>
 800a45c:	ee08 0a10 	vmov	s16, r0
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd05      	ble.n	800a472 <_dtoa_r+0x82a>
 800a466:	4631      	mov	r1, r6
 800a468:	461a      	mov	r2, r3
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 fc06 	bl	800ac7c <__lshift>
 800a470:	4606      	mov	r6, r0
 800a472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d06e      	beq.n	800a556 <_dtoa_r+0x90e>
 800a478:	ee18 0a10 	vmov	r0, s16
 800a47c:	4631      	mov	r1, r6
 800a47e:	f000 fc6d 	bl	800ad5c <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	da67      	bge.n	800a556 <_dtoa_r+0x90e>
 800a486:	9b00      	ldr	r3, [sp, #0]
 800a488:	3b01      	subs	r3, #1
 800a48a:	ee18 1a10 	vmov	r1, s16
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	220a      	movs	r2, #10
 800a492:	2300      	movs	r3, #0
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fa41 	bl	800a91c <__multadd>
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	ee08 0a10 	vmov	s16, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 81b1 	beq.w	800a808 <_dtoa_r+0xbc0>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fa35 	bl	800a91c <__multadd>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	f300 808e 	bgt.w	800a5d8 <_dtoa_r+0x990>
 800a4bc:	9b06      	ldr	r3, [sp, #24]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	dc51      	bgt.n	800a566 <_dtoa_r+0x91e>
 800a4c2:	e089      	b.n	800a5d8 <_dtoa_r+0x990>
 800a4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4ca:	e74b      	b.n	800a364 <_dtoa_r+0x71c>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	1e5e      	subs	r6, r3, #1
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	42b3      	cmp	r3, r6
 800a4d4:	bfbf      	itttt	lt
 800a4d6:	9b07      	ldrlt	r3, [sp, #28]
 800a4d8:	9607      	strlt	r6, [sp, #28]
 800a4da:	1af2      	sublt	r2, r6, r3
 800a4dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4de:	bfb6      	itet	lt
 800a4e0:	189b      	addlt	r3, r3, r2
 800a4e2:	1b9e      	subge	r6, r3, r6
 800a4e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	bfb8      	it	lt
 800a4ea:	2600      	movlt	r6, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfb7      	itett	lt
 800a4f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4f8:	1a9d      	sublt	r5, r3, r2
 800a4fa:	2300      	movlt	r3, #0
 800a4fc:	e734      	b.n	800a368 <_dtoa_r+0x720>
 800a4fe:	9e07      	ldr	r6, [sp, #28]
 800a500:	9d04      	ldr	r5, [sp, #16]
 800a502:	9f08      	ldr	r7, [sp, #32]
 800a504:	e73b      	b.n	800a37e <_dtoa_r+0x736>
 800a506:	9a07      	ldr	r2, [sp, #28]
 800a508:	e767      	b.n	800a3da <_dtoa_r+0x792>
 800a50a:	9b06      	ldr	r3, [sp, #24]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	dc18      	bgt.n	800a542 <_dtoa_r+0x8fa>
 800a510:	f1ba 0f00 	cmp.w	sl, #0
 800a514:	d115      	bne.n	800a542 <_dtoa_r+0x8fa>
 800a516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a51a:	b993      	cbnz	r3, 800a542 <_dtoa_r+0x8fa>
 800a51c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a520:	0d1b      	lsrs	r3, r3, #20
 800a522:	051b      	lsls	r3, r3, #20
 800a524:	b183      	cbz	r3, 800a548 <_dtoa_r+0x900>
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	3301      	adds	r3, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	9b05      	ldr	r3, [sp, #20]
 800a52e:	3301      	adds	r3, #1
 800a530:	9305      	str	r3, [sp, #20]
 800a532:	f04f 0801 	mov.w	r8, #1
 800a536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f47f af6a 	bne.w	800a412 <_dtoa_r+0x7ca>
 800a53e:	2001      	movs	r0, #1
 800a540:	e76f      	b.n	800a422 <_dtoa_r+0x7da>
 800a542:	f04f 0800 	mov.w	r8, #0
 800a546:	e7f6      	b.n	800a536 <_dtoa_r+0x8ee>
 800a548:	4698      	mov	r8, r3
 800a54a:	e7f4      	b.n	800a536 <_dtoa_r+0x8ee>
 800a54c:	f43f af7d 	beq.w	800a44a <_dtoa_r+0x802>
 800a550:	4618      	mov	r0, r3
 800a552:	301c      	adds	r0, #28
 800a554:	e772      	b.n	800a43c <_dtoa_r+0x7f4>
 800a556:	9b03      	ldr	r3, [sp, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc37      	bgt.n	800a5cc <_dtoa_r+0x984>
 800a55c:	9b06      	ldr	r3, [sp, #24]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	dd34      	ble.n	800a5cc <_dtoa_r+0x984>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	9302      	str	r3, [sp, #8]
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	b96b      	cbnz	r3, 800a586 <_dtoa_r+0x93e>
 800a56a:	4631      	mov	r1, r6
 800a56c:	2205      	movs	r2, #5
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 f9d4 	bl	800a91c <__multadd>
 800a574:	4601      	mov	r1, r0
 800a576:	4606      	mov	r6, r0
 800a578:	ee18 0a10 	vmov	r0, s16
 800a57c:	f000 fbee 	bl	800ad5c <__mcmp>
 800a580:	2800      	cmp	r0, #0
 800a582:	f73f adbb 	bgt.w	800a0fc <_dtoa_r+0x4b4>
 800a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a588:	9d01      	ldr	r5, [sp, #4]
 800a58a:	43db      	mvns	r3, r3
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	4631      	mov	r1, r6
 800a594:	4620      	mov	r0, r4
 800a596:	f000 f99f 	bl	800a8d8 <_Bfree>
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	f43f aea4 	beq.w	800a2e8 <_dtoa_r+0x6a0>
 800a5a0:	f1b8 0f00 	cmp.w	r8, #0
 800a5a4:	d005      	beq.n	800a5b2 <_dtoa_r+0x96a>
 800a5a6:	45b8      	cmp	r8, r7
 800a5a8:	d003      	beq.n	800a5b2 <_dtoa_r+0x96a>
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 f993 	bl	800a8d8 <_Bfree>
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 f98f 	bl	800a8d8 <_Bfree>
 800a5ba:	e695      	b.n	800a2e8 <_dtoa_r+0x6a0>
 800a5bc:	2600      	movs	r6, #0
 800a5be:	4637      	mov	r7, r6
 800a5c0:	e7e1      	b.n	800a586 <_dtoa_r+0x93e>
 800a5c2:	9700      	str	r7, [sp, #0]
 800a5c4:	4637      	mov	r7, r6
 800a5c6:	e599      	b.n	800a0fc <_dtoa_r+0x4b4>
 800a5c8:	40240000 	.word	0x40240000
 800a5cc:	9b08      	ldr	r3, [sp, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80ca 	beq.w	800a768 <_dtoa_r+0xb20>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	dd05      	ble.n	800a5e8 <_dtoa_r+0x9a0>
 800a5dc:	4639      	mov	r1, r7
 800a5de:	462a      	mov	r2, r5
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 fb4b 	bl	800ac7c <__lshift>
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	f1b8 0f00 	cmp.w	r8, #0
 800a5ec:	d05b      	beq.n	800a6a6 <_dtoa_r+0xa5e>
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 f931 	bl	800a858 <_Balloc>
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	b928      	cbnz	r0, 800a606 <_dtoa_r+0x9be>
 800a5fa:	4b87      	ldr	r3, [pc, #540]	; (800a818 <_dtoa_r+0xbd0>)
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a602:	f7ff bb3b 	b.w	8009c7c <_dtoa_r+0x34>
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	3202      	adds	r2, #2
 800a60a:	0092      	lsls	r2, r2, #2
 800a60c:	f107 010c 	add.w	r1, r7, #12
 800a610:	300c      	adds	r0, #12
 800a612:	f000 f913 	bl	800a83c <memcpy>
 800a616:	2201      	movs	r2, #1
 800a618:	4629      	mov	r1, r5
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fb2e 	bl	800ac7c <__lshift>
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	f103 0901 	add.w	r9, r3, #1
 800a626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a62a:	4413      	add	r3, r2
 800a62c:	9305      	str	r3, [sp, #20]
 800a62e:	f00a 0301 	and.w	r3, sl, #1
 800a632:	46b8      	mov	r8, r7
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	4607      	mov	r7, r0
 800a638:	4631      	mov	r1, r6
 800a63a:	ee18 0a10 	vmov	r0, s16
 800a63e:	f7ff fa75 	bl	8009b2c <quorem>
 800a642:	4641      	mov	r1, r8
 800a644:	9002      	str	r0, [sp, #8]
 800a646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a64a:	ee18 0a10 	vmov	r0, s16
 800a64e:	f000 fb85 	bl	800ad5c <__mcmp>
 800a652:	463a      	mov	r2, r7
 800a654:	9003      	str	r0, [sp, #12]
 800a656:	4631      	mov	r1, r6
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fb9b 	bl	800ad94 <__mdiff>
 800a65e:	68c2      	ldr	r2, [r0, #12]
 800a660:	f109 3bff 	add.w	fp, r9, #4294967295
 800a664:	4605      	mov	r5, r0
 800a666:	bb02      	cbnz	r2, 800a6aa <_dtoa_r+0xa62>
 800a668:	4601      	mov	r1, r0
 800a66a:	ee18 0a10 	vmov	r0, s16
 800a66e:	f000 fb75 	bl	800ad5c <__mcmp>
 800a672:	4602      	mov	r2, r0
 800a674:	4629      	mov	r1, r5
 800a676:	4620      	mov	r0, r4
 800a678:	9207      	str	r2, [sp, #28]
 800a67a:	f000 f92d 	bl	800a8d8 <_Bfree>
 800a67e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a682:	ea43 0102 	orr.w	r1, r3, r2
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	430b      	orrs	r3, r1
 800a68a:	464d      	mov	r5, r9
 800a68c:	d10f      	bne.n	800a6ae <_dtoa_r+0xa66>
 800a68e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a692:	d02a      	beq.n	800a6ea <_dtoa_r+0xaa2>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	dd02      	ble.n	800a6a0 <_dtoa_r+0xa58>
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a6a0:	f88b a000 	strb.w	sl, [fp]
 800a6a4:	e775      	b.n	800a592 <_dtoa_r+0x94a>
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	e7ba      	b.n	800a620 <_dtoa_r+0x9d8>
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	e7e2      	b.n	800a674 <_dtoa_r+0xa2c>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	db04      	blt.n	800a6be <_dtoa_r+0xa76>
 800a6b4:	9906      	ldr	r1, [sp, #24]
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	9904      	ldr	r1, [sp, #16]
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	d122      	bne.n	800a704 <_dtoa_r+0xabc>
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	ddee      	ble.n	800a6a0 <_dtoa_r+0xa58>
 800a6c2:	ee18 1a10 	vmov	r1, s16
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fad7 	bl	800ac7c <__lshift>
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	ee08 0a10 	vmov	s16, r0
 800a6d4:	f000 fb42 	bl	800ad5c <__mcmp>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	dc03      	bgt.n	800a6e4 <_dtoa_r+0xa9c>
 800a6dc:	d1e0      	bne.n	800a6a0 <_dtoa_r+0xa58>
 800a6de:	f01a 0f01 	tst.w	sl, #1
 800a6e2:	d0dd      	beq.n	800a6a0 <_dtoa_r+0xa58>
 800a6e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6e8:	d1d7      	bne.n	800a69a <_dtoa_r+0xa52>
 800a6ea:	2339      	movs	r3, #57	; 0x39
 800a6ec:	f88b 3000 	strb.w	r3, [fp]
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6fa:	2a39      	cmp	r2, #57	; 0x39
 800a6fc:	d071      	beq.n	800a7e2 <_dtoa_r+0xb9a>
 800a6fe:	3201      	adds	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
 800a702:	e746      	b.n	800a592 <_dtoa_r+0x94a>
 800a704:	2a00      	cmp	r2, #0
 800a706:	dd07      	ble.n	800a718 <_dtoa_r+0xad0>
 800a708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a70c:	d0ed      	beq.n	800a6ea <_dtoa_r+0xaa2>
 800a70e:	f10a 0301 	add.w	r3, sl, #1
 800a712:	f88b 3000 	strb.w	r3, [fp]
 800a716:	e73c      	b.n	800a592 <_dtoa_r+0x94a>
 800a718:	9b05      	ldr	r3, [sp, #20]
 800a71a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a71e:	4599      	cmp	r9, r3
 800a720:	d047      	beq.n	800a7b2 <_dtoa_r+0xb6a>
 800a722:	ee18 1a10 	vmov	r1, s16
 800a726:	2300      	movs	r3, #0
 800a728:	220a      	movs	r2, #10
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f8f6 	bl	800a91c <__multadd>
 800a730:	45b8      	cmp	r8, r7
 800a732:	ee08 0a10 	vmov	s16, r0
 800a736:	f04f 0300 	mov.w	r3, #0
 800a73a:	f04f 020a 	mov.w	r2, #10
 800a73e:	4641      	mov	r1, r8
 800a740:	4620      	mov	r0, r4
 800a742:	d106      	bne.n	800a752 <_dtoa_r+0xb0a>
 800a744:	f000 f8ea 	bl	800a91c <__multadd>
 800a748:	4680      	mov	r8, r0
 800a74a:	4607      	mov	r7, r0
 800a74c:	f109 0901 	add.w	r9, r9, #1
 800a750:	e772      	b.n	800a638 <_dtoa_r+0x9f0>
 800a752:	f000 f8e3 	bl	800a91c <__multadd>
 800a756:	4639      	mov	r1, r7
 800a758:	4680      	mov	r8, r0
 800a75a:	2300      	movs	r3, #0
 800a75c:	220a      	movs	r2, #10
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 f8dc 	bl	800a91c <__multadd>
 800a764:	4607      	mov	r7, r0
 800a766:	e7f1      	b.n	800a74c <_dtoa_r+0xb04>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	9d01      	ldr	r5, [sp, #4]
 800a76e:	ee18 0a10 	vmov	r0, s16
 800a772:	4631      	mov	r1, r6
 800a774:	f7ff f9da 	bl	8009b2c <quorem>
 800a778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	f805 ab01 	strb.w	sl, [r5], #1
 800a782:	1aea      	subs	r2, r5, r3
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	4293      	cmp	r3, r2
 800a788:	dd09      	ble.n	800a79e <_dtoa_r+0xb56>
 800a78a:	ee18 1a10 	vmov	r1, s16
 800a78e:	2300      	movs	r3, #0
 800a790:	220a      	movs	r2, #10
 800a792:	4620      	mov	r0, r4
 800a794:	f000 f8c2 	bl	800a91c <__multadd>
 800a798:	ee08 0a10 	vmov	s16, r0
 800a79c:	e7e7      	b.n	800a76e <_dtoa_r+0xb26>
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bfc8      	it	gt
 800a7a4:	461d      	movgt	r5, r3
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	bfd8      	it	le
 800a7aa:	2501      	movle	r5, #1
 800a7ac:	441d      	add	r5, r3
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	ee18 1a10 	vmov	r1, s16
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fa5f 	bl	800ac7c <__lshift>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	ee08 0a10 	vmov	s16, r0
 800a7c4:	f000 faca 	bl	800ad5c <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	dc91      	bgt.n	800a6f0 <_dtoa_r+0xaa8>
 800a7cc:	d102      	bne.n	800a7d4 <_dtoa_r+0xb8c>
 800a7ce:	f01a 0f01 	tst.w	sl, #1
 800a7d2:	d18d      	bne.n	800a6f0 <_dtoa_r+0xaa8>
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	461d      	mov	r5, r3
 800a7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7dc:	2a30      	cmp	r2, #48	; 0x30
 800a7de:	d0fa      	beq.n	800a7d6 <_dtoa_r+0xb8e>
 800a7e0:	e6d7      	b.n	800a592 <_dtoa_r+0x94a>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d184      	bne.n	800a6f2 <_dtoa_r+0xaaa>
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	2331      	movs	r3, #49	; 0x31
 800a7f0:	7013      	strb	r3, [r2, #0]
 800a7f2:	e6ce      	b.n	800a592 <_dtoa_r+0x94a>
 800a7f4:	4b09      	ldr	r3, [pc, #36]	; (800a81c <_dtoa_r+0xbd4>)
 800a7f6:	f7ff ba95 	b.w	8009d24 <_dtoa_r+0xdc>
 800a7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f47f aa6e 	bne.w	8009cde <_dtoa_r+0x96>
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <_dtoa_r+0xbd8>)
 800a804:	f7ff ba8e 	b.w	8009d24 <_dtoa_r+0xdc>
 800a808:	9b02      	ldr	r3, [sp, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dcae      	bgt.n	800a76c <_dtoa_r+0xb24>
 800a80e:	9b06      	ldr	r3, [sp, #24]
 800a810:	2b02      	cmp	r3, #2
 800a812:	f73f aea8 	bgt.w	800a566 <_dtoa_r+0x91e>
 800a816:	e7a9      	b.n	800a76c <_dtoa_r+0xb24>
 800a818:	0800be37 	.word	0x0800be37
 800a81c:	0800bd94 	.word	0x0800bd94
 800a820:	0800bdb8 	.word	0x0800bdb8

0800a824 <_localeconv_r>:
 800a824:	4800      	ldr	r0, [pc, #0]	; (800a828 <_localeconv_r+0x4>)
 800a826:	4770      	bx	lr
 800a828:	200001f0 	.word	0x200001f0

0800a82c <malloc>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <malloc+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 bc17 	b.w	800b064 <_malloc_r>
 800a836:	bf00      	nop
 800a838:	2000009c 	.word	0x2000009c

0800a83c <memcpy>:
 800a83c:	440a      	add	r2, r1
 800a83e:	4291      	cmp	r1, r2
 800a840:	f100 33ff 	add.w	r3, r0, #4294967295
 800a844:	d100      	bne.n	800a848 <memcpy+0xc>
 800a846:	4770      	bx	lr
 800a848:	b510      	push	{r4, lr}
 800a84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a84e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a852:	4291      	cmp	r1, r2
 800a854:	d1f9      	bne.n	800a84a <memcpy+0xe>
 800a856:	bd10      	pop	{r4, pc}

0800a858 <_Balloc>:
 800a858:	b570      	push	{r4, r5, r6, lr}
 800a85a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a85c:	4604      	mov	r4, r0
 800a85e:	460d      	mov	r5, r1
 800a860:	b976      	cbnz	r6, 800a880 <_Balloc+0x28>
 800a862:	2010      	movs	r0, #16
 800a864:	f7ff ffe2 	bl	800a82c <malloc>
 800a868:	4602      	mov	r2, r0
 800a86a:	6260      	str	r0, [r4, #36]	; 0x24
 800a86c:	b920      	cbnz	r0, 800a878 <_Balloc+0x20>
 800a86e:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <_Balloc+0x78>)
 800a870:	4818      	ldr	r0, [pc, #96]	; (800a8d4 <_Balloc+0x7c>)
 800a872:	2166      	movs	r1, #102	; 0x66
 800a874:	f000 fc7a 	bl	800b16c <__assert_func>
 800a878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a87c:	6006      	str	r6, [r0, #0]
 800a87e:	60c6      	str	r6, [r0, #12]
 800a880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a882:	68f3      	ldr	r3, [r6, #12]
 800a884:	b183      	cbz	r3, 800a8a8 <_Balloc+0x50>
 800a886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a88e:	b9b8      	cbnz	r0, 800a8c0 <_Balloc+0x68>
 800a890:	2101      	movs	r1, #1
 800a892:	fa01 f605 	lsl.w	r6, r1, r5
 800a896:	1d72      	adds	r2, r6, #5
 800a898:	0092      	lsls	r2, r2, #2
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fb60 	bl	800af60 <_calloc_r>
 800a8a0:	b160      	cbz	r0, 800a8bc <_Balloc+0x64>
 800a8a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8a6:	e00e      	b.n	800a8c6 <_Balloc+0x6e>
 800a8a8:	2221      	movs	r2, #33	; 0x21
 800a8aa:	2104      	movs	r1, #4
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fb57 	bl	800af60 <_calloc_r>
 800a8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b4:	60f0      	str	r0, [r6, #12]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1e4      	bne.n	800a886 <_Balloc+0x2e>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	6802      	ldr	r2, [r0, #0]
 800a8c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8cc:	e7f7      	b.n	800a8be <_Balloc+0x66>
 800a8ce:	bf00      	nop
 800a8d0:	0800bdc5 	.word	0x0800bdc5
 800a8d4:	0800be48 	.word	0x0800be48

0800a8d8 <_Bfree>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8dc:	4605      	mov	r5, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	b976      	cbnz	r6, 800a900 <_Bfree+0x28>
 800a8e2:	2010      	movs	r0, #16
 800a8e4:	f7ff ffa2 	bl	800a82c <malloc>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	6268      	str	r0, [r5, #36]	; 0x24
 800a8ec:	b920      	cbnz	r0, 800a8f8 <_Bfree+0x20>
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <_Bfree+0x3c>)
 800a8f0:	4809      	ldr	r0, [pc, #36]	; (800a918 <_Bfree+0x40>)
 800a8f2:	218a      	movs	r1, #138	; 0x8a
 800a8f4:	f000 fc3a 	bl	800b16c <__assert_func>
 800a8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8fc:	6006      	str	r6, [r0, #0]
 800a8fe:	60c6      	str	r6, [r0, #12]
 800a900:	b13c      	cbz	r4, 800a912 <_Bfree+0x3a>
 800a902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a904:	6862      	ldr	r2, [r4, #4]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a90c:	6021      	str	r1, [r4, #0]
 800a90e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a912:	bd70      	pop	{r4, r5, r6, pc}
 800a914:	0800bdc5 	.word	0x0800bdc5
 800a918:	0800be48 	.word	0x0800be48

0800a91c <__multadd>:
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	690d      	ldr	r5, [r1, #16]
 800a922:	4607      	mov	r7, r0
 800a924:	460c      	mov	r4, r1
 800a926:	461e      	mov	r6, r3
 800a928:	f101 0c14 	add.w	ip, r1, #20
 800a92c:	2000      	movs	r0, #0
 800a92e:	f8dc 3000 	ldr.w	r3, [ip]
 800a932:	b299      	uxth	r1, r3
 800a934:	fb02 6101 	mla	r1, r2, r1, r6
 800a938:	0c1e      	lsrs	r6, r3, #16
 800a93a:	0c0b      	lsrs	r3, r1, #16
 800a93c:	fb02 3306 	mla	r3, r2, r6, r3
 800a940:	b289      	uxth	r1, r1
 800a942:	3001      	adds	r0, #1
 800a944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a948:	4285      	cmp	r5, r0
 800a94a:	f84c 1b04 	str.w	r1, [ip], #4
 800a94e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a952:	dcec      	bgt.n	800a92e <__multadd+0x12>
 800a954:	b30e      	cbz	r6, 800a99a <__multadd+0x7e>
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	42ab      	cmp	r3, r5
 800a95a:	dc19      	bgt.n	800a990 <__multadd+0x74>
 800a95c:	6861      	ldr	r1, [r4, #4]
 800a95e:	4638      	mov	r0, r7
 800a960:	3101      	adds	r1, #1
 800a962:	f7ff ff79 	bl	800a858 <_Balloc>
 800a966:	4680      	mov	r8, r0
 800a968:	b928      	cbnz	r0, 800a976 <__multadd+0x5a>
 800a96a:	4602      	mov	r2, r0
 800a96c:	4b0c      	ldr	r3, [pc, #48]	; (800a9a0 <__multadd+0x84>)
 800a96e:	480d      	ldr	r0, [pc, #52]	; (800a9a4 <__multadd+0x88>)
 800a970:	21b5      	movs	r1, #181	; 0xb5
 800a972:	f000 fbfb 	bl	800b16c <__assert_func>
 800a976:	6922      	ldr	r2, [r4, #16]
 800a978:	3202      	adds	r2, #2
 800a97a:	f104 010c 	add.w	r1, r4, #12
 800a97e:	0092      	lsls	r2, r2, #2
 800a980:	300c      	adds	r0, #12
 800a982:	f7ff ff5b 	bl	800a83c <memcpy>
 800a986:	4621      	mov	r1, r4
 800a988:	4638      	mov	r0, r7
 800a98a:	f7ff ffa5 	bl	800a8d8 <_Bfree>
 800a98e:	4644      	mov	r4, r8
 800a990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a994:	3501      	adds	r5, #1
 800a996:	615e      	str	r6, [r3, #20]
 800a998:	6125      	str	r5, [r4, #16]
 800a99a:	4620      	mov	r0, r4
 800a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a0:	0800be37 	.word	0x0800be37
 800a9a4:	0800be48 	.word	0x0800be48

0800a9a8 <__hi0bits>:
 800a9a8:	0c03      	lsrs	r3, r0, #16
 800a9aa:	041b      	lsls	r3, r3, #16
 800a9ac:	b9d3      	cbnz	r3, 800a9e4 <__hi0bits+0x3c>
 800a9ae:	0400      	lsls	r0, r0, #16
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9b6:	bf04      	itt	eq
 800a9b8:	0200      	lsleq	r0, r0, #8
 800a9ba:	3308      	addeq	r3, #8
 800a9bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9c0:	bf04      	itt	eq
 800a9c2:	0100      	lsleq	r0, r0, #4
 800a9c4:	3304      	addeq	r3, #4
 800a9c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9ca:	bf04      	itt	eq
 800a9cc:	0080      	lsleq	r0, r0, #2
 800a9ce:	3302      	addeq	r3, #2
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	db05      	blt.n	800a9e0 <__hi0bits+0x38>
 800a9d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9d8:	f103 0301 	add.w	r3, r3, #1
 800a9dc:	bf08      	it	eq
 800a9de:	2320      	moveq	r3, #32
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	4770      	bx	lr
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e7e4      	b.n	800a9b2 <__hi0bits+0xa>

0800a9e8 <__lo0bits>:
 800a9e8:	6803      	ldr	r3, [r0, #0]
 800a9ea:	f013 0207 	ands.w	r2, r3, #7
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	d00b      	beq.n	800aa0a <__lo0bits+0x22>
 800a9f2:	07da      	lsls	r2, r3, #31
 800a9f4:	d423      	bmi.n	800aa3e <__lo0bits+0x56>
 800a9f6:	0798      	lsls	r0, r3, #30
 800a9f8:	bf49      	itett	mi
 800a9fa:	085b      	lsrmi	r3, r3, #1
 800a9fc:	089b      	lsrpl	r3, r3, #2
 800a9fe:	2001      	movmi	r0, #1
 800aa00:	600b      	strmi	r3, [r1, #0]
 800aa02:	bf5c      	itt	pl
 800aa04:	600b      	strpl	r3, [r1, #0]
 800aa06:	2002      	movpl	r0, #2
 800aa08:	4770      	bx	lr
 800aa0a:	b298      	uxth	r0, r3
 800aa0c:	b9a8      	cbnz	r0, 800aa3a <__lo0bits+0x52>
 800aa0e:	0c1b      	lsrs	r3, r3, #16
 800aa10:	2010      	movs	r0, #16
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	b90a      	cbnz	r2, 800aa1a <__lo0bits+0x32>
 800aa16:	3008      	adds	r0, #8
 800aa18:	0a1b      	lsrs	r3, r3, #8
 800aa1a:	071a      	lsls	r2, r3, #28
 800aa1c:	bf04      	itt	eq
 800aa1e:	091b      	lsreq	r3, r3, #4
 800aa20:	3004      	addeq	r0, #4
 800aa22:	079a      	lsls	r2, r3, #30
 800aa24:	bf04      	itt	eq
 800aa26:	089b      	lsreq	r3, r3, #2
 800aa28:	3002      	addeq	r0, #2
 800aa2a:	07da      	lsls	r2, r3, #31
 800aa2c:	d403      	bmi.n	800aa36 <__lo0bits+0x4e>
 800aa2e:	085b      	lsrs	r3, r3, #1
 800aa30:	f100 0001 	add.w	r0, r0, #1
 800aa34:	d005      	beq.n	800aa42 <__lo0bits+0x5a>
 800aa36:	600b      	str	r3, [r1, #0]
 800aa38:	4770      	bx	lr
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	e7e9      	b.n	800aa12 <__lo0bits+0x2a>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	4770      	bx	lr
 800aa42:	2020      	movs	r0, #32
 800aa44:	4770      	bx	lr
	...

0800aa48 <__i2b>:
 800aa48:	b510      	push	{r4, lr}
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	f7ff ff03 	bl	800a858 <_Balloc>
 800aa52:	4602      	mov	r2, r0
 800aa54:	b928      	cbnz	r0, 800aa62 <__i2b+0x1a>
 800aa56:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <__i2b+0x24>)
 800aa58:	4805      	ldr	r0, [pc, #20]	; (800aa70 <__i2b+0x28>)
 800aa5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa5e:	f000 fb85 	bl	800b16c <__assert_func>
 800aa62:	2301      	movs	r3, #1
 800aa64:	6144      	str	r4, [r0, #20]
 800aa66:	6103      	str	r3, [r0, #16]
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0800be37 	.word	0x0800be37
 800aa70:	0800be48 	.word	0x0800be48

0800aa74 <__multiply>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	4691      	mov	r9, r2
 800aa7a:	690a      	ldr	r2, [r1, #16]
 800aa7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	bfb8      	it	lt
 800aa84:	460b      	movlt	r3, r1
 800aa86:	460c      	mov	r4, r1
 800aa88:	bfbc      	itt	lt
 800aa8a:	464c      	movlt	r4, r9
 800aa8c:	4699      	movlt	r9, r3
 800aa8e:	6927      	ldr	r7, [r4, #16]
 800aa90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa94:	68a3      	ldr	r3, [r4, #8]
 800aa96:	6861      	ldr	r1, [r4, #4]
 800aa98:	eb07 060a 	add.w	r6, r7, sl
 800aa9c:	42b3      	cmp	r3, r6
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	bfb8      	it	lt
 800aaa2:	3101      	addlt	r1, #1
 800aaa4:	f7ff fed8 	bl	800a858 <_Balloc>
 800aaa8:	b930      	cbnz	r0, 800aab8 <__multiply+0x44>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	4b44      	ldr	r3, [pc, #272]	; (800abc0 <__multiply+0x14c>)
 800aaae:	4845      	ldr	r0, [pc, #276]	; (800abc4 <__multiply+0x150>)
 800aab0:	f240 115d 	movw	r1, #349	; 0x15d
 800aab4:	f000 fb5a 	bl	800b16c <__assert_func>
 800aab8:	f100 0514 	add.w	r5, r0, #20
 800aabc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aac0:	462b      	mov	r3, r5
 800aac2:	2200      	movs	r2, #0
 800aac4:	4543      	cmp	r3, r8
 800aac6:	d321      	bcc.n	800ab0c <__multiply+0x98>
 800aac8:	f104 0314 	add.w	r3, r4, #20
 800aacc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aad0:	f109 0314 	add.w	r3, r9, #20
 800aad4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aad8:	9202      	str	r2, [sp, #8]
 800aada:	1b3a      	subs	r2, r7, r4
 800aadc:	3a15      	subs	r2, #21
 800aade:	f022 0203 	bic.w	r2, r2, #3
 800aae2:	3204      	adds	r2, #4
 800aae4:	f104 0115 	add.w	r1, r4, #21
 800aae8:	428f      	cmp	r7, r1
 800aaea:	bf38      	it	cc
 800aaec:	2204      	movcc	r2, #4
 800aaee:	9201      	str	r2, [sp, #4]
 800aaf0:	9a02      	ldr	r2, [sp, #8]
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d80c      	bhi.n	800ab12 <__multiply+0x9e>
 800aaf8:	2e00      	cmp	r6, #0
 800aafa:	dd03      	ble.n	800ab04 <__multiply+0x90>
 800aafc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d05a      	beq.n	800abba <__multiply+0x146>
 800ab04:	6106      	str	r6, [r0, #16]
 800ab06:	b005      	add	sp, #20
 800ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0c:	f843 2b04 	str.w	r2, [r3], #4
 800ab10:	e7d8      	b.n	800aac4 <__multiply+0x50>
 800ab12:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab16:	f1ba 0f00 	cmp.w	sl, #0
 800ab1a:	d024      	beq.n	800ab66 <__multiply+0xf2>
 800ab1c:	f104 0e14 	add.w	lr, r4, #20
 800ab20:	46a9      	mov	r9, r5
 800ab22:	f04f 0c00 	mov.w	ip, #0
 800ab26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab2a:	f8d9 1000 	ldr.w	r1, [r9]
 800ab2e:	fa1f fb82 	uxth.w	fp, r2
 800ab32:	b289      	uxth	r1, r1
 800ab34:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab40:	4461      	add	r1, ip
 800ab42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab46:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab4e:	b289      	uxth	r1, r1
 800ab50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab54:	4577      	cmp	r7, lr
 800ab56:	f849 1b04 	str.w	r1, [r9], #4
 800ab5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab5e:	d8e2      	bhi.n	800ab26 <__multiply+0xb2>
 800ab60:	9a01      	ldr	r2, [sp, #4]
 800ab62:	f845 c002 	str.w	ip, [r5, r2]
 800ab66:	9a03      	ldr	r2, [sp, #12]
 800ab68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	f1b9 0f00 	cmp.w	r9, #0
 800ab72:	d020      	beq.n	800abb6 <__multiply+0x142>
 800ab74:	6829      	ldr	r1, [r5, #0]
 800ab76:	f104 0c14 	add.w	ip, r4, #20
 800ab7a:	46ae      	mov	lr, r5
 800ab7c:	f04f 0a00 	mov.w	sl, #0
 800ab80:	f8bc b000 	ldrh.w	fp, [ip]
 800ab84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab88:	fb09 220b 	mla	r2, r9, fp, r2
 800ab8c:	4492      	add	sl, r2
 800ab8e:	b289      	uxth	r1, r1
 800ab90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab94:	f84e 1b04 	str.w	r1, [lr], #4
 800ab98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab9c:	f8be 1000 	ldrh.w	r1, [lr]
 800aba0:	0c12      	lsrs	r2, r2, #16
 800aba2:	fb09 1102 	mla	r1, r9, r2, r1
 800aba6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abaa:	4567      	cmp	r7, ip
 800abac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abb0:	d8e6      	bhi.n	800ab80 <__multiply+0x10c>
 800abb2:	9a01      	ldr	r2, [sp, #4]
 800abb4:	50a9      	str	r1, [r5, r2]
 800abb6:	3504      	adds	r5, #4
 800abb8:	e79a      	b.n	800aaf0 <__multiply+0x7c>
 800abba:	3e01      	subs	r6, #1
 800abbc:	e79c      	b.n	800aaf8 <__multiply+0x84>
 800abbe:	bf00      	nop
 800abc0:	0800be37 	.word	0x0800be37
 800abc4:	0800be48 	.word	0x0800be48

0800abc8 <__pow5mult>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4615      	mov	r5, r2
 800abce:	f012 0203 	ands.w	r2, r2, #3
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	d007      	beq.n	800abe8 <__pow5mult+0x20>
 800abd8:	4c25      	ldr	r4, [pc, #148]	; (800ac70 <__pow5mult+0xa8>)
 800abda:	3a01      	subs	r2, #1
 800abdc:	2300      	movs	r3, #0
 800abde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abe2:	f7ff fe9b 	bl	800a91c <__multadd>
 800abe6:	4607      	mov	r7, r0
 800abe8:	10ad      	asrs	r5, r5, #2
 800abea:	d03d      	beq.n	800ac68 <__pow5mult+0xa0>
 800abec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abee:	b97c      	cbnz	r4, 800ac10 <__pow5mult+0x48>
 800abf0:	2010      	movs	r0, #16
 800abf2:	f7ff fe1b 	bl	800a82c <malloc>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6270      	str	r0, [r6, #36]	; 0x24
 800abfa:	b928      	cbnz	r0, 800ac08 <__pow5mult+0x40>
 800abfc:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <__pow5mult+0xac>)
 800abfe:	481e      	ldr	r0, [pc, #120]	; (800ac78 <__pow5mult+0xb0>)
 800ac00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac04:	f000 fab2 	bl	800b16c <__assert_func>
 800ac08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac0c:	6004      	str	r4, [r0, #0]
 800ac0e:	60c4      	str	r4, [r0, #12]
 800ac10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac18:	b94c      	cbnz	r4, 800ac2e <__pow5mult+0x66>
 800ac1a:	f240 2171 	movw	r1, #625	; 0x271
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7ff ff12 	bl	800aa48 <__i2b>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	6003      	str	r3, [r0, #0]
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	07eb      	lsls	r3, r5, #31
 800ac34:	d50a      	bpl.n	800ac4c <__pow5mult+0x84>
 800ac36:	4639      	mov	r1, r7
 800ac38:	4622      	mov	r2, r4
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7ff ff1a 	bl	800aa74 <__multiply>
 800ac40:	4639      	mov	r1, r7
 800ac42:	4680      	mov	r8, r0
 800ac44:	4630      	mov	r0, r6
 800ac46:	f7ff fe47 	bl	800a8d8 <_Bfree>
 800ac4a:	4647      	mov	r7, r8
 800ac4c:	106d      	asrs	r5, r5, #1
 800ac4e:	d00b      	beq.n	800ac68 <__pow5mult+0xa0>
 800ac50:	6820      	ldr	r0, [r4, #0]
 800ac52:	b938      	cbnz	r0, 800ac64 <__pow5mult+0x9c>
 800ac54:	4622      	mov	r2, r4
 800ac56:	4621      	mov	r1, r4
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ff0b 	bl	800aa74 <__multiply>
 800ac5e:	6020      	str	r0, [r4, #0]
 800ac60:	f8c0 9000 	str.w	r9, [r0]
 800ac64:	4604      	mov	r4, r0
 800ac66:	e7e4      	b.n	800ac32 <__pow5mult+0x6a>
 800ac68:	4638      	mov	r0, r7
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	bf00      	nop
 800ac70:	0800bf98 	.word	0x0800bf98
 800ac74:	0800bdc5 	.word	0x0800bdc5
 800ac78:	0800be48 	.word	0x0800be48

0800ac7c <__lshift>:
 800ac7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	460c      	mov	r4, r1
 800ac82:	6849      	ldr	r1, [r1, #4]
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	4691      	mov	r9, r2
 800ac90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac94:	f108 0601 	add.w	r6, r8, #1
 800ac98:	42b3      	cmp	r3, r6
 800ac9a:	db0b      	blt.n	800acb4 <__lshift+0x38>
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	f7ff fddb 	bl	800a858 <_Balloc>
 800aca2:	4605      	mov	r5, r0
 800aca4:	b948      	cbnz	r0, 800acba <__lshift+0x3e>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b2a      	ldr	r3, [pc, #168]	; (800ad54 <__lshift+0xd8>)
 800acaa:	482b      	ldr	r0, [pc, #172]	; (800ad58 <__lshift+0xdc>)
 800acac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acb0:	f000 fa5c 	bl	800b16c <__assert_func>
 800acb4:	3101      	adds	r1, #1
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	e7ee      	b.n	800ac98 <__lshift+0x1c>
 800acba:	2300      	movs	r3, #0
 800acbc:	f100 0114 	add.w	r1, r0, #20
 800acc0:	f100 0210 	add.w	r2, r0, #16
 800acc4:	4618      	mov	r0, r3
 800acc6:	4553      	cmp	r3, sl
 800acc8:	db37      	blt.n	800ad3a <__lshift+0xbe>
 800acca:	6920      	ldr	r0, [r4, #16]
 800accc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acd0:	f104 0314 	add.w	r3, r4, #20
 800acd4:	f019 091f 	ands.w	r9, r9, #31
 800acd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ace0:	d02f      	beq.n	800ad42 <__lshift+0xc6>
 800ace2:	f1c9 0e20 	rsb	lr, r9, #32
 800ace6:	468a      	mov	sl, r1
 800ace8:	f04f 0c00 	mov.w	ip, #0
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	fa02 f209 	lsl.w	r2, r2, r9
 800acf2:	ea42 020c 	orr.w	r2, r2, ip
 800acf6:	f84a 2b04 	str.w	r2, [sl], #4
 800acfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfe:	4298      	cmp	r0, r3
 800ad00:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad04:	d8f2      	bhi.n	800acec <__lshift+0x70>
 800ad06:	1b03      	subs	r3, r0, r4
 800ad08:	3b15      	subs	r3, #21
 800ad0a:	f023 0303 	bic.w	r3, r3, #3
 800ad0e:	3304      	adds	r3, #4
 800ad10:	f104 0215 	add.w	r2, r4, #21
 800ad14:	4290      	cmp	r0, r2
 800ad16:	bf38      	it	cc
 800ad18:	2304      	movcc	r3, #4
 800ad1a:	f841 c003 	str.w	ip, [r1, r3]
 800ad1e:	f1bc 0f00 	cmp.w	ip, #0
 800ad22:	d001      	beq.n	800ad28 <__lshift+0xac>
 800ad24:	f108 0602 	add.w	r6, r8, #2
 800ad28:	3e01      	subs	r6, #1
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	612e      	str	r6, [r5, #16]
 800ad2e:	4621      	mov	r1, r4
 800ad30:	f7ff fdd2 	bl	800a8d8 <_Bfree>
 800ad34:	4628      	mov	r0, r5
 800ad36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad3e:	3301      	adds	r3, #1
 800ad40:	e7c1      	b.n	800acc6 <__lshift+0x4a>
 800ad42:	3904      	subs	r1, #4
 800ad44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad4c:	4298      	cmp	r0, r3
 800ad4e:	d8f9      	bhi.n	800ad44 <__lshift+0xc8>
 800ad50:	e7ea      	b.n	800ad28 <__lshift+0xac>
 800ad52:	bf00      	nop
 800ad54:	0800be37 	.word	0x0800be37
 800ad58:	0800be48 	.word	0x0800be48

0800ad5c <__mcmp>:
 800ad5c:	b530      	push	{r4, r5, lr}
 800ad5e:	6902      	ldr	r2, [r0, #16]
 800ad60:	690c      	ldr	r4, [r1, #16]
 800ad62:	1b12      	subs	r2, r2, r4
 800ad64:	d10e      	bne.n	800ad84 <__mcmp+0x28>
 800ad66:	f100 0314 	add.w	r3, r0, #20
 800ad6a:	3114      	adds	r1, #20
 800ad6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad7c:	42a5      	cmp	r5, r4
 800ad7e:	d003      	beq.n	800ad88 <__mcmp+0x2c>
 800ad80:	d305      	bcc.n	800ad8e <__mcmp+0x32>
 800ad82:	2201      	movs	r2, #1
 800ad84:	4610      	mov	r0, r2
 800ad86:	bd30      	pop	{r4, r5, pc}
 800ad88:	4283      	cmp	r3, r0
 800ad8a:	d3f3      	bcc.n	800ad74 <__mcmp+0x18>
 800ad8c:	e7fa      	b.n	800ad84 <__mcmp+0x28>
 800ad8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad92:	e7f7      	b.n	800ad84 <__mcmp+0x28>

0800ad94 <__mdiff>:
 800ad94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	460c      	mov	r4, r1
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4620      	mov	r0, r4
 800ada0:	4690      	mov	r8, r2
 800ada2:	f7ff ffdb 	bl	800ad5c <__mcmp>
 800ada6:	1e05      	subs	r5, r0, #0
 800ada8:	d110      	bne.n	800adcc <__mdiff+0x38>
 800adaa:	4629      	mov	r1, r5
 800adac:	4630      	mov	r0, r6
 800adae:	f7ff fd53 	bl	800a858 <_Balloc>
 800adb2:	b930      	cbnz	r0, 800adc2 <__mdiff+0x2e>
 800adb4:	4b3a      	ldr	r3, [pc, #232]	; (800aea0 <__mdiff+0x10c>)
 800adb6:	4602      	mov	r2, r0
 800adb8:	f240 2132 	movw	r1, #562	; 0x232
 800adbc:	4839      	ldr	r0, [pc, #228]	; (800aea4 <__mdiff+0x110>)
 800adbe:	f000 f9d5 	bl	800b16c <__assert_func>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	bfa4      	itt	ge
 800adce:	4643      	movge	r3, r8
 800add0:	46a0      	movge	r8, r4
 800add2:	4630      	mov	r0, r6
 800add4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800add8:	bfa6      	itte	ge
 800adda:	461c      	movge	r4, r3
 800addc:	2500      	movge	r5, #0
 800adde:	2501      	movlt	r5, #1
 800ade0:	f7ff fd3a 	bl	800a858 <_Balloc>
 800ade4:	b920      	cbnz	r0, 800adf0 <__mdiff+0x5c>
 800ade6:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <__mdiff+0x10c>)
 800ade8:	4602      	mov	r2, r0
 800adea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adee:	e7e5      	b.n	800adbc <__mdiff+0x28>
 800adf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adf4:	6926      	ldr	r6, [r4, #16]
 800adf6:	60c5      	str	r5, [r0, #12]
 800adf8:	f104 0914 	add.w	r9, r4, #20
 800adfc:	f108 0514 	add.w	r5, r8, #20
 800ae00:	f100 0e14 	add.w	lr, r0, #20
 800ae04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae0c:	f108 0210 	add.w	r2, r8, #16
 800ae10:	46f2      	mov	sl, lr
 800ae12:	2100      	movs	r1, #0
 800ae14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae1c:	fa1f f883 	uxth.w	r8, r3
 800ae20:	fa11 f18b 	uxtah	r1, r1, fp
 800ae24:	0c1b      	lsrs	r3, r3, #16
 800ae26:	eba1 0808 	sub.w	r8, r1, r8
 800ae2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae32:	fa1f f888 	uxth.w	r8, r8
 800ae36:	1419      	asrs	r1, r3, #16
 800ae38:	454e      	cmp	r6, r9
 800ae3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ae42:	d8e7      	bhi.n	800ae14 <__mdiff+0x80>
 800ae44:	1b33      	subs	r3, r6, r4
 800ae46:	3b15      	subs	r3, #21
 800ae48:	f023 0303 	bic.w	r3, r3, #3
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	3415      	adds	r4, #21
 800ae50:	42a6      	cmp	r6, r4
 800ae52:	bf38      	it	cc
 800ae54:	2304      	movcc	r3, #4
 800ae56:	441d      	add	r5, r3
 800ae58:	4473      	add	r3, lr
 800ae5a:	469e      	mov	lr, r3
 800ae5c:	462e      	mov	r6, r5
 800ae5e:	4566      	cmp	r6, ip
 800ae60:	d30e      	bcc.n	800ae80 <__mdiff+0xec>
 800ae62:	f10c 0203 	add.w	r2, ip, #3
 800ae66:	1b52      	subs	r2, r2, r5
 800ae68:	f022 0203 	bic.w	r2, r2, #3
 800ae6c:	3d03      	subs	r5, #3
 800ae6e:	45ac      	cmp	ip, r5
 800ae70:	bf38      	it	cc
 800ae72:	2200      	movcc	r2, #0
 800ae74:	441a      	add	r2, r3
 800ae76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae7a:	b17b      	cbz	r3, 800ae9c <__mdiff+0x108>
 800ae7c:	6107      	str	r7, [r0, #16]
 800ae7e:	e7a3      	b.n	800adc8 <__mdiff+0x34>
 800ae80:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae84:	fa11 f288 	uxtah	r2, r1, r8
 800ae88:	1414      	asrs	r4, r2, #16
 800ae8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae8e:	b292      	uxth	r2, r2
 800ae90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae94:	f84e 2b04 	str.w	r2, [lr], #4
 800ae98:	1421      	asrs	r1, r4, #16
 800ae9a:	e7e0      	b.n	800ae5e <__mdiff+0xca>
 800ae9c:	3f01      	subs	r7, #1
 800ae9e:	e7ea      	b.n	800ae76 <__mdiff+0xe2>
 800aea0:	0800be37 	.word	0x0800be37
 800aea4:	0800be48 	.word	0x0800be48

0800aea8 <__d2b>:
 800aea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4689      	mov	r9, r1
 800aeae:	2101      	movs	r1, #1
 800aeb0:	ec57 6b10 	vmov	r6, r7, d0
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	f7ff fccf 	bl	800a858 <_Balloc>
 800aeba:	4604      	mov	r4, r0
 800aebc:	b930      	cbnz	r0, 800aecc <__d2b+0x24>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <__d2b+0xb0>)
 800aec2:	4826      	ldr	r0, [pc, #152]	; (800af5c <__d2b+0xb4>)
 800aec4:	f240 310a 	movw	r1, #778	; 0x30a
 800aec8:	f000 f950 	bl	800b16c <__assert_func>
 800aecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aed4:	bb35      	cbnz	r5, 800af24 <__d2b+0x7c>
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	d028      	beq.n	800af2e <__d2b+0x86>
 800aedc:	4668      	mov	r0, sp
 800aede:	9600      	str	r6, [sp, #0]
 800aee0:	f7ff fd82 	bl	800a9e8 <__lo0bits>
 800aee4:	9900      	ldr	r1, [sp, #0]
 800aee6:	b300      	cbz	r0, 800af2a <__d2b+0x82>
 800aee8:	9a01      	ldr	r2, [sp, #4]
 800aeea:	f1c0 0320 	rsb	r3, r0, #32
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	430b      	orrs	r3, r1
 800aef4:	40c2      	lsrs	r2, r0
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	61a3      	str	r3, [r4, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bf14      	ite	ne
 800af02:	2202      	movne	r2, #2
 800af04:	2201      	moveq	r2, #1
 800af06:	6122      	str	r2, [r4, #16]
 800af08:	b1d5      	cbz	r5, 800af40 <__d2b+0x98>
 800af0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af0e:	4405      	add	r5, r0
 800af10:	f8c9 5000 	str.w	r5, [r9]
 800af14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af18:	f8c8 0000 	str.w	r0, [r8]
 800af1c:	4620      	mov	r0, r4
 800af1e:	b003      	add	sp, #12
 800af20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af28:	e7d5      	b.n	800aed6 <__d2b+0x2e>
 800af2a:	6161      	str	r1, [r4, #20]
 800af2c:	e7e5      	b.n	800aefa <__d2b+0x52>
 800af2e:	a801      	add	r0, sp, #4
 800af30:	f7ff fd5a 	bl	800a9e8 <__lo0bits>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	6163      	str	r3, [r4, #20]
 800af38:	2201      	movs	r2, #1
 800af3a:	6122      	str	r2, [r4, #16]
 800af3c:	3020      	adds	r0, #32
 800af3e:	e7e3      	b.n	800af08 <__d2b+0x60>
 800af40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af48:	f8c9 0000 	str.w	r0, [r9]
 800af4c:	6918      	ldr	r0, [r3, #16]
 800af4e:	f7ff fd2b 	bl	800a9a8 <__hi0bits>
 800af52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af56:	e7df      	b.n	800af18 <__d2b+0x70>
 800af58:	0800be37 	.word	0x0800be37
 800af5c:	0800be48 	.word	0x0800be48

0800af60 <_calloc_r>:
 800af60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af62:	fba1 2402 	umull	r2, r4, r1, r2
 800af66:	b94c      	cbnz	r4, 800af7c <_calloc_r+0x1c>
 800af68:	4611      	mov	r1, r2
 800af6a:	9201      	str	r2, [sp, #4]
 800af6c:	f000 f87a 	bl	800b064 <_malloc_r>
 800af70:	9a01      	ldr	r2, [sp, #4]
 800af72:	4605      	mov	r5, r0
 800af74:	b930      	cbnz	r0, 800af84 <_calloc_r+0x24>
 800af76:	4628      	mov	r0, r5
 800af78:	b003      	add	sp, #12
 800af7a:	bd30      	pop	{r4, r5, pc}
 800af7c:	220c      	movs	r2, #12
 800af7e:	6002      	str	r2, [r0, #0]
 800af80:	2500      	movs	r5, #0
 800af82:	e7f8      	b.n	800af76 <_calloc_r+0x16>
 800af84:	4621      	mov	r1, r4
 800af86:	f7fe f95f 	bl	8009248 <memset>
 800af8a:	e7f4      	b.n	800af76 <_calloc_r+0x16>

0800af8c <_free_r>:
 800af8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af8e:	2900      	cmp	r1, #0
 800af90:	d044      	beq.n	800b01c <_free_r+0x90>
 800af92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af96:	9001      	str	r0, [sp, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f1a1 0404 	sub.w	r4, r1, #4
 800af9e:	bfb8      	it	lt
 800afa0:	18e4      	addlt	r4, r4, r3
 800afa2:	f000 f925 	bl	800b1f0 <__malloc_lock>
 800afa6:	4a1e      	ldr	r2, [pc, #120]	; (800b020 <_free_r+0x94>)
 800afa8:	9801      	ldr	r0, [sp, #4]
 800afaa:	6813      	ldr	r3, [r2, #0]
 800afac:	b933      	cbnz	r3, 800afbc <_free_r+0x30>
 800afae:	6063      	str	r3, [r4, #4]
 800afb0:	6014      	str	r4, [r2, #0]
 800afb2:	b003      	add	sp, #12
 800afb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afb8:	f000 b920 	b.w	800b1fc <__malloc_unlock>
 800afbc:	42a3      	cmp	r3, r4
 800afbe:	d908      	bls.n	800afd2 <_free_r+0x46>
 800afc0:	6825      	ldr	r5, [r4, #0]
 800afc2:	1961      	adds	r1, r4, r5
 800afc4:	428b      	cmp	r3, r1
 800afc6:	bf01      	itttt	eq
 800afc8:	6819      	ldreq	r1, [r3, #0]
 800afca:	685b      	ldreq	r3, [r3, #4]
 800afcc:	1949      	addeq	r1, r1, r5
 800afce:	6021      	streq	r1, [r4, #0]
 800afd0:	e7ed      	b.n	800afae <_free_r+0x22>
 800afd2:	461a      	mov	r2, r3
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	b10b      	cbz	r3, 800afdc <_free_r+0x50>
 800afd8:	42a3      	cmp	r3, r4
 800afda:	d9fa      	bls.n	800afd2 <_free_r+0x46>
 800afdc:	6811      	ldr	r1, [r2, #0]
 800afde:	1855      	adds	r5, r2, r1
 800afe0:	42a5      	cmp	r5, r4
 800afe2:	d10b      	bne.n	800affc <_free_r+0x70>
 800afe4:	6824      	ldr	r4, [r4, #0]
 800afe6:	4421      	add	r1, r4
 800afe8:	1854      	adds	r4, r2, r1
 800afea:	42a3      	cmp	r3, r4
 800afec:	6011      	str	r1, [r2, #0]
 800afee:	d1e0      	bne.n	800afb2 <_free_r+0x26>
 800aff0:	681c      	ldr	r4, [r3, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	6053      	str	r3, [r2, #4]
 800aff6:	4421      	add	r1, r4
 800aff8:	6011      	str	r1, [r2, #0]
 800affa:	e7da      	b.n	800afb2 <_free_r+0x26>
 800affc:	d902      	bls.n	800b004 <_free_r+0x78>
 800affe:	230c      	movs	r3, #12
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	e7d6      	b.n	800afb2 <_free_r+0x26>
 800b004:	6825      	ldr	r5, [r4, #0]
 800b006:	1961      	adds	r1, r4, r5
 800b008:	428b      	cmp	r3, r1
 800b00a:	bf04      	itt	eq
 800b00c:	6819      	ldreq	r1, [r3, #0]
 800b00e:	685b      	ldreq	r3, [r3, #4]
 800b010:	6063      	str	r3, [r4, #4]
 800b012:	bf04      	itt	eq
 800b014:	1949      	addeq	r1, r1, r5
 800b016:	6021      	streq	r1, [r4, #0]
 800b018:	6054      	str	r4, [r2, #4]
 800b01a:	e7ca      	b.n	800afb2 <_free_r+0x26>
 800b01c:	b003      	add	sp, #12
 800b01e:	bd30      	pop	{r4, r5, pc}
 800b020:	2000080c 	.word	0x2000080c

0800b024 <sbrk_aligned>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	4e0e      	ldr	r6, [pc, #56]	; (800b060 <sbrk_aligned+0x3c>)
 800b028:	460c      	mov	r4, r1
 800b02a:	6831      	ldr	r1, [r6, #0]
 800b02c:	4605      	mov	r5, r0
 800b02e:	b911      	cbnz	r1, 800b036 <sbrk_aligned+0x12>
 800b030:	f000 f88c 	bl	800b14c <_sbrk_r>
 800b034:	6030      	str	r0, [r6, #0]
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 f887 	bl	800b14c <_sbrk_r>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d00a      	beq.n	800b058 <sbrk_aligned+0x34>
 800b042:	1cc4      	adds	r4, r0, #3
 800b044:	f024 0403 	bic.w	r4, r4, #3
 800b048:	42a0      	cmp	r0, r4
 800b04a:	d007      	beq.n	800b05c <sbrk_aligned+0x38>
 800b04c:	1a21      	subs	r1, r4, r0
 800b04e:	4628      	mov	r0, r5
 800b050:	f000 f87c 	bl	800b14c <_sbrk_r>
 800b054:	3001      	adds	r0, #1
 800b056:	d101      	bne.n	800b05c <sbrk_aligned+0x38>
 800b058:	f04f 34ff 	mov.w	r4, #4294967295
 800b05c:	4620      	mov	r0, r4
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	20000810 	.word	0x20000810

0800b064 <_malloc_r>:
 800b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b068:	1ccd      	adds	r5, r1, #3
 800b06a:	f025 0503 	bic.w	r5, r5, #3
 800b06e:	3508      	adds	r5, #8
 800b070:	2d0c      	cmp	r5, #12
 800b072:	bf38      	it	cc
 800b074:	250c      	movcc	r5, #12
 800b076:	2d00      	cmp	r5, #0
 800b078:	4607      	mov	r7, r0
 800b07a:	db01      	blt.n	800b080 <_malloc_r+0x1c>
 800b07c:	42a9      	cmp	r1, r5
 800b07e:	d905      	bls.n	800b08c <_malloc_r+0x28>
 800b080:	230c      	movs	r3, #12
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	2600      	movs	r6, #0
 800b086:	4630      	mov	r0, r6
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	4e2e      	ldr	r6, [pc, #184]	; (800b148 <_malloc_r+0xe4>)
 800b08e:	f000 f8af 	bl	800b1f0 <__malloc_lock>
 800b092:	6833      	ldr	r3, [r6, #0]
 800b094:	461c      	mov	r4, r3
 800b096:	bb34      	cbnz	r4, 800b0e6 <_malloc_r+0x82>
 800b098:	4629      	mov	r1, r5
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7ff ffc2 	bl	800b024 <sbrk_aligned>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	d14d      	bne.n	800b142 <_malloc_r+0xde>
 800b0a6:	6834      	ldr	r4, [r6, #0]
 800b0a8:	4626      	mov	r6, r4
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	d140      	bne.n	800b130 <_malloc_r+0xcc>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	eb04 0803 	add.w	r8, r4, r3
 800b0b8:	f000 f848 	bl	800b14c <_sbrk_r>
 800b0bc:	4580      	cmp	r8, r0
 800b0be:	d13a      	bne.n	800b136 <_malloc_r+0xd2>
 800b0c0:	6821      	ldr	r1, [r4, #0]
 800b0c2:	3503      	adds	r5, #3
 800b0c4:	1a6d      	subs	r5, r5, r1
 800b0c6:	f025 0503 	bic.w	r5, r5, #3
 800b0ca:	3508      	adds	r5, #8
 800b0cc:	2d0c      	cmp	r5, #12
 800b0ce:	bf38      	it	cc
 800b0d0:	250c      	movcc	r5, #12
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f7ff ffa5 	bl	800b024 <sbrk_aligned>
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d02b      	beq.n	800b136 <_malloc_r+0xd2>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	442b      	add	r3, r5
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	e00e      	b.n	800b104 <_malloc_r+0xa0>
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	1b52      	subs	r2, r2, r5
 800b0ea:	d41e      	bmi.n	800b12a <_malloc_r+0xc6>
 800b0ec:	2a0b      	cmp	r2, #11
 800b0ee:	d916      	bls.n	800b11e <_malloc_r+0xba>
 800b0f0:	1961      	adds	r1, r4, r5
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	6025      	str	r5, [r4, #0]
 800b0f6:	bf18      	it	ne
 800b0f8:	6059      	strne	r1, [r3, #4]
 800b0fa:	6863      	ldr	r3, [r4, #4]
 800b0fc:	bf08      	it	eq
 800b0fe:	6031      	streq	r1, [r6, #0]
 800b100:	5162      	str	r2, [r4, r5]
 800b102:	604b      	str	r3, [r1, #4]
 800b104:	4638      	mov	r0, r7
 800b106:	f104 060b 	add.w	r6, r4, #11
 800b10a:	f000 f877 	bl	800b1fc <__malloc_unlock>
 800b10e:	f026 0607 	bic.w	r6, r6, #7
 800b112:	1d23      	adds	r3, r4, #4
 800b114:	1af2      	subs	r2, r6, r3
 800b116:	d0b6      	beq.n	800b086 <_malloc_r+0x22>
 800b118:	1b9b      	subs	r3, r3, r6
 800b11a:	50a3      	str	r3, [r4, r2]
 800b11c:	e7b3      	b.n	800b086 <_malloc_r+0x22>
 800b11e:	6862      	ldr	r2, [r4, #4]
 800b120:	42a3      	cmp	r3, r4
 800b122:	bf0c      	ite	eq
 800b124:	6032      	streq	r2, [r6, #0]
 800b126:	605a      	strne	r2, [r3, #4]
 800b128:	e7ec      	b.n	800b104 <_malloc_r+0xa0>
 800b12a:	4623      	mov	r3, r4
 800b12c:	6864      	ldr	r4, [r4, #4]
 800b12e:	e7b2      	b.n	800b096 <_malloc_r+0x32>
 800b130:	4634      	mov	r4, r6
 800b132:	6876      	ldr	r6, [r6, #4]
 800b134:	e7b9      	b.n	800b0aa <_malloc_r+0x46>
 800b136:	230c      	movs	r3, #12
 800b138:	603b      	str	r3, [r7, #0]
 800b13a:	4638      	mov	r0, r7
 800b13c:	f000 f85e 	bl	800b1fc <__malloc_unlock>
 800b140:	e7a1      	b.n	800b086 <_malloc_r+0x22>
 800b142:	6025      	str	r5, [r4, #0]
 800b144:	e7de      	b.n	800b104 <_malloc_r+0xa0>
 800b146:	bf00      	nop
 800b148:	2000080c 	.word	0x2000080c

0800b14c <_sbrk_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d06      	ldr	r5, [pc, #24]	; (800b168 <_sbrk_r+0x1c>)
 800b150:	2300      	movs	r3, #0
 800b152:	4604      	mov	r4, r0
 800b154:	4608      	mov	r0, r1
 800b156:	602b      	str	r3, [r5, #0]
 800b158:	f7f7 fa9a 	bl	8002690 <_sbrk>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d102      	bne.n	800b166 <_sbrk_r+0x1a>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	b103      	cbz	r3, 800b166 <_sbrk_r+0x1a>
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	bd38      	pop	{r3, r4, r5, pc}
 800b168:	20000814 	.word	0x20000814

0800b16c <__assert_func>:
 800b16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b16e:	4614      	mov	r4, r2
 800b170:	461a      	mov	r2, r3
 800b172:	4b09      	ldr	r3, [pc, #36]	; (800b198 <__assert_func+0x2c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4605      	mov	r5, r0
 800b178:	68d8      	ldr	r0, [r3, #12]
 800b17a:	b14c      	cbz	r4, 800b190 <__assert_func+0x24>
 800b17c:	4b07      	ldr	r3, [pc, #28]	; (800b19c <__assert_func+0x30>)
 800b17e:	9100      	str	r1, [sp, #0]
 800b180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b184:	4906      	ldr	r1, [pc, #24]	; (800b1a0 <__assert_func+0x34>)
 800b186:	462b      	mov	r3, r5
 800b188:	f000 f80e 	bl	800b1a8 <fiprintf>
 800b18c:	f000 fa64 	bl	800b658 <abort>
 800b190:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <__assert_func+0x38>)
 800b192:	461c      	mov	r4, r3
 800b194:	e7f3      	b.n	800b17e <__assert_func+0x12>
 800b196:	bf00      	nop
 800b198:	2000009c 	.word	0x2000009c
 800b19c:	0800bfa4 	.word	0x0800bfa4
 800b1a0:	0800bfb1 	.word	0x0800bfb1
 800b1a4:	0800bfdf 	.word	0x0800bfdf

0800b1a8 <fiprintf>:
 800b1a8:	b40e      	push	{r1, r2, r3}
 800b1aa:	b503      	push	{r0, r1, lr}
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <fiprintf+0x20>)
 800b1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b6:	6800      	ldr	r0, [r0, #0]
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	f000 f84f 	bl	800b25c <_vfiprintf_r>
 800b1be:	b002      	add	sp, #8
 800b1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c4:	b003      	add	sp, #12
 800b1c6:	4770      	bx	lr
 800b1c8:	2000009c 	.word	0x2000009c

0800b1cc <__ascii_mbtowc>:
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	b901      	cbnz	r1, 800b1d2 <__ascii_mbtowc+0x6>
 800b1d0:	a901      	add	r1, sp, #4
 800b1d2:	b142      	cbz	r2, 800b1e6 <__ascii_mbtowc+0x1a>
 800b1d4:	b14b      	cbz	r3, 800b1ea <__ascii_mbtowc+0x1e>
 800b1d6:	7813      	ldrb	r3, [r2, #0]
 800b1d8:	600b      	str	r3, [r1, #0]
 800b1da:	7812      	ldrb	r2, [r2, #0]
 800b1dc:	1e10      	subs	r0, r2, #0
 800b1de:	bf18      	it	ne
 800b1e0:	2001      	movne	r0, #1
 800b1e2:	b002      	add	sp, #8
 800b1e4:	4770      	bx	lr
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	e7fb      	b.n	800b1e2 <__ascii_mbtowc+0x16>
 800b1ea:	f06f 0001 	mvn.w	r0, #1
 800b1ee:	e7f8      	b.n	800b1e2 <__ascii_mbtowc+0x16>

0800b1f0 <__malloc_lock>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__malloc_lock+0x8>)
 800b1f2:	f000 bbf1 	b.w	800b9d8 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20000818 	.word	0x20000818

0800b1fc <__malloc_unlock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__malloc_unlock+0x8>)
 800b1fe:	f000 bbec 	b.w	800b9da <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20000818 	.word	0x20000818

0800b208 <__sfputc_r>:
 800b208:	6893      	ldr	r3, [r2, #8]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	b410      	push	{r4}
 800b210:	6093      	str	r3, [r2, #8]
 800b212:	da08      	bge.n	800b226 <__sfputc_r+0x1e>
 800b214:	6994      	ldr	r4, [r2, #24]
 800b216:	42a3      	cmp	r3, r4
 800b218:	db01      	blt.n	800b21e <__sfputc_r+0x16>
 800b21a:	290a      	cmp	r1, #10
 800b21c:	d103      	bne.n	800b226 <__sfputc_r+0x1e>
 800b21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b222:	f000 b94b 	b.w	800b4bc <__swbuf_r>
 800b226:	6813      	ldr	r3, [r2, #0]
 800b228:	1c58      	adds	r0, r3, #1
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	7019      	strb	r1, [r3, #0]
 800b22e:	4608      	mov	r0, r1
 800b230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <__sfputs_r>:
 800b236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b238:	4606      	mov	r6, r0
 800b23a:	460f      	mov	r7, r1
 800b23c:	4614      	mov	r4, r2
 800b23e:	18d5      	adds	r5, r2, r3
 800b240:	42ac      	cmp	r4, r5
 800b242:	d101      	bne.n	800b248 <__sfputs_r+0x12>
 800b244:	2000      	movs	r0, #0
 800b246:	e007      	b.n	800b258 <__sfputs_r+0x22>
 800b248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24c:	463a      	mov	r2, r7
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ffda 	bl	800b208 <__sfputc_r>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d1f3      	bne.n	800b240 <__sfputs_r+0xa>
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b25c <_vfiprintf_r>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	460d      	mov	r5, r1
 800b262:	b09d      	sub	sp, #116	; 0x74
 800b264:	4614      	mov	r4, r2
 800b266:	4698      	mov	r8, r3
 800b268:	4606      	mov	r6, r0
 800b26a:	b118      	cbz	r0, 800b274 <_vfiprintf_r+0x18>
 800b26c:	6983      	ldr	r3, [r0, #24]
 800b26e:	b90b      	cbnz	r3, 800b274 <_vfiprintf_r+0x18>
 800b270:	f000 fb14 	bl	800b89c <__sinit>
 800b274:	4b89      	ldr	r3, [pc, #548]	; (800b49c <_vfiprintf_r+0x240>)
 800b276:	429d      	cmp	r5, r3
 800b278:	d11b      	bne.n	800b2b2 <_vfiprintf_r+0x56>
 800b27a:	6875      	ldr	r5, [r6, #4]
 800b27c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b27e:	07d9      	lsls	r1, r3, #31
 800b280:	d405      	bmi.n	800b28e <_vfiprintf_r+0x32>
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	059a      	lsls	r2, r3, #22
 800b286:	d402      	bmi.n	800b28e <_vfiprintf_r+0x32>
 800b288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b28a:	f000 fba5 	bl	800b9d8 <__retarget_lock_acquire_recursive>
 800b28e:	89ab      	ldrh	r3, [r5, #12]
 800b290:	071b      	lsls	r3, r3, #28
 800b292:	d501      	bpl.n	800b298 <_vfiprintf_r+0x3c>
 800b294:	692b      	ldr	r3, [r5, #16]
 800b296:	b9eb      	cbnz	r3, 800b2d4 <_vfiprintf_r+0x78>
 800b298:	4629      	mov	r1, r5
 800b29a:	4630      	mov	r0, r6
 800b29c:	f000 f96e 	bl	800b57c <__swsetup_r>
 800b2a0:	b1c0      	cbz	r0, 800b2d4 <_vfiprintf_r+0x78>
 800b2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2a4:	07dc      	lsls	r4, r3, #31
 800b2a6:	d50e      	bpl.n	800b2c6 <_vfiprintf_r+0x6a>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	b01d      	add	sp, #116	; 0x74
 800b2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b2:	4b7b      	ldr	r3, [pc, #492]	; (800b4a0 <_vfiprintf_r+0x244>)
 800b2b4:	429d      	cmp	r5, r3
 800b2b6:	d101      	bne.n	800b2bc <_vfiprintf_r+0x60>
 800b2b8:	68b5      	ldr	r5, [r6, #8]
 800b2ba:	e7df      	b.n	800b27c <_vfiprintf_r+0x20>
 800b2bc:	4b79      	ldr	r3, [pc, #484]	; (800b4a4 <_vfiprintf_r+0x248>)
 800b2be:	429d      	cmp	r5, r3
 800b2c0:	bf08      	it	eq
 800b2c2:	68f5      	ldreq	r5, [r6, #12]
 800b2c4:	e7da      	b.n	800b27c <_vfiprintf_r+0x20>
 800b2c6:	89ab      	ldrh	r3, [r5, #12]
 800b2c8:	0598      	lsls	r0, r3, #22
 800b2ca:	d4ed      	bmi.n	800b2a8 <_vfiprintf_r+0x4c>
 800b2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ce:	f000 fb84 	bl	800b9da <__retarget_lock_release_recursive>
 800b2d2:	e7e9      	b.n	800b2a8 <_vfiprintf_r+0x4c>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d8:	2320      	movs	r3, #32
 800b2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2e2:	2330      	movs	r3, #48	; 0x30
 800b2e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4a8 <_vfiprintf_r+0x24c>
 800b2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ec:	f04f 0901 	mov.w	r9, #1
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	469a      	mov	sl, r3
 800b2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f8:	b10a      	cbz	r2, 800b2fe <_vfiprintf_r+0xa2>
 800b2fa:	2a25      	cmp	r2, #37	; 0x25
 800b2fc:	d1f9      	bne.n	800b2f2 <_vfiprintf_r+0x96>
 800b2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b302:	d00b      	beq.n	800b31c <_vfiprintf_r+0xc0>
 800b304:	465b      	mov	r3, fp
 800b306:	4622      	mov	r2, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7ff ff93 	bl	800b236 <__sfputs_r>
 800b310:	3001      	adds	r0, #1
 800b312:	f000 80aa 	beq.w	800b46a <_vfiprintf_r+0x20e>
 800b316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b318:	445a      	add	r2, fp
 800b31a:	9209      	str	r2, [sp, #36]	; 0x24
 800b31c:	f89a 3000 	ldrb.w	r3, [sl]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80a2 	beq.w	800b46a <_vfiprintf_r+0x20e>
 800b326:	2300      	movs	r3, #0
 800b328:	f04f 32ff 	mov.w	r2, #4294967295
 800b32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b330:	f10a 0a01 	add.w	sl, sl, #1
 800b334:	9304      	str	r3, [sp, #16]
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b33c:	931a      	str	r3, [sp, #104]	; 0x68
 800b33e:	4654      	mov	r4, sl
 800b340:	2205      	movs	r2, #5
 800b342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b346:	4858      	ldr	r0, [pc, #352]	; (800b4a8 <_vfiprintf_r+0x24c>)
 800b348:	f7f4 ff72 	bl	8000230 <memchr>
 800b34c:	9a04      	ldr	r2, [sp, #16]
 800b34e:	b9d8      	cbnz	r0, 800b388 <_vfiprintf_r+0x12c>
 800b350:	06d1      	lsls	r1, r2, #27
 800b352:	bf44      	itt	mi
 800b354:	2320      	movmi	r3, #32
 800b356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b35a:	0713      	lsls	r3, r2, #28
 800b35c:	bf44      	itt	mi
 800b35e:	232b      	movmi	r3, #43	; 0x2b
 800b360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b364:	f89a 3000 	ldrb.w	r3, [sl]
 800b368:	2b2a      	cmp	r3, #42	; 0x2a
 800b36a:	d015      	beq.n	800b398 <_vfiprintf_r+0x13c>
 800b36c:	9a07      	ldr	r2, [sp, #28]
 800b36e:	4654      	mov	r4, sl
 800b370:	2000      	movs	r0, #0
 800b372:	f04f 0c0a 	mov.w	ip, #10
 800b376:	4621      	mov	r1, r4
 800b378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b37c:	3b30      	subs	r3, #48	; 0x30
 800b37e:	2b09      	cmp	r3, #9
 800b380:	d94e      	bls.n	800b420 <_vfiprintf_r+0x1c4>
 800b382:	b1b0      	cbz	r0, 800b3b2 <_vfiprintf_r+0x156>
 800b384:	9207      	str	r2, [sp, #28]
 800b386:	e014      	b.n	800b3b2 <_vfiprintf_r+0x156>
 800b388:	eba0 0308 	sub.w	r3, r0, r8
 800b38c:	fa09 f303 	lsl.w	r3, r9, r3
 800b390:	4313      	orrs	r3, r2
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	46a2      	mov	sl, r4
 800b396:	e7d2      	b.n	800b33e <_vfiprintf_r+0xe2>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	1d19      	adds	r1, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	9103      	str	r1, [sp, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bfbb      	ittet	lt
 800b3a4:	425b      	neglt	r3, r3
 800b3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3aa:	9307      	strge	r3, [sp, #28]
 800b3ac:	9307      	strlt	r3, [sp, #28]
 800b3ae:	bfb8      	it	lt
 800b3b0:	9204      	strlt	r2, [sp, #16]
 800b3b2:	7823      	ldrb	r3, [r4, #0]
 800b3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b6:	d10c      	bne.n	800b3d2 <_vfiprintf_r+0x176>
 800b3b8:	7863      	ldrb	r3, [r4, #1]
 800b3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b3bc:	d135      	bne.n	800b42a <_vfiprintf_r+0x1ce>
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	1d1a      	adds	r2, r3, #4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	9203      	str	r2, [sp, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfb8      	it	lt
 800b3ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ce:	3402      	adds	r4, #2
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4b8 <_vfiprintf_r+0x25c>
 800b3d6:	7821      	ldrb	r1, [r4, #0]
 800b3d8:	2203      	movs	r2, #3
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f7f4 ff28 	bl	8000230 <memchr>
 800b3e0:	b140      	cbz	r0, 800b3f4 <_vfiprintf_r+0x198>
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	eba0 000a 	sub.w	r0, r0, sl
 800b3e8:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	4303      	orrs	r3, r0
 800b3f0:	3401      	adds	r4, #1
 800b3f2:	9304      	str	r3, [sp, #16]
 800b3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f8:	482c      	ldr	r0, [pc, #176]	; (800b4ac <_vfiprintf_r+0x250>)
 800b3fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3fe:	2206      	movs	r2, #6
 800b400:	f7f4 ff16 	bl	8000230 <memchr>
 800b404:	2800      	cmp	r0, #0
 800b406:	d03f      	beq.n	800b488 <_vfiprintf_r+0x22c>
 800b408:	4b29      	ldr	r3, [pc, #164]	; (800b4b0 <_vfiprintf_r+0x254>)
 800b40a:	bb1b      	cbnz	r3, 800b454 <_vfiprintf_r+0x1f8>
 800b40c:	9b03      	ldr	r3, [sp, #12]
 800b40e:	3307      	adds	r3, #7
 800b410:	f023 0307 	bic.w	r3, r3, #7
 800b414:	3308      	adds	r3, #8
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41a:	443b      	add	r3, r7
 800b41c:	9309      	str	r3, [sp, #36]	; 0x24
 800b41e:	e767      	b.n	800b2f0 <_vfiprintf_r+0x94>
 800b420:	fb0c 3202 	mla	r2, ip, r2, r3
 800b424:	460c      	mov	r4, r1
 800b426:	2001      	movs	r0, #1
 800b428:	e7a5      	b.n	800b376 <_vfiprintf_r+0x11a>
 800b42a:	2300      	movs	r3, #0
 800b42c:	3401      	adds	r4, #1
 800b42e:	9305      	str	r3, [sp, #20]
 800b430:	4619      	mov	r1, r3
 800b432:	f04f 0c0a 	mov.w	ip, #10
 800b436:	4620      	mov	r0, r4
 800b438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b43c:	3a30      	subs	r2, #48	; 0x30
 800b43e:	2a09      	cmp	r2, #9
 800b440:	d903      	bls.n	800b44a <_vfiprintf_r+0x1ee>
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0c5      	beq.n	800b3d2 <_vfiprintf_r+0x176>
 800b446:	9105      	str	r1, [sp, #20]
 800b448:	e7c3      	b.n	800b3d2 <_vfiprintf_r+0x176>
 800b44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b44e:	4604      	mov	r4, r0
 800b450:	2301      	movs	r3, #1
 800b452:	e7f0      	b.n	800b436 <_vfiprintf_r+0x1da>
 800b454:	ab03      	add	r3, sp, #12
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	462a      	mov	r2, r5
 800b45a:	4b16      	ldr	r3, [pc, #88]	; (800b4b4 <_vfiprintf_r+0x258>)
 800b45c:	a904      	add	r1, sp, #16
 800b45e:	4630      	mov	r0, r6
 800b460:	f7fd ff9a 	bl	8009398 <_printf_float>
 800b464:	4607      	mov	r7, r0
 800b466:	1c78      	adds	r0, r7, #1
 800b468:	d1d6      	bne.n	800b418 <_vfiprintf_r+0x1bc>
 800b46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b46c:	07d9      	lsls	r1, r3, #31
 800b46e:	d405      	bmi.n	800b47c <_vfiprintf_r+0x220>
 800b470:	89ab      	ldrh	r3, [r5, #12]
 800b472:	059a      	lsls	r2, r3, #22
 800b474:	d402      	bmi.n	800b47c <_vfiprintf_r+0x220>
 800b476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b478:	f000 faaf 	bl	800b9da <__retarget_lock_release_recursive>
 800b47c:	89ab      	ldrh	r3, [r5, #12]
 800b47e:	065b      	lsls	r3, r3, #25
 800b480:	f53f af12 	bmi.w	800b2a8 <_vfiprintf_r+0x4c>
 800b484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b486:	e711      	b.n	800b2ac <_vfiprintf_r+0x50>
 800b488:	ab03      	add	r3, sp, #12
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	462a      	mov	r2, r5
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <_vfiprintf_r+0x258>)
 800b490:	a904      	add	r1, sp, #16
 800b492:	4630      	mov	r0, r6
 800b494:	f7fe fa24 	bl	80098e0 <_printf_i>
 800b498:	e7e4      	b.n	800b464 <_vfiprintf_r+0x208>
 800b49a:	bf00      	nop
 800b49c:	0800c11c 	.word	0x0800c11c
 800b4a0:	0800c13c 	.word	0x0800c13c
 800b4a4:	0800c0fc 	.word	0x0800c0fc
 800b4a8:	0800bfea 	.word	0x0800bfea
 800b4ac:	0800bff4 	.word	0x0800bff4
 800b4b0:	08009399 	.word	0x08009399
 800b4b4:	0800b237 	.word	0x0800b237
 800b4b8:	0800bff0 	.word	0x0800bff0

0800b4bc <__swbuf_r>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	460e      	mov	r6, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	b118      	cbz	r0, 800b4ce <__swbuf_r+0x12>
 800b4c6:	6983      	ldr	r3, [r0, #24]
 800b4c8:	b90b      	cbnz	r3, 800b4ce <__swbuf_r+0x12>
 800b4ca:	f000 f9e7 	bl	800b89c <__sinit>
 800b4ce:	4b21      	ldr	r3, [pc, #132]	; (800b554 <__swbuf_r+0x98>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	d12b      	bne.n	800b52c <__swbuf_r+0x70>
 800b4d4:	686c      	ldr	r4, [r5, #4]
 800b4d6:	69a3      	ldr	r3, [r4, #24]
 800b4d8:	60a3      	str	r3, [r4, #8]
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	071a      	lsls	r2, r3, #28
 800b4de:	d52f      	bpl.n	800b540 <__swbuf_r+0x84>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	b36b      	cbz	r3, 800b540 <__swbuf_r+0x84>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	6820      	ldr	r0, [r4, #0]
 800b4e8:	1ac0      	subs	r0, r0, r3
 800b4ea:	6963      	ldr	r3, [r4, #20]
 800b4ec:	b2f6      	uxtb	r6, r6
 800b4ee:	4283      	cmp	r3, r0
 800b4f0:	4637      	mov	r7, r6
 800b4f2:	dc04      	bgt.n	800b4fe <__swbuf_r+0x42>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 f93c 	bl	800b774 <_fflush_r>
 800b4fc:	bb30      	cbnz	r0, 800b54c <__swbuf_r+0x90>
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	3b01      	subs	r3, #1
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	6022      	str	r2, [r4, #0]
 800b50a:	701e      	strb	r6, [r3, #0]
 800b50c:	6963      	ldr	r3, [r4, #20]
 800b50e:	3001      	adds	r0, #1
 800b510:	4283      	cmp	r3, r0
 800b512:	d004      	beq.n	800b51e <__swbuf_r+0x62>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	07db      	lsls	r3, r3, #31
 800b518:	d506      	bpl.n	800b528 <__swbuf_r+0x6c>
 800b51a:	2e0a      	cmp	r6, #10
 800b51c:	d104      	bne.n	800b528 <__swbuf_r+0x6c>
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f927 	bl	800b774 <_fflush_r>
 800b526:	b988      	cbnz	r0, 800b54c <__swbuf_r+0x90>
 800b528:	4638      	mov	r0, r7
 800b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <__swbuf_r+0x9c>)
 800b52e:	429c      	cmp	r4, r3
 800b530:	d101      	bne.n	800b536 <__swbuf_r+0x7a>
 800b532:	68ac      	ldr	r4, [r5, #8]
 800b534:	e7cf      	b.n	800b4d6 <__swbuf_r+0x1a>
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <__swbuf_r+0xa0>)
 800b538:	429c      	cmp	r4, r3
 800b53a:	bf08      	it	eq
 800b53c:	68ec      	ldreq	r4, [r5, #12]
 800b53e:	e7ca      	b.n	800b4d6 <__swbuf_r+0x1a>
 800b540:	4621      	mov	r1, r4
 800b542:	4628      	mov	r0, r5
 800b544:	f000 f81a 	bl	800b57c <__swsetup_r>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d0cb      	beq.n	800b4e4 <__swbuf_r+0x28>
 800b54c:	f04f 37ff 	mov.w	r7, #4294967295
 800b550:	e7ea      	b.n	800b528 <__swbuf_r+0x6c>
 800b552:	bf00      	nop
 800b554:	0800c11c 	.word	0x0800c11c
 800b558:	0800c13c 	.word	0x0800c13c
 800b55c:	0800c0fc 	.word	0x0800c0fc

0800b560 <__ascii_wctomb>:
 800b560:	b149      	cbz	r1, 800b576 <__ascii_wctomb+0x16>
 800b562:	2aff      	cmp	r2, #255	; 0xff
 800b564:	bf85      	ittet	hi
 800b566:	238a      	movhi	r3, #138	; 0x8a
 800b568:	6003      	strhi	r3, [r0, #0]
 800b56a:	700a      	strbls	r2, [r1, #0]
 800b56c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b570:	bf98      	it	ls
 800b572:	2001      	movls	r0, #1
 800b574:	4770      	bx	lr
 800b576:	4608      	mov	r0, r1
 800b578:	4770      	bx	lr
	...

0800b57c <__swsetup_r>:
 800b57c:	4b32      	ldr	r3, [pc, #200]	; (800b648 <__swsetup_r+0xcc>)
 800b57e:	b570      	push	{r4, r5, r6, lr}
 800b580:	681d      	ldr	r5, [r3, #0]
 800b582:	4606      	mov	r6, r0
 800b584:	460c      	mov	r4, r1
 800b586:	b125      	cbz	r5, 800b592 <__swsetup_r+0x16>
 800b588:	69ab      	ldr	r3, [r5, #24]
 800b58a:	b913      	cbnz	r3, 800b592 <__swsetup_r+0x16>
 800b58c:	4628      	mov	r0, r5
 800b58e:	f000 f985 	bl	800b89c <__sinit>
 800b592:	4b2e      	ldr	r3, [pc, #184]	; (800b64c <__swsetup_r+0xd0>)
 800b594:	429c      	cmp	r4, r3
 800b596:	d10f      	bne.n	800b5b8 <__swsetup_r+0x3c>
 800b598:	686c      	ldr	r4, [r5, #4]
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5a0:	0719      	lsls	r1, r3, #28
 800b5a2:	d42c      	bmi.n	800b5fe <__swsetup_r+0x82>
 800b5a4:	06dd      	lsls	r5, r3, #27
 800b5a6:	d411      	bmi.n	800b5cc <__swsetup_r+0x50>
 800b5a8:	2309      	movs	r3, #9
 800b5aa:	6033      	str	r3, [r6, #0]
 800b5ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5b0:	81a3      	strh	r3, [r4, #12]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	e03e      	b.n	800b636 <__swsetup_r+0xba>
 800b5b8:	4b25      	ldr	r3, [pc, #148]	; (800b650 <__swsetup_r+0xd4>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d101      	bne.n	800b5c2 <__swsetup_r+0x46>
 800b5be:	68ac      	ldr	r4, [r5, #8]
 800b5c0:	e7eb      	b.n	800b59a <__swsetup_r+0x1e>
 800b5c2:	4b24      	ldr	r3, [pc, #144]	; (800b654 <__swsetup_r+0xd8>)
 800b5c4:	429c      	cmp	r4, r3
 800b5c6:	bf08      	it	eq
 800b5c8:	68ec      	ldreq	r4, [r5, #12]
 800b5ca:	e7e6      	b.n	800b59a <__swsetup_r+0x1e>
 800b5cc:	0758      	lsls	r0, r3, #29
 800b5ce:	d512      	bpl.n	800b5f6 <__swsetup_r+0x7a>
 800b5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d2:	b141      	cbz	r1, 800b5e6 <__swsetup_r+0x6a>
 800b5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	d002      	beq.n	800b5e2 <__swsetup_r+0x66>
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff fcd5 	bl	800af8c <_free_r>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	6923      	ldr	r3, [r4, #16]
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f043 0308 	orr.w	r3, r3, #8
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	b94b      	cbnz	r3, 800b616 <__swsetup_r+0x9a>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b60c:	d003      	beq.n	800b616 <__swsetup_r+0x9a>
 800b60e:	4621      	mov	r1, r4
 800b610:	4630      	mov	r0, r6
 800b612:	f000 fa09 	bl	800ba28 <__smakebuf_r>
 800b616:	89a0      	ldrh	r0, [r4, #12]
 800b618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b61c:	f010 0301 	ands.w	r3, r0, #1
 800b620:	d00a      	beq.n	800b638 <__swsetup_r+0xbc>
 800b622:	2300      	movs	r3, #0
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	6963      	ldr	r3, [r4, #20]
 800b628:	425b      	negs	r3, r3
 800b62a:	61a3      	str	r3, [r4, #24]
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	b943      	cbnz	r3, 800b642 <__swsetup_r+0xc6>
 800b630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b634:	d1ba      	bne.n	800b5ac <__swsetup_r+0x30>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	0781      	lsls	r1, r0, #30
 800b63a:	bf58      	it	pl
 800b63c:	6963      	ldrpl	r3, [r4, #20]
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	e7f4      	b.n	800b62c <__swsetup_r+0xb0>
 800b642:	2000      	movs	r0, #0
 800b644:	e7f7      	b.n	800b636 <__swsetup_r+0xba>
 800b646:	bf00      	nop
 800b648:	2000009c 	.word	0x2000009c
 800b64c:	0800c11c 	.word	0x0800c11c
 800b650:	0800c13c 	.word	0x0800c13c
 800b654:	0800c0fc 	.word	0x0800c0fc

0800b658 <abort>:
 800b658:	b508      	push	{r3, lr}
 800b65a:	2006      	movs	r0, #6
 800b65c:	f000 fa4c 	bl	800baf8 <raise>
 800b660:	2001      	movs	r0, #1
 800b662:	f7f6 ff9d 	bl	80025a0 <_exit>
	...

0800b668 <__sflush_r>:
 800b668:	898a      	ldrh	r2, [r1, #12]
 800b66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66e:	4605      	mov	r5, r0
 800b670:	0710      	lsls	r0, r2, #28
 800b672:	460c      	mov	r4, r1
 800b674:	d458      	bmi.n	800b728 <__sflush_r+0xc0>
 800b676:	684b      	ldr	r3, [r1, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	dc05      	bgt.n	800b688 <__sflush_r+0x20>
 800b67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	dc02      	bgt.n	800b688 <__sflush_r+0x20>
 800b682:	2000      	movs	r0, #0
 800b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b68a:	2e00      	cmp	r6, #0
 800b68c:	d0f9      	beq.n	800b682 <__sflush_r+0x1a>
 800b68e:	2300      	movs	r3, #0
 800b690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b694:	682f      	ldr	r7, [r5, #0]
 800b696:	602b      	str	r3, [r5, #0]
 800b698:	d032      	beq.n	800b700 <__sflush_r+0x98>
 800b69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	075a      	lsls	r2, r3, #29
 800b6a0:	d505      	bpl.n	800b6ae <__sflush_r+0x46>
 800b6a2:	6863      	ldr	r3, [r4, #4]
 800b6a4:	1ac0      	subs	r0, r0, r3
 800b6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6a8:	b10b      	cbz	r3, 800b6ae <__sflush_r+0x46>
 800b6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6ac:	1ac0      	subs	r0, r0, r3
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6b4:	6a21      	ldr	r1, [r4, #32]
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	47b0      	blx	r6
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	d106      	bne.n	800b6ce <__sflush_r+0x66>
 800b6c0:	6829      	ldr	r1, [r5, #0]
 800b6c2:	291d      	cmp	r1, #29
 800b6c4:	d82c      	bhi.n	800b720 <__sflush_r+0xb8>
 800b6c6:	4a2a      	ldr	r2, [pc, #168]	; (800b770 <__sflush_r+0x108>)
 800b6c8:	40ca      	lsrs	r2, r1
 800b6ca:	07d6      	lsls	r6, r2, #31
 800b6cc:	d528      	bpl.n	800b720 <__sflush_r+0xb8>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	6062      	str	r2, [r4, #4]
 800b6d2:	04d9      	lsls	r1, r3, #19
 800b6d4:	6922      	ldr	r2, [r4, #16]
 800b6d6:	6022      	str	r2, [r4, #0]
 800b6d8:	d504      	bpl.n	800b6e4 <__sflush_r+0x7c>
 800b6da:	1c42      	adds	r2, r0, #1
 800b6dc:	d101      	bne.n	800b6e2 <__sflush_r+0x7a>
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	b903      	cbnz	r3, 800b6e4 <__sflush_r+0x7c>
 800b6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e6:	602f      	str	r7, [r5, #0]
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	d0ca      	beq.n	800b682 <__sflush_r+0x1a>
 800b6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f0:	4299      	cmp	r1, r3
 800b6f2:	d002      	beq.n	800b6fa <__sflush_r+0x92>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f7ff fc49 	bl	800af8c <_free_r>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b6fe:	e7c1      	b.n	800b684 <__sflush_r+0x1c>
 800b700:	6a21      	ldr	r1, [r4, #32]
 800b702:	2301      	movs	r3, #1
 800b704:	4628      	mov	r0, r5
 800b706:	47b0      	blx	r6
 800b708:	1c41      	adds	r1, r0, #1
 800b70a:	d1c7      	bne.n	800b69c <__sflush_r+0x34>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0c4      	beq.n	800b69c <__sflush_r+0x34>
 800b712:	2b1d      	cmp	r3, #29
 800b714:	d001      	beq.n	800b71a <__sflush_r+0xb2>
 800b716:	2b16      	cmp	r3, #22
 800b718:	d101      	bne.n	800b71e <__sflush_r+0xb6>
 800b71a:	602f      	str	r7, [r5, #0]
 800b71c:	e7b1      	b.n	800b682 <__sflush_r+0x1a>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b724:	81a3      	strh	r3, [r4, #12]
 800b726:	e7ad      	b.n	800b684 <__sflush_r+0x1c>
 800b728:	690f      	ldr	r7, [r1, #16]
 800b72a:	2f00      	cmp	r7, #0
 800b72c:	d0a9      	beq.n	800b682 <__sflush_r+0x1a>
 800b72e:	0793      	lsls	r3, r2, #30
 800b730:	680e      	ldr	r6, [r1, #0]
 800b732:	bf08      	it	eq
 800b734:	694b      	ldreq	r3, [r1, #20]
 800b736:	600f      	str	r7, [r1, #0]
 800b738:	bf18      	it	ne
 800b73a:	2300      	movne	r3, #0
 800b73c:	eba6 0807 	sub.w	r8, r6, r7
 800b740:	608b      	str	r3, [r1, #8]
 800b742:	f1b8 0f00 	cmp.w	r8, #0
 800b746:	dd9c      	ble.n	800b682 <__sflush_r+0x1a>
 800b748:	6a21      	ldr	r1, [r4, #32]
 800b74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b74c:	4643      	mov	r3, r8
 800b74e:	463a      	mov	r2, r7
 800b750:	4628      	mov	r0, r5
 800b752:	47b0      	blx	r6
 800b754:	2800      	cmp	r0, #0
 800b756:	dc06      	bgt.n	800b766 <__sflush_r+0xfe>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75e:	81a3      	strh	r3, [r4, #12]
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	e78e      	b.n	800b684 <__sflush_r+0x1c>
 800b766:	4407      	add	r7, r0
 800b768:	eba8 0800 	sub.w	r8, r8, r0
 800b76c:	e7e9      	b.n	800b742 <__sflush_r+0xda>
 800b76e:	bf00      	nop
 800b770:	20400001 	.word	0x20400001

0800b774 <_fflush_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	690b      	ldr	r3, [r1, #16]
 800b778:	4605      	mov	r5, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	b913      	cbnz	r3, 800b784 <_fflush_r+0x10>
 800b77e:	2500      	movs	r5, #0
 800b780:	4628      	mov	r0, r5
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	b118      	cbz	r0, 800b78e <_fflush_r+0x1a>
 800b786:	6983      	ldr	r3, [r0, #24]
 800b788:	b90b      	cbnz	r3, 800b78e <_fflush_r+0x1a>
 800b78a:	f000 f887 	bl	800b89c <__sinit>
 800b78e:	4b14      	ldr	r3, [pc, #80]	; (800b7e0 <_fflush_r+0x6c>)
 800b790:	429c      	cmp	r4, r3
 800b792:	d11b      	bne.n	800b7cc <_fflush_r+0x58>
 800b794:	686c      	ldr	r4, [r5, #4]
 800b796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0ef      	beq.n	800b77e <_fflush_r+0xa>
 800b79e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7a0:	07d0      	lsls	r0, r2, #31
 800b7a2:	d404      	bmi.n	800b7ae <_fflush_r+0x3a>
 800b7a4:	0599      	lsls	r1, r3, #22
 800b7a6:	d402      	bmi.n	800b7ae <_fflush_r+0x3a>
 800b7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7aa:	f000 f915 	bl	800b9d8 <__retarget_lock_acquire_recursive>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	f7ff ff59 	bl	800b668 <__sflush_r>
 800b7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7b8:	07da      	lsls	r2, r3, #31
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	d4e0      	bmi.n	800b780 <_fflush_r+0xc>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	059b      	lsls	r3, r3, #22
 800b7c2:	d4dd      	bmi.n	800b780 <_fflush_r+0xc>
 800b7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c6:	f000 f908 	bl	800b9da <__retarget_lock_release_recursive>
 800b7ca:	e7d9      	b.n	800b780 <_fflush_r+0xc>
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <_fflush_r+0x70>)
 800b7ce:	429c      	cmp	r4, r3
 800b7d0:	d101      	bne.n	800b7d6 <_fflush_r+0x62>
 800b7d2:	68ac      	ldr	r4, [r5, #8]
 800b7d4:	e7df      	b.n	800b796 <_fflush_r+0x22>
 800b7d6:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <_fflush_r+0x74>)
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	bf08      	it	eq
 800b7dc:	68ec      	ldreq	r4, [r5, #12]
 800b7de:	e7da      	b.n	800b796 <_fflush_r+0x22>
 800b7e0:	0800c11c 	.word	0x0800c11c
 800b7e4:	0800c13c 	.word	0x0800c13c
 800b7e8:	0800c0fc 	.word	0x0800c0fc

0800b7ec <std>:
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7fa:	6083      	str	r3, [r0, #8]
 800b7fc:	8181      	strh	r1, [r0, #12]
 800b7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800b800:	81c2      	strh	r2, [r0, #14]
 800b802:	6183      	str	r3, [r0, #24]
 800b804:	4619      	mov	r1, r3
 800b806:	2208      	movs	r2, #8
 800b808:	305c      	adds	r0, #92	; 0x5c
 800b80a:	f7fd fd1d 	bl	8009248 <memset>
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <std+0x38>)
 800b810:	6263      	str	r3, [r4, #36]	; 0x24
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <std+0x3c>)
 800b814:	62a3      	str	r3, [r4, #40]	; 0x28
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x40>)
 800b818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <std+0x44>)
 800b81c:	6224      	str	r4, [r4, #32]
 800b81e:	6323      	str	r3, [r4, #48]	; 0x30
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	0800bb31 	.word	0x0800bb31
 800b828:	0800bb53 	.word	0x0800bb53
 800b82c:	0800bb8b 	.word	0x0800bb8b
 800b830:	0800bbaf 	.word	0x0800bbaf

0800b834 <_cleanup_r>:
 800b834:	4901      	ldr	r1, [pc, #4]	; (800b83c <_cleanup_r+0x8>)
 800b836:	f000 b8af 	b.w	800b998 <_fwalk_reent>
 800b83a:	bf00      	nop
 800b83c:	0800b775 	.word	0x0800b775

0800b840 <__sfmoreglue>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	2268      	movs	r2, #104	; 0x68
 800b844:	1e4d      	subs	r5, r1, #1
 800b846:	4355      	muls	r5, r2
 800b848:	460e      	mov	r6, r1
 800b84a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b84e:	f7ff fc09 	bl	800b064 <_malloc_r>
 800b852:	4604      	mov	r4, r0
 800b854:	b140      	cbz	r0, 800b868 <__sfmoreglue+0x28>
 800b856:	2100      	movs	r1, #0
 800b858:	e9c0 1600 	strd	r1, r6, [r0]
 800b85c:	300c      	adds	r0, #12
 800b85e:	60a0      	str	r0, [r4, #8]
 800b860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b864:	f7fd fcf0 	bl	8009248 <memset>
 800b868:	4620      	mov	r0, r4
 800b86a:	bd70      	pop	{r4, r5, r6, pc}

0800b86c <__sfp_lock_acquire>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__sfp_lock_acquire+0x8>)
 800b86e:	f000 b8b3 	b.w	800b9d8 <__retarget_lock_acquire_recursive>
 800b872:	bf00      	nop
 800b874:	20000819 	.word	0x20000819

0800b878 <__sfp_lock_release>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__sfp_lock_release+0x8>)
 800b87a:	f000 b8ae 	b.w	800b9da <__retarget_lock_release_recursive>
 800b87e:	bf00      	nop
 800b880:	20000819 	.word	0x20000819

0800b884 <__sinit_lock_acquire>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__sinit_lock_acquire+0x8>)
 800b886:	f000 b8a7 	b.w	800b9d8 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	2000081a 	.word	0x2000081a

0800b890 <__sinit_lock_release>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__sinit_lock_release+0x8>)
 800b892:	f000 b8a2 	b.w	800b9da <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	2000081a 	.word	0x2000081a

0800b89c <__sinit>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f7ff fff0 	bl	800b884 <__sinit_lock_acquire>
 800b8a4:	69a3      	ldr	r3, [r4, #24]
 800b8a6:	b11b      	cbz	r3, 800b8b0 <__sinit+0x14>
 800b8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ac:	f7ff bff0 	b.w	800b890 <__sinit_lock_release>
 800b8b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8b4:	6523      	str	r3, [r4, #80]	; 0x50
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <__sinit+0x68>)
 800b8b8:	4a13      	ldr	r2, [pc, #76]	; (800b908 <__sinit+0x6c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	bf04      	itt	eq
 800b8c2:	2301      	moveq	r3, #1
 800b8c4:	61a3      	streq	r3, [r4, #24]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f820 	bl	800b90c <__sfp>
 800b8cc:	6060      	str	r0, [r4, #4]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 f81c 	bl	800b90c <__sfp>
 800b8d4:	60a0      	str	r0, [r4, #8]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f818 	bl	800b90c <__sfp>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	60e0      	str	r0, [r4, #12]
 800b8e0:	2104      	movs	r1, #4
 800b8e2:	6860      	ldr	r0, [r4, #4]
 800b8e4:	f7ff ff82 	bl	800b7ec <std>
 800b8e8:	68a0      	ldr	r0, [r4, #8]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	2109      	movs	r1, #9
 800b8ee:	f7ff ff7d 	bl	800b7ec <std>
 800b8f2:	68e0      	ldr	r0, [r4, #12]
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	2112      	movs	r1, #18
 800b8f8:	f7ff ff78 	bl	800b7ec <std>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	61a3      	str	r3, [r4, #24]
 800b900:	e7d2      	b.n	800b8a8 <__sinit+0xc>
 800b902:	bf00      	nop
 800b904:	0800bd80 	.word	0x0800bd80
 800b908:	0800b835 	.word	0x0800b835

0800b90c <__sfp>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	4607      	mov	r7, r0
 800b910:	f7ff ffac 	bl	800b86c <__sfp_lock_acquire>
 800b914:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <__sfp+0x84>)
 800b916:	681e      	ldr	r6, [r3, #0]
 800b918:	69b3      	ldr	r3, [r6, #24]
 800b91a:	b913      	cbnz	r3, 800b922 <__sfp+0x16>
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff ffbd 	bl	800b89c <__sinit>
 800b922:	3648      	adds	r6, #72	; 0x48
 800b924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b928:	3b01      	subs	r3, #1
 800b92a:	d503      	bpl.n	800b934 <__sfp+0x28>
 800b92c:	6833      	ldr	r3, [r6, #0]
 800b92e:	b30b      	cbz	r3, 800b974 <__sfp+0x68>
 800b930:	6836      	ldr	r6, [r6, #0]
 800b932:	e7f7      	b.n	800b924 <__sfp+0x18>
 800b934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b938:	b9d5      	cbnz	r5, 800b970 <__sfp+0x64>
 800b93a:	4b16      	ldr	r3, [pc, #88]	; (800b994 <__sfp+0x88>)
 800b93c:	60e3      	str	r3, [r4, #12]
 800b93e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b942:	6665      	str	r5, [r4, #100]	; 0x64
 800b944:	f000 f847 	bl	800b9d6 <__retarget_lock_init_recursive>
 800b948:	f7ff ff96 	bl	800b878 <__sfp_lock_release>
 800b94c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b954:	6025      	str	r5, [r4, #0]
 800b956:	61a5      	str	r5, [r4, #24]
 800b958:	2208      	movs	r2, #8
 800b95a:	4629      	mov	r1, r5
 800b95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b960:	f7fd fc72 	bl	8009248 <memset>
 800b964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b96c:	4620      	mov	r0, r4
 800b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b970:	3468      	adds	r4, #104	; 0x68
 800b972:	e7d9      	b.n	800b928 <__sfp+0x1c>
 800b974:	2104      	movs	r1, #4
 800b976:	4638      	mov	r0, r7
 800b978:	f7ff ff62 	bl	800b840 <__sfmoreglue>
 800b97c:	4604      	mov	r4, r0
 800b97e:	6030      	str	r0, [r6, #0]
 800b980:	2800      	cmp	r0, #0
 800b982:	d1d5      	bne.n	800b930 <__sfp+0x24>
 800b984:	f7ff ff78 	bl	800b878 <__sfp_lock_release>
 800b988:	230c      	movs	r3, #12
 800b98a:	603b      	str	r3, [r7, #0]
 800b98c:	e7ee      	b.n	800b96c <__sfp+0x60>
 800b98e:	bf00      	nop
 800b990:	0800bd80 	.word	0x0800bd80
 800b994:	ffff0001 	.word	0xffff0001

0800b998 <_fwalk_reent>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	4606      	mov	r6, r0
 800b99e:	4688      	mov	r8, r1
 800b9a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9a4:	2700      	movs	r7, #0
 800b9a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9aa:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ae:	d505      	bpl.n	800b9bc <_fwalk_reent+0x24>
 800b9b0:	6824      	ldr	r4, [r4, #0]
 800b9b2:	2c00      	cmp	r4, #0
 800b9b4:	d1f7      	bne.n	800b9a6 <_fwalk_reent+0xe>
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9bc:	89ab      	ldrh	r3, [r5, #12]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d907      	bls.n	800b9d2 <_fwalk_reent+0x3a>
 800b9c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	d003      	beq.n	800b9d2 <_fwalk_reent+0x3a>
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	47c0      	blx	r8
 800b9d0:	4307      	orrs	r7, r0
 800b9d2:	3568      	adds	r5, #104	; 0x68
 800b9d4:	e7e9      	b.n	800b9aa <_fwalk_reent+0x12>

0800b9d6 <__retarget_lock_init_recursive>:
 800b9d6:	4770      	bx	lr

0800b9d8 <__retarget_lock_acquire_recursive>:
 800b9d8:	4770      	bx	lr

0800b9da <__retarget_lock_release_recursive>:
 800b9da:	4770      	bx	lr

0800b9dc <__swhatbuf_r>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	460e      	mov	r6, r1
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	b096      	sub	sp, #88	; 0x58
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	461d      	mov	r5, r3
 800b9ec:	da08      	bge.n	800ba00 <__swhatbuf_r+0x24>
 800b9ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	602a      	str	r2, [r5, #0]
 800b9f6:	061a      	lsls	r2, r3, #24
 800b9f8:	d410      	bmi.n	800ba1c <__swhatbuf_r+0x40>
 800b9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9fe:	e00e      	b.n	800ba1e <__swhatbuf_r+0x42>
 800ba00:	466a      	mov	r2, sp
 800ba02:	f000 f8fb 	bl	800bbfc <_fstat_r>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	dbf1      	blt.n	800b9ee <__swhatbuf_r+0x12>
 800ba0a:	9a01      	ldr	r2, [sp, #4]
 800ba0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba14:	425a      	negs	r2, r3
 800ba16:	415a      	adcs	r2, r3
 800ba18:	602a      	str	r2, [r5, #0]
 800ba1a:	e7ee      	b.n	800b9fa <__swhatbuf_r+0x1e>
 800ba1c:	2340      	movs	r3, #64	; 0x40
 800ba1e:	2000      	movs	r0, #0
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	b016      	add	sp, #88	; 0x58
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba28 <__smakebuf_r>:
 800ba28:	898b      	ldrh	r3, [r1, #12]
 800ba2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba2c:	079d      	lsls	r5, r3, #30
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460c      	mov	r4, r1
 800ba32:	d507      	bpl.n	800ba44 <__smakebuf_r+0x1c>
 800ba34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	6163      	str	r3, [r4, #20]
 800ba40:	b002      	add	sp, #8
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	ab01      	add	r3, sp, #4
 800ba46:	466a      	mov	r2, sp
 800ba48:	f7ff ffc8 	bl	800b9dc <__swhatbuf_r>
 800ba4c:	9900      	ldr	r1, [sp, #0]
 800ba4e:	4605      	mov	r5, r0
 800ba50:	4630      	mov	r0, r6
 800ba52:	f7ff fb07 	bl	800b064 <_malloc_r>
 800ba56:	b948      	cbnz	r0, 800ba6c <__smakebuf_r+0x44>
 800ba58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5c:	059a      	lsls	r2, r3, #22
 800ba5e:	d4ef      	bmi.n	800ba40 <__smakebuf_r+0x18>
 800ba60:	f023 0303 	bic.w	r3, r3, #3
 800ba64:	f043 0302 	orr.w	r3, r3, #2
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	e7e3      	b.n	800ba34 <__smakebuf_r+0xc>
 800ba6c:	4b0d      	ldr	r3, [pc, #52]	; (800baa4 <__smakebuf_r+0x7c>)
 800ba6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	6020      	str	r0, [r4, #0]
 800ba74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	9b00      	ldr	r3, [sp, #0]
 800ba7c:	6163      	str	r3, [r4, #20]
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	6120      	str	r0, [r4, #16]
 800ba82:	b15b      	cbz	r3, 800ba9c <__smakebuf_r+0x74>
 800ba84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 f8c9 	bl	800bc20 <_isatty_r>
 800ba8e:	b128      	cbz	r0, 800ba9c <__smakebuf_r+0x74>
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f023 0303 	bic.w	r3, r3, #3
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	89a0      	ldrh	r0, [r4, #12]
 800ba9e:	4305      	orrs	r5, r0
 800baa0:	81a5      	strh	r5, [r4, #12]
 800baa2:	e7cd      	b.n	800ba40 <__smakebuf_r+0x18>
 800baa4:	0800b835 	.word	0x0800b835

0800baa8 <_raise_r>:
 800baa8:	291f      	cmp	r1, #31
 800baaa:	b538      	push	{r3, r4, r5, lr}
 800baac:	4604      	mov	r4, r0
 800baae:	460d      	mov	r5, r1
 800bab0:	d904      	bls.n	800babc <_raise_r+0x14>
 800bab2:	2316      	movs	r3, #22
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800babe:	b112      	cbz	r2, 800bac6 <_raise_r+0x1e>
 800bac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bac4:	b94b      	cbnz	r3, 800bada <_raise_r+0x32>
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 f830 	bl	800bb2c <_getpid_r>
 800bacc:	462a      	mov	r2, r5
 800bace:	4601      	mov	r1, r0
 800bad0:	4620      	mov	r0, r4
 800bad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad6:	f000 b817 	b.w	800bb08 <_kill_r>
 800bada:	2b01      	cmp	r3, #1
 800badc:	d00a      	beq.n	800baf4 <_raise_r+0x4c>
 800bade:	1c59      	adds	r1, r3, #1
 800bae0:	d103      	bne.n	800baea <_raise_r+0x42>
 800bae2:	2316      	movs	r3, #22
 800bae4:	6003      	str	r3, [r0, #0]
 800bae6:	2001      	movs	r0, #1
 800bae8:	e7e7      	b.n	800baba <_raise_r+0x12>
 800baea:	2400      	movs	r4, #0
 800baec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baf0:	4628      	mov	r0, r5
 800baf2:	4798      	blx	r3
 800baf4:	2000      	movs	r0, #0
 800baf6:	e7e0      	b.n	800baba <_raise_r+0x12>

0800baf8 <raise>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <raise+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f7ff bfd3 	b.w	800baa8 <_raise_r>
 800bb02:	bf00      	nop
 800bb04:	2000009c 	.word	0x2000009c

0800bb08 <_kill_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d07      	ldr	r5, [pc, #28]	; (800bb28 <_kill_r+0x20>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	4611      	mov	r1, r2
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	f7f6 fd33 	bl	8002580 <_kill>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	d102      	bne.n	800bb24 <_kill_r+0x1c>
 800bb1e:	682b      	ldr	r3, [r5, #0]
 800bb20:	b103      	cbz	r3, 800bb24 <_kill_r+0x1c>
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	bd38      	pop	{r3, r4, r5, pc}
 800bb26:	bf00      	nop
 800bb28:	20000814 	.word	0x20000814

0800bb2c <_getpid_r>:
 800bb2c:	f7f6 bd20 	b.w	8002570 <_getpid>

0800bb30 <__sread>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	460c      	mov	r4, r1
 800bb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb38:	f000 f894 	bl	800bc64 <_read_r>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	bfab      	itete	ge
 800bb40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb42:	89a3      	ldrhlt	r3, [r4, #12]
 800bb44:	181b      	addge	r3, r3, r0
 800bb46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb4a:	bfac      	ite	ge
 800bb4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb4e:	81a3      	strhlt	r3, [r4, #12]
 800bb50:	bd10      	pop	{r4, pc}

0800bb52 <__swrite>:
 800bb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb56:	461f      	mov	r7, r3
 800bb58:	898b      	ldrh	r3, [r1, #12]
 800bb5a:	05db      	lsls	r3, r3, #23
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	4616      	mov	r6, r2
 800bb62:	d505      	bpl.n	800bb70 <__swrite+0x1e>
 800bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb68:	2302      	movs	r3, #2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f000 f868 	bl	800bc40 <_lseek_r>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	4632      	mov	r2, r6
 800bb7e:	463b      	mov	r3, r7
 800bb80:	4628      	mov	r0, r5
 800bb82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb86:	f000 b817 	b.w	800bbb8 <_write_r>

0800bb8a <__sseek>:
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb92:	f000 f855 	bl	800bc40 <_lseek_r>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	bf15      	itete	ne
 800bb9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bba6:	81a3      	strheq	r3, [r4, #12]
 800bba8:	bf18      	it	ne
 800bbaa:	81a3      	strhne	r3, [r4, #12]
 800bbac:	bd10      	pop	{r4, pc}

0800bbae <__sclose>:
 800bbae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb2:	f000 b813 	b.w	800bbdc <_close_r>
	...

0800bbb8 <_write_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	; (800bbd8 <_write_r+0x20>)
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f6 fd11 	bl	80025ee <_write>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_write_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_write_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20000814 	.word	0x20000814

0800bbdc <_close_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	; (800bbf8 <_close_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f7f6 fd1d 	bl	8002626 <_close>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_close_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_close_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	20000814 	.word	0x20000814

0800bbfc <_fstat_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	; (800bc1c <_fstat_r+0x20>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	4611      	mov	r1, r2
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	f7f6 fd18 	bl	800263e <_fstat>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d102      	bne.n	800bc18 <_fstat_r+0x1c>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	b103      	cbz	r3, 800bc18 <_fstat_r+0x1c>
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000814 	.word	0x20000814

0800bc20 <_isatty_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d06      	ldr	r5, [pc, #24]	; (800bc3c <_isatty_r+0x1c>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f7f6 fd17 	bl	800265e <_isatty>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_isatty_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_isatty_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20000814 	.word	0x20000814

0800bc40 <_lseek_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_lseek_r+0x20>)
 800bc44:	4604      	mov	r4, r0
 800bc46:	4608      	mov	r0, r1
 800bc48:	4611      	mov	r1, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f7f6 fd10 	bl	8002674 <_lseek>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_lseek_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_lseek_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20000814 	.word	0x20000814

0800bc64 <_read_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_read_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f6 fc9e 	bl	80025b4 <_read>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_read_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_read_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20000814 	.word	0x20000814

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
