
DiplomArbeitTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800aff8  0800aff8  0001aff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b484  0800b484  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b48c  0800b48c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b48c  0800b48c  0001b48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001e8  0800b67c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0800b67c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f27  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2f  00000000  00000000  0003813f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041b9  00000000  00000000  0003d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018035  00000000  00000000  000416c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc86a  00000000  00000000  000596f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125f60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006894  00000000  00000000  00125fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800afe0 	.word	0x0800afe0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800afe0 	.word	0x0800afe0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <WriteToShiftRegInvers>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Latch HIGH
}


void WriteToShiftRegInvers(uint8_t value, uint8_t value2)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Latch LOW
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4834      	ldr	r0, [pc, #208]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8000fb2:	f002 fa23 	bl	80033fc <HAL_GPIO_WritePin>

	// Send Data
	uint8_t mask = 0b10000000;
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	75fb      	strb	r3, [r7, #23]
	  for (int i = 0; i < 8; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	e026      	b.n	800100e <WriteToShiftRegInvers+0x72>
	    // Send one bit of data
	    bool state = ((value & mask) > 0);
 8000fc0:	79fa      	ldrb	r2, [r7, #7]
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	72bb      	strb	r3, [r7, #10]
	    if(state == 1)
 8000fd2:	7abb      	ldrb	r3, [r7, #10]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <WriteToShiftRegInvers+0x48>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Send 0
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4829      	ldr	r0, [pc, #164]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8000fde:	f002 fa0d 	bl	80033fc <HAL_GPIO_WritePin>
 8000fe2:	e004      	b.n	8000fee <WriteToShiftRegInvers+0x52>
	    else
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Send 1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	4826      	ldr	r0, [pc, #152]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8000fea:	f002 fa07 	bl	80033fc <HAL_GPIO_WritePin>
	    // Pulse the CLOCK pin so that the shift register receives the bit of data
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Clock High
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4824      	ldr	r0, [pc, #144]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8000ff4:	f002 fa02 	bl	80033fc <HAL_GPIO_WritePin>
	    //HAL_Delay (1);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Clock LOW
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8000ffe:	f002 f9fd 	bl	80033fc <HAL_GPIO_WritePin>
	    mask >>= 1;
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]
	  for (int i = 0; i < 8; i++) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b07      	cmp	r3, #7
 8001012:	ddd5      	ble.n	8000fc0 <WriteToShiftRegInvers+0x24>
	  }

	  mask = 0b10000000;
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	75fb      	strb	r3, [r7, #23]
	  	  for (int i = 0; i < 8; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e026      	b.n	800106c <WriteToShiftRegInvers+0xd0>
	  	    // Send one bit of data
	  	    bool state = ((value2 & mask) > 0);
 800101e:	79ba      	ldrb	r2, [r7, #6]
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	4013      	ands	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf14      	ite	ne
 800102a:	2301      	movne	r3, #1
 800102c:	2300      	moveq	r3, #0
 800102e:	72fb      	strb	r3, [r7, #11]
	  	    if(state == 1)
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <WriteToShiftRegInvers+0xa6>
	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Send 0
 8001036:	2200      	movs	r2, #0
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	4812      	ldr	r0, [pc, #72]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 800103c:	f002 f9de 	bl	80033fc <HAL_GPIO_WritePin>
 8001040:	e004      	b.n	800104c <WriteToShiftRegInvers+0xb0>
	  	    else
	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Send 1
 8001042:	2201      	movs	r2, #1
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8001048:	f002 f9d8 	bl	80033fc <HAL_GPIO_WritePin>
	  	    // Pulse the CLOCK pin so that the shift register receives the bit of data
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Clock High
 800104c:	2201      	movs	r2, #1
 800104e:	2120      	movs	r1, #32
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8001052:	f002 f9d3 	bl	80033fc <HAL_GPIO_WritePin>
	  	    //HAL_Delay (1);
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Clock LOW
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 800105c:	f002 f9ce 	bl	80033fc <HAL_GPIO_WritePin>
	  	    mask >>= 1;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	75fb      	strb	r3, [r7, #23]
	  	  for (int i = 0; i < 8; i++) {
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b07      	cmp	r3, #7
 8001070:	ddd5      	ble.n	800101e <WriteToShiftRegInvers+0x82>
	  	  }

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Latch HIGH
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <WriteToShiftRegInvers+0xe8>)
 8001078:	f002 f9c0 	bl	80033fc <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	48000400 	.word	0x48000400

08001088 <WriteToShiftRegBit>:

void WriteToShiftRegBit(uint8_t bit)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Latch LOW
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <WriteToShiftRegBit+0x58>)
 8001098:	f002 f9b0 	bl	80033fc <HAL_GPIO_WritePin>
	if(bit == 1)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <WriteToShiftRegBit+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Send 1
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <WriteToShiftRegBit+0x58>)
 80010a8:	f002 f9a8 	bl	80033fc <HAL_GPIO_WritePin>
 80010ac:	e004      	b.n	80010b8 <WriteToShiftRegBit+0x30>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Send 0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <WriteToShiftRegBit+0x58>)
 80010b4:	f002 f9a2 	bl	80033fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Clock High
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <WriteToShiftRegBit+0x58>)
 80010be:	f002 f99d 	bl	80033fc <HAL_GPIO_WritePin>
	//HAL_Delay (1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Clock LOW
 80010c2:	2200      	movs	r2, #0
 80010c4:	2120      	movs	r1, #32
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <WriteToShiftRegBit+0x58>)
 80010c8:	f002 f998 	bl	80033fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Latch HIGH
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <WriteToShiftRegBit+0x58>)
 80010d2:	f002 f993 	bl	80033fc <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	48000400 	.word	0x48000400

080010e4 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	69b9      	ldr	r1, [r7, #24]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	fb03 f202 	mul.w	r2, r3, r2
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1acb      	subs	r3, r1, r3
 8001108:	fbb2 f2f3 	udiv	r2, r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4413      	add	r3, r2
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	Read = 1;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_UART_TxCpltCallback+0x20>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	Write = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_UART_TxCpltCallback+0x24>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	200003d8 	.word	0x200003d8
 8001140:	20000000 	.word	0x20000000

08001144 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	Read = 0;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_UART_RxCpltCallback+0x20>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
	Write = 1;
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_UART_RxCpltCallback+0x24>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200003d8 	.word	0x200003d8
 8001168:	20000000 	.word	0x20000000

0800116c <ReadMPU>:
uint8_t ServoData[5] = {25};
uint8_t RX_Counter = 0;


void ReadMPU()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
				  //MPU6050_Read_Gyro(&hi2c1, &MPU6050[i]);
			  }
		  }
		  */
		  // Read all MPU new Shift Reg code
		  WriteToShiftRegBit(0);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ff88 	bl	8001088 <WriteToShiftRegBit>
		  for(int i = 0; i < MPU_COUNT; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	e013      	b.n	80011a6 <ReadMPU+0x3a>
		  {
			  HAL_Delay(16);
 800117e:	2010      	movs	r0, #16
 8001180:	f001 fb56 	bl	8002830 <HAL_Delay>
			  MPU6050_Read_All(&hi2c1, &MPU6050[i]);
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <ReadMPU+0x50>)
 8001190:	4413      	add	r3, r2
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <ReadMPU+0x54>)
 8001196:	f000 fc87 	bl	8001aa8 <MPU6050_Read_All>
			  WriteToShiftRegBit(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff74 	bl	8001088 <WriteToShiftRegBit>
		  for(int i = 0; i < MPU_COUNT; i++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	dde8      	ble.n	800117e <ReadMPU+0x12>
		  }
		  WriteToShiftRegInvers(0,0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fef4 	bl	8000f9c <WriteToShiftRegInvers>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200003e0 	.word	0x200003e0
 80011c0:	20000204 	.word	0x20000204
 80011c4:	00000000 	.word	0x00000000

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ce:	f001 fabe 	bl	800274e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d2:	f000 f96d 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d6:	f000 fbbf 	bl	8001958 <MX_GPIO_Init>
  MX_DMA_Init();
 80011da:	f000 fb93 	bl	8001904 <MX_DMA_Init>
  MX_TIM1_Init();
 80011de:	f000 f9f3 	bl	80015c8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80011e2:	f000 f9b1 	bl	8001548 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011e6:	f000 fb3f 	bl	8001868 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80011ea:	f000 fac5 	bl	8001778 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all MPU max 16
  WriteToShiftRegInvers(0,0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fed3 	bl	8000f9c <WriteToShiftRegInvers>
  WriteToShiftRegBit(0);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ff46 	bl	8001088 <WriteToShiftRegBit>
  for(int i = 0; i < MPU_COUNT; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e06b      	b.n	80012da <main+0x112>
  {


	  MPU6050[i].KalmanX.Q_angle = 0.001f;
 8001202:	499d      	ldr	r1, [pc, #628]	; (8001478 <main+0x2b0>)
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	440b      	add	r3, r1
 8001210:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001214:	a392      	add	r3, pc, #584	; (adr r3, 8001460 <main+0x298>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	e9c1 2300 	strd	r2, r3, [r1]
	  MPU6050[i].KalmanX.Q_bias = 0.003f;
 800121e:	4996      	ldr	r1, [pc, #600]	; (8001478 <main+0x2b0>)
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	440b      	add	r3, r1
 800122c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001230:	a38d      	add	r3, pc, #564	; (adr r3, 8001468 <main+0x2a0>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	e9c1 2300 	strd	r2, r3, [r1]
	  MPU6050[i].KalmanX.R_measure = 0.03f;
 800123a:	498f      	ldr	r1, [pc, #572]	; (8001478 <main+0x2b0>)
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	015b      	lsls	r3, r3, #5
 8001246:	440b      	add	r3, r1
 8001248:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800124c:	a388      	add	r3, pc, #544	; (adr r3, 8001470 <main+0x2a8>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9c1 2300 	strd	r2, r3, [r1]

	  MPU6050[i].KalmanY.Q_angle = 0.001f;
 8001256:	4988      	ldr	r1, [pc, #544]	; (8001478 <main+0x2b0>)
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	440b      	add	r3, r1
 8001264:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8001268:	a37d      	add	r3, pc, #500	; (adr r3, 8001460 <main+0x298>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
	  MPU6050[i].KalmanY.Q_bias = 0.003f;
 8001272:	4981      	ldr	r1, [pc, #516]	; (8001478 <main+0x2b0>)
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	440b      	add	r3, r1
 8001280:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8001284:	a378      	add	r3, pc, #480	; (adr r3, 8001468 <main+0x2a0>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	e9c1 2300 	strd	r2, r3, [r1]
	  MPU6050[i].KalmanY.R_measure = 0.03f;
 800128e:	497a      	ldr	r1, [pc, #488]	; (8001478 <main+0x2b0>)
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	440b      	add	r3, r1
 800129c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80012a0:	a373      	add	r3, pc, #460	; (adr r3, 8001470 <main+0x2a8>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	e9c1 2300 	strd	r2, r3, [r1]


	  HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f001 fac0 	bl	8002830 <HAL_Delay>
	  while(MPU6050_Init(&hi2c1) != 1)
 80012b0:	e002      	b.n	80012b8 <main+0xf0>
	  {
		  HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f001 fabc 	bl	8002830 <HAL_Delay>
	  while(MPU6050_Init(&hi2c1) != 1)
 80012b8:	4870      	ldr	r0, [pc, #448]	; (800147c <main+0x2b4>)
 80012ba:	f000 fb9c 	bl	80019f6 <MPU6050_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d1f6      	bne.n	80012b2 <main+0xea>
	  }
	  WriteToShiftRegBit(1);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fedf 	bl	8001088 <WriteToShiftRegBit>
	  MPU_INITIALIZE_COUNT++;
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <main+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <main+0x2b8>)
 80012d2:	6013      	str	r3, [r2, #0]
  for(int i = 0; i < MPU_COUNT; i++)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3301      	adds	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	dd90      	ble.n	8001202 <main+0x3a>
  }
  WriteToShiftRegInvers(0,0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fe5a 	bl	8000f9c <WriteToShiftRegInvers>

  // Initialize PWM For Servo
  // 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4866      	ldr	r0, [pc, #408]	; (8001484 <main+0x2bc>)
 80012ec:	f003 ff1a 	bl	8005124 <HAL_TIM_PWM_Start>
  // 2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4864      	ldr	r0, [pc, #400]	; (8001484 <main+0x2bc>)
 80012f4:	f003 ff16 	bl	8005124 <HAL_TIM_PWM_Start>
  // 3
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012f8:	2108      	movs	r1, #8
 80012fa:	4862      	ldr	r0, [pc, #392]	; (8001484 <main+0x2bc>)
 80012fc:	f003 ff12 	bl	8005124 <HAL_TIM_PWM_Start>
  // 4
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001300:	210c      	movs	r1, #12
 8001302:	4860      	ldr	r0, [pc, #384]	; (8001484 <main+0x2bc>)
 8001304:	f003 ff0e 	bl	8005124 <HAL_TIM_PWM_Start>
  // 5
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001308:	2104      	movs	r1, #4
 800130a:	485f      	ldr	r0, [pc, #380]	; (8001488 <main+0x2c0>)
 800130c:	f003 ff0a 	bl	8005124 <HAL_TIM_PWM_Start>
  int time1;
  int time2;

  while (1)
  {
	  time1 = HAL_GetTick();
 8001310:	f001 fa82 	bl	8002818 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	60bb      	str	r3, [r7, #8]
	  // Read Gyrosensors
	  ReadMPU();
 8001318:	f7ff ff28 	bl	800116c <ReadMPU>

	  // Send Data to PC
	  if(Write == 1)
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <main+0x2c4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <main+0x16e>
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <main+0x2b0>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	  {
      char buffer[sizeof(float)];
	  memcpy(buffer,&MPU6050[0].KalmanAngleX,sizeof(float));
 8001328:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit_IT(&huart2,buffer,sizeof(float));
 800132a:	463b      	mov	r3, r7
 800132c:	2204      	movs	r2, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4857      	ldr	r0, [pc, #348]	; (8001490 <main+0x2c8>)
 8001332:	f004 ffbf 	bl	80062b4 <HAL_UART_Transmit_IT>
	  }

	  // Receive Data
	  if(Read == 1)
 8001336:	4b57      	ldr	r3, [pc, #348]	; (8001494 <main+0x2cc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d164      	bne.n	8001408 <main+0x240>
	  {
		  // Data = Position[Degrees: 0 - 180]
		  // Receive Data from PC		One number at a Time : 10 then send 20 then send 30 then send 40 then send 50
		  if(ReceiveMode == 0)
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <main+0x2d0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d134      	bne.n	80013b0 <main+0x1e8>
		  {
			  if(HAL_UART_Receive_DMA(&huart2,&RXData,1) == HAL_OK)
 8001346:	2201      	movs	r2, #1
 8001348:	4954      	ldr	r1, [pc, #336]	; (800149c <main+0x2d4>)
 800134a:	4851      	ldr	r0, [pc, #324]	; (8001490 <main+0x2c8>)
 800134c:	f005 f85a 	bl	8006404 <HAL_UART_Receive_DMA>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12c      	bne.n	80013b0 <main+0x1e8>
			  {
				  //Update Servo from Degrees to DutyCycle
				  if(RXData != 255) // 255 = Free Rotation of Servo
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <main+0x2d4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d015      	beq.n	800138a <main+0x1c2>
				  {
					  if(RXData <= 180 && RXData >= 0 )
 800135e:	4b4f      	ldr	r3, [pc, #316]	; (800149c <main+0x2d4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2bb4      	cmp	r3, #180	; 0xb4
 8001364:	d817      	bhi.n	8001396 <main+0x1ce>
					  {
						  ServoData[RX_Counter] = MAP(RXData,0,180,25,125); // Remap from Degrees to Duty Cycle
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <main+0x2d4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	237d      	movs	r3, #125	; 0x7d
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2319      	movs	r3, #25
 8001372:	22b4      	movs	r2, #180	; 0xb4
 8001374:	2100      	movs	r1, #0
 8001376:	f7ff feb5 	bl	80010e4 <MAP>
 800137a:	4601      	mov	r1, r0
 800137c:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <main+0x2d8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <main+0x2dc>)
 8001386:	5499      	strb	r1, [r3, r2]
 8001388:	e005      	b.n	8001396 <main+0x1ce>
					  }
				  }
				  else
				  {
					  ServoData[RX_Counter] = 0;
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <main+0x2d8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <main+0x2dc>)
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]
				  }

				  RX_Counter++;
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <main+0x2d8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <main+0x2d8>)
 80013a0:	701a      	strb	r2, [r3, #0]
				  if(RX_Counter >= 5)
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <main+0x2d8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d902      	bls.n	80013b0 <main+0x1e8>
					  RX_Counter = 0;
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <main+0x2d8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  // Data = Servonumber[int: 1 - 5] Position[Degrees: 0 - 180]
		  // Receive Data from Pc with a Servo in mind : 1 59 ,2 30 ,5 40 ,1 80
		  if(ReceiveMode == 1)
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <main+0x2d0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d127      	bne.n	8001408 <main+0x240>
		  {
			  if(HAL_UART_Receive_DMA(&huart2,&RXDataS,2) == HAL_OK)
 80013b8:	2202      	movs	r2, #2
 80013ba:	493b      	ldr	r1, [pc, #236]	; (80014a8 <main+0x2e0>)
 80013bc:	4834      	ldr	r0, [pc, #208]	; (8001490 <main+0x2c8>)
 80013be:	f005 f821 	bl	8006404 <HAL_UART_Receive_DMA>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11f      	bne.n	8001408 <main+0x240>
			  {
				  //Update Servo from Degrees to DutyCycle
				  if(RXDataS[1] != 255) // 255 = Free Rotation of Servo
 80013c8:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <main+0x2e0>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	2bff      	cmp	r3, #255	; 0xff
 80013ce:	d015      	beq.n	80013fc <main+0x234>
				  {
					  if(RXDataS[1] <= 180 && RXDataS[1] >= 0 )
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <main+0x2e0>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	2bb4      	cmp	r3, #180	; 0xb4
 80013d6:	d817      	bhi.n	8001408 <main+0x240>
					  {
						  ServoData[RXDataS[0] + 1] = MAP(RXDataS[1],0,180,25,125); // Remap from Degrees to Duty Cycle
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <main+0x2e0>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	4618      	mov	r0, r3
 80013de:	237d      	movs	r3, #125	; 0x7d
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2319      	movs	r3, #25
 80013e4:	22b4      	movs	r2, #180	; 0xb4
 80013e6:	2100      	movs	r1, #0
 80013e8:	f7ff fe7c 	bl	80010e4 <MAP>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <main+0x2e0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <main+0x2dc>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e005      	b.n	8001408 <main+0x240>
					  }
				  }
				  else
				  {
					  ServoData[RXDataS[0] + 1] = 0;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <main+0x2e0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <main+0x2dc>)
 8001404:	2100      	movs	r1, #0
 8001406:	54d1      	strb	r1, [r2, r3]
				  }
			  }
		  }
	  }
	  // I dont know if we need it, Flashes the RX buffer of the STM Chip
      __HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST);
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <main+0x2c8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <main+0x2c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	619a      	str	r2, [r3, #24]

      // Write Servo Duty Cycles 25 = 0; 125 = 180
      htim1.Instance->CCR1 = ServoData[0];
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <main+0x2dc>)
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <main+0x2bc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
      htim1.Instance->CCR2 = ServoData[1];
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <main+0x2dc>)
 8001424:	785a      	ldrb	r2, [r3, #1]
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <main+0x2bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
      htim1.Instance->CCR3 = ServoData[2];
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <main+0x2dc>)
 800142e:	789a      	ldrb	r2, [r3, #2]
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <main+0x2bc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c
      htim1.Instance->CCR4 = ServoData[3];
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <main+0x2dc>)
 8001438:	78da      	ldrb	r2, [r3, #3]
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <main+0x2bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
      htim4.Instance->CCR2 = ServoData[4];
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <main+0x2dc>)
 8001442:	791a      	ldrb	r2, [r3, #4]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <main+0x2c0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	639a      	str	r2, [r3, #56]	; 0x38

      time2 = HAL_GetTick();
 800144a:	f001 f9e5 	bl	8002818 <HAL_GetTick>
 800144e:	4603      	mov	r3, r0
 8001450:	607b      	str	r3, [r7, #4]

      time = time2 - time1;
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <main+0x2e4>)
 800145a:	6013      	str	r3, [r2, #0]
	  time1 = HAL_GetTick();
 800145c:	e758      	b.n	8001310 <main+0x148>
 800145e:	bf00      	nop
 8001460:	e0000000 	.word	0xe0000000
 8001464:	3f50624d 	.word	0x3f50624d
 8001468:	c0000000 	.word	0xc0000000
 800146c:	3f689374 	.word	0x3f689374
 8001470:	e0000000 	.word	0xe0000000
 8001474:	3f9eb851 	.word	0x3f9eb851
 8001478:	200003e0 	.word	0x200003e0
 800147c:	20000204 	.word	0x20000204
 8001480:	200005a0 	.word	0x200005a0
 8001484:	20000250 	.word	0x20000250
 8001488:	2000029c 	.word	0x2000029c
 800148c:	20000000 	.word	0x20000000
 8001490:	200002e8 	.word	0x200002e8
 8001494:	200003d8 	.word	0x200003d8
 8001498:	20000001 	.word	0x20000001
 800149c:	200005a8 	.word	0x200005a8
 80014a0:	200005ae 	.word	0x200005ae
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200005ac 	.word	0x200005ac
 80014ac:	200005a4 	.word	0x200005a4

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2238      	movs	r2, #56	; 0x38
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f870 	bl	80085a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 fda6 	bl	8004024 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	2303      	movs	r3, #3
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 80014ee:	231c      	movs	r3, #28
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fe32 	bl	800416c <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800150e:	f000 fa6d 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2303      	movs	r3, #3
 8001518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800151e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001528:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2104      	movs	r1, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f934 	bl	800479c <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800153a:	f000 fa57 	bl	80019ec <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	; 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_I2C1_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_I2C1_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200923;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_I2C1_Init+0x74>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <MX_I2C1_Init+0x7c>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_I2C1_Init+0x74>)
 8001560:	2201      	movs	r2, #1
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001582:	480e      	ldr	r0, [pc, #56]	; (80015bc <MX_I2C1_Init+0x74>)
 8001584:	f001 ff52 	bl	800342c <HAL_I2C_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800158e:	f000 fa2d 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_I2C1_Init+0x74>)
 8001596:	f002 fcad 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 fa24 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_I2C1_Init+0x74>)
 80015a8:	f002 fcef 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fa1b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000204 	.word	0x20000204
 80015c0:	40005400 	.word	0x40005400
 80015c4:	00200923 	.word	0x00200923

080015c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09c      	sub	sp, #112	; 0x70
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2234      	movs	r2, #52	; 0x34
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f006 ffce 	bl	80085a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <MX_TIM1_Init+0x1a8>)
 800160a:	4a5a      	ldr	r2, [pc, #360]	; (8001774 <MX_TIM1_Init+0x1ac>)
 800160c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 800160e:	4b58      	ldr	r3, [pc, #352]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001610:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800161c:	4b54      	ldr	r3, [pc, #336]	; (8001770 <MX_TIM1_Init+0x1a8>)
 800161e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b52      	ldr	r3, [pc, #328]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <MX_TIM1_Init+0x1a8>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001636:	484e      	ldr	r0, [pc, #312]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001638:	f003 fcbc 	bl	8004fb4 <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001642:	f000 f9d3 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001650:	4619      	mov	r1, r3
 8001652:	4847      	ldr	r0, [pc, #284]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001654:	f003 ff7a 	bl	800554c <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800165e:	f000 f9c5 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001662:	4843      	ldr	r0, [pc, #268]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001664:	f003 fcfd 	bl	8005062 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800166e:	f000 f9bd 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800167e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001682:	4619      	mov	r1, r3
 8001684:	483a      	ldr	r0, [pc, #232]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001686:	f004 fca3 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001690:	f000 f9ac 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8001698:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <MX_TIM1_Init+0x1a8>)
 80016bc:	f003 fe32 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80016c6:	f000 f991 	bl	80019ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016d2:	2204      	movs	r2, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4826      	ldr	r0, [pc, #152]	; (8001770 <MX_TIM1_Init+0x1a8>)
 80016d8:	f003 fe24 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80016e2:	f000 f983 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ea:	2208      	movs	r2, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	4820      	ldr	r0, [pc, #128]	; (8001770 <MX_TIM1_Init+0x1a8>)
 80016f0:	f003 fe18 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80016fa:	f000 f977 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001702:	220c      	movs	r2, #12
 8001704:	4619      	mov	r1, r3
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001708:	f003 fe0c 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001712:	f000 f96b 	bl	80019ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800173c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001754:	f004 fcbe 	bl	80060d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 800175e:	f000 f945 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <MX_TIM1_Init+0x1a8>)
 8001764:	f000 fd98 	bl	8002298 <HAL_TIM_MspPostInit>

}
 8001768:	bf00      	nop
 800176a:	3770      	adds	r7, #112	; 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000250 	.word	0x20000250
 8001774:	40012c00 	.word	0x40012c00

08001778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <MX_TIM4_Init+0xec>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017b2:	f44f 7252 	mov.w	r2, #840	; 0x348
 80017b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d2:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017d4:	f003 fbee 	bl	8004fb4 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80017de:	f000 f905 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <MX_TIM4_Init+0xe8>)
 80017f0:	f003 feac 	bl	800554c <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80017fa:	f000 f8f7 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <MX_TIM4_Init+0xe8>)
 8001800:	f003 fc2f 	bl	8005062 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800180a:	f000 f8ef 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <MX_TIM4_Init+0xe8>)
 800181e:	f004 fbd7 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001828:	f000 f8e0 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2204      	movs	r2, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM4_Init+0xe8>)
 8001844:	f003 fd6e 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800184e:	f000 f8cd 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM4_Init+0xe8>)
 8001854:	f000 fd20 	bl	8002298 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000029c 	.word	0x2000029c
 8001864:	40000800 	.word	0x40000800

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <MX_USART2_UART_Init+0x94>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 576000;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <MX_USART2_UART_Init+0x98>)
 8001876:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 800188c:	220c      	movs	r2, #12
 800188e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018b0:	f004 fcb0 	bl	8006214 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80018ba:	f000 f897 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018c2:	f006 fa27 	bl	8007d14 <HAL_UARTEx_SetTxFifoThreshold>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80018cc:	f000 f88e 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018d4:	f006 fa5c 	bl	8007d90 <HAL_UARTEx_SetRxFifoThreshold>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80018de:	f000 f885 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART2_UART_Init+0x90>)
 80018e4:	f006 f9dd 	bl	8007ca2 <HAL_UARTEx_DisableFifoMode>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80018ee:	f000 f87d 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002e8 	.word	0x200002e8
 80018fc:	40004400 	.word	0x40004400
 8001900:	0008ca00 	.word	0x0008ca00

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_DMA_Init+0x50>)
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <MX_DMA_Init+0x50>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6493      	str	r3, [r2, #72]	; 0x48
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_DMA_Init+0x50>)
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_DMA_Init+0x50>)
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <MX_DMA_Init+0x50>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6493      	str	r3, [r2, #72]	; 0x48
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_DMA_Init+0x50>)
 8001930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	200b      	movs	r0, #11
 8001940:	f001 f873 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001944:	200b      	movs	r0, #11
 8001946:	f001 f88a 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <MX_GPIO_Init+0x8c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <MX_GPIO_Init+0x8c>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_GPIO_Init+0x8c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_GPIO_Init+0x8c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <MX_GPIO_Init+0x8c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_GPIO_Init+0x8c>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_GPIO_Init+0x8c>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <MX_GPIO_Init+0x8c>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_GPIO_Init+0x8c>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_Pin|SHCLK_Pin|DS_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2170      	movs	r1, #112	; 0x70
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <MX_GPIO_Init+0x90>)
 80019bc:	f001 fd1e 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Latch_Pin SHCLK_Pin DS_Pin */
  GPIO_InitStruct.Pin = Latch_Pin|SHCLK_Pin|DS_Pin;
 80019c0:	2370      	movs	r3, #112	; 0x70
 80019c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_GPIO_Init+0x90>)
 80019d8:	f001 fb8e 	bl	80030f8 <HAL_GPIO_Init>

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>

080019f6 <MPU6050_Init>:
	.R_measure = 0.03f// 0.03
};
*/

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b088      	sub	sp, #32
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	9302      	str	r3, [sp, #8]
 8001a02:	2301      	movs	r3, #1
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	f107 030f 	add.w	r3, r7, #15
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2275      	movs	r2, #117	; 0x75
 8001a10:	21d0      	movs	r1, #208	; 0xd0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 feae 	bl	8003774 <HAL_I2C_Mem_Read>



    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b68      	cmp	r3, #104	; 0x68
 8001a1c:	d13d      	bne.n	8001a9a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f107 030e 	add.w	r3, r7, #14
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	226b      	movs	r2, #107	; 0x6b
 8001a34:	21d0      	movs	r1, #208	; 0xd0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f001 fd88 	bl	800354c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f107 030e 	add.w	r3, r7, #14
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2219      	movs	r2, #25
 8001a52:	21d0      	movs	r1, #208	; 0xd0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 fd79 	bl	800354c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a5e:	2364      	movs	r3, #100	; 0x64
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	2301      	movs	r3, #1
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f107 030e 	add.w	r3, r7, #14
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	221c      	movs	r2, #28
 8001a70:	21d0      	movs	r1, #208	; 0xd0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 fd6a 	bl	800354c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2301      	movs	r3, #1
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f107 030e 	add.w	r3, r7, #14
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	221b      	movs	r2, #27
 8001a8e:	21d0      	movs	r1, #208	; 0xd0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f001 fd5b 	bl	800354c <HAL_I2C_Mem_Write>
        return 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <MPU6050_Init+0xa6>
    }
    return check;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0000      	movs	r0, r0
	...

08001aa8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b094      	sub	sp, #80	; 0x50
 8001aae:	af04      	add	r7, sp, #16
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG,1, Rec_Data, 14,i2c_timeout);
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	230e      	movs	r3, #14
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	223b      	movs	r2, #59	; 0x3b
 8001ac6:	21d0      	movs	r1, #208	; 0xd0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f001 fe53 	bl	8003774 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001ace:	7a3b      	ldrb	r3, [r7, #8]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001ae0:	7abb      	ldrb	r3, [r7, #10]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	7c7b      	ldrb	r3, [r7, #17]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001b24:	7cbb      	ldrb	r3, [r7, #18]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b36:	7d3b      	ldrb	r3, [r7, #20]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	7d7b      	ldrb	r3, [r7, #21]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd10 	bl	8000574 <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4bbf      	ldr	r3, [pc, #764]	; (8001e58 <MPU6050_Read_All+0x3b0>)
 8001b5a:	f7fe fe9f 	bl	800089c <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd00 	bl	8000574 <__aeabi_i2d>
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4bb7      	ldr	r3, [pc, #732]	; (8001e58 <MPU6050_Read_All+0x3b0>)
 8001b7a:	f7fe fe8f 	bl	800089c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcf0 	bl	8000574 <__aeabi_i2d>
 8001b94:	a3aa      	add	r3, pc, #680	; (adr r3, 8001e40 <MPU6050_Read_All+0x398>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fe7f 	bl	800089c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001ba8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001e5c <MPU6050_Read_All+0x3b4>
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001e60 <MPU6050_Read_All+0x3b8>
 8001bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fccf 	bl	8000574 <__aeabi_i2d>
 8001bd6:	a39c      	add	r3, pc, #624	; (adr r3, 8001e48 <MPU6050_Read_All+0x3a0>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fe5e 	bl	800089c <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	6839      	ldr	r1, [r7, #0]
 8001be6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fcbf 	bl	8000574 <__aeabi_i2d>
 8001bf6:	a394      	add	r3, pc, #592	; (adr r3, 8001e48 <MPU6050_Read_All+0x3a0>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fe4e 	bl	800089c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fcaf 	bl	8000574 <__aeabi_i2d>
 8001c16:	a38c      	add	r3, pc, #560	; (adr r3, 8001e48 <MPU6050_Read_All+0x3a0>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fe3e 	bl	800089c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001c2a:	f000 fdf5 	bl	8002818 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <MPU6050_Read_All+0x3bc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc8c 	bl	8000554 <__aeabi_ui2d>
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <MPU6050_Read_All+0x3c0>)
 8001c42:	f7fe fe2b 	bl	800089c <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001c4e:	f000 fde3 	bl	8002818 <HAL_GetTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a83      	ldr	r2, [pc, #524]	; (8001e64 <MPU6050_Read_All+0x3bc>)
 8001c56:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc78 	bl	8000574 <__aeabi_i2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	ec43 2b10 	vmov	d0, r2, r3
 8001c8c:	f006 fab7 	bl	80081fe <sqrt>
 8001c90:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ca0:	f7fe ff3a 	bl	8000b18 <__aeabi_dcmpeq>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11f      	bne.n	8001cea <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc5f 	bl	8000574 <__aeabi_i2d>
 8001cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cba:	f7fe fdef 	bl	800089c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ec43 2b17 	vmov	d7, r2, r3
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	f006 f8eb 	bl	8007ea8 <atan>
 8001cd2:	ec51 0b10 	vmov	r0, r1, d0
 8001cd6:	a35e      	add	r3, pc, #376	; (adr r3, 8001e50 <MPU6050_Read_All+0x3a8>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fcb4 	bl	8000648 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ce8:	e005      	b.n	8001cf6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc38 	bl	8000574 <__aeabi_i2d>
 8001d04:	4680      	mov	r8, r0
 8001d06:	4689      	mov	r9, r1
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc30 	bl	8000574 <__aeabi_i2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	ec43 2b11 	vmov	d1, r2, r3
 8001d1c:	ec49 8b10 	vmov	d0, r8, r9
 8001d20:	f006 fa6b 	bl	80081fa <atan2>
 8001d24:	ec51 0b10 	vmov	r0, r1, d0
 8001d28:	a349      	add	r3, pc, #292	; (adr r3, 8001e50 <MPU6050_Read_All+0x3a8>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc8b 	bl	8000648 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <MPU6050_Read_All+0x3c4>)
 8001d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d44:	f7fe fef2 	bl	8000b2c <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <MPU6050_Read_All+0x2ba>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001e70 <MPU6050_Read_All+0x3c8>
 8001d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	dc13      	bgt.n	8001d8a <MPU6050_Read_All+0x2e2>
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <MPU6050_Read_All+0x3cc>)
 8001d68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d6c:	f7fe fefc 	bl	8000b68 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <MPU6050_Read_All+0x2fc>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d7c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001e78 <MPU6050_Read_All+0x3d0>
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d50c      	bpl.n	8001da4 <MPU6050_Read_All+0x2fc>
    {
        DataStruct->KalmanY.angle = pitch;
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d90:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
        DataStruct->KalmanAngleY = pitch;
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe ff2e 	bl	8000bf8 <__aeabi_d2f>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	649a      	str	r2, [r3, #72]	; 0x48
 8001da2:	e019      	b.n	8001dd8 <MPU6050_Read_All+0x330>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&DataStruct->KalmanY, pitch, DataStruct->Gy, dt);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001db0:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001db4:	eeb0 1a47 	vmov.f32	s2, s14
 8001db8:	eef0 1a67 	vmov.f32	s3, s15
 8001dbc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f000 f85b 	bl	8001e7c <Kalman_getAngle>
 8001dc6:	ec53 2b10 	vmov	r2, r3, d0
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff13 	bl	8000bf8 <__aeabi_d2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001dde:	eef0 7ae7 	vabs.f32	s15, s15
 8001de2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e70 <MPU6050_Read_All+0x3c8>
 8001de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	dd08      	ble.n	8001e02 <MPU6050_Read_All+0x35a>
        DataStruct->Gx = -DataStruct->Gx;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001df6:	4614      	mov	r4, r2
 8001df8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&DataStruct->KalmanX, roll, DataStruct->Gx, dt);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001e0e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e12:	eeb0 1a47 	vmov.f32	s2, s14
 8001e16:	eef0 1a67 	vmov.f32	s3, s15
 8001e1a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 f82c 	bl	8001e7c <Kalman_getAngle>
 8001e24:	ec53 2b10 	vmov	r2, r3, d0
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fee4 	bl	8000bf8 <__aeabi_d2f>
 8001e30:	4602      	mov	r2, r0
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001e36:	bf00      	nop
 8001e38:	3740      	adds	r7, #64	; 0x40
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40cc2900 	.word	0x40cc2900
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40606000 	.word	0x40606000
 8001e50:	1a63c1f8 	.word	0x1a63c1f8
 8001e54:	404ca5dc 	.word	0x404ca5dc
 8001e58:	40d00000 	.word	0x40d00000
 8001e5c:	43aa0000 	.word	0x43aa0000
 8001e60:	42121eb8 	.word	0x42121eb8
 8001e64:	200005b0 	.word	0x200005b0
 8001e68:	408f4000 	.word	0x408f4000
 8001e6c:	c0568000 	.word	0xc0568000
 8001e70:	42b40000 	.word	0x42b40000
 8001e74:	40568000 	.word	0x40568000
 8001e78:	c2b40000 	.word	0xc2b40000

08001e7c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	61f8      	str	r0, [r7, #28]
 8001e84:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e88:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e8c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e9a:	f7fe fa1d 	bl	80002d8 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eb4:	f7fe fbc8 	bl	8000648 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fa0c 	bl	80002dc <__adddf3>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	69f9      	ldr	r1, [r7, #28]
 8001eca:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ede:	f7fe fbb3 	bl	8000648 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ef0:	f7fe f9f2 	bl	80002d8 <__aeabi_dsub>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f02:	f7fe f9e9 	bl	80002d8 <__aeabi_dsub>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe f9e2 	bl	80002dc <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f24:	f7fe fb90 	bl	8000648 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe f9d4 	bl	80002dc <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	69f9      	ldr	r1, [r7, #28]
 8001f3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f4e:	f7fe fb7b 	bl	8000648 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe f9bd 	bl	80002d8 <__aeabi_dsub>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	69f9      	ldr	r1, [r7, #28]
 8001f64:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	f7fe fb66 	bl	8000648 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f9a8 	bl	80002d8 <__aeabi_dsub>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	69f9      	ldr	r1, [r7, #28]
 8001f8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fa2:	f7fe fb51 	bl	8000648 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f995 	bl	80002dc <__adddf3>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fc8:	f7fe f988 	bl	80002dc <__adddf3>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fde:	f7fe fc5d 	bl	800089c <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ff4:	f7fe fc52 	bl	800089c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800200a:	f7fe f965 	bl	80002d8 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800201c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002020:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002024:	f7fe fb10 	bl	8000648 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4620      	mov	r0, r4
 800202e:	4629      	mov	r1, r5
 8002030:	f7fe f954 	bl	80002dc <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	69f9      	ldr	r1, [r7, #28]
 800203a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002044:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800204c:	f7fe fafc 	bl	8000648 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	f7fe f940 	bl	80002dc <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	69f9      	ldr	r1, [r7, #28]
 8002062:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800206c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002076:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002080:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002088:	f7fe fade 	bl	8000648 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f920 	bl	80002d8 <__aeabi_dsub>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	69f9      	ldr	r1, [r7, #28]
 800209e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020b0:	f7fe faca 	bl	8000648 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f90c 	bl	80002d8 <__aeabi_dsub>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	69f9      	ldr	r1, [r7, #28]
 80020c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80020d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020d8:	f7fe fab6 	bl	8000648 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8f8 	bl	80002d8 <__aeabi_dsub>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	69f9      	ldr	r1, [r7, #28]
 80020ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80020f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002100:	f7fe faa2 	bl	8000648 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f8e4 	bl	80002d8 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	69f9      	ldr	r1, [r7, #28]
 8002116:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002120:	ec43 2b17 	vmov	d7, r2, r3
}
 8002124:	eeb0 0a47 	vmov.f32	s0, s14
 8002128:	eef0 0a67 	vmov.f32	s1, s15
 800212c:	3758      	adds	r7, #88	; 0x58
 800212e:	46bd      	mov	sp, r7
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_MspInit+0x44>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_MspInit+0x44>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6613      	str	r3, [r2, #96]	; 0x60
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_MspInit+0x44>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_MspInit+0x44>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_MspInit+0x44>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_MspInit+0x44>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b09a      	sub	sp, #104	; 0x68
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2244      	movs	r2, #68	; 0x44
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f006 fa01 	bl	80085a4 <memset>
  if(hi2c->Instance==I2C1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_I2C_MspInit+0xa8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d136      	bne.n	800221a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fd0b 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80021c4:	f7ff fc12 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_I2C_MspInit+0xac>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_I2C_MspInit+0xac>)
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_I2C_MspInit+0xac>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021e4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e6:	2312      	movs	r3, #18
 80021e8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f2:	2304      	movs	r3, #4
 80021f4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fa:	4619      	mov	r1, r3
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <HAL_I2C_MspInit+0xb0>)
 80021fe:	f000 ff7b 	bl	80030f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_I2C_MspInit+0xac>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_I2C_MspInit+0xac>)
 8002208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_I2C_MspInit+0xac>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3768      	adds	r7, #104	; 0x68
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40005400 	.word	0x40005400
 8002228:	40021000 	.word	0x40021000
 800222c:	48000400 	.word	0x48000400

08002230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_TIM_Base_MspInit+0x5c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10c      	bne.n	800225c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800224c:	6613      	str	r3, [r2, #96]	; 0x60
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800225a:	e010      	b.n	800227e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <HAL_TIM_Base_MspInit+0x64>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6593      	str	r3, [r2, #88]	; 0x58
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40000800 	.word	0x40000800

08002298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_TIM_MspPostInit+0xd4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d130      	bne.n	800231c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo1PWM_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80022d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022e4:	2306      	movs	r3, #6
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f2:	f000 ff01 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002308:	230b      	movs	r3, #11
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f000 feef 	bl	80030f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800231a:	e022      	b.n	8002362 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_TIM_MspPostInit+0xdc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d11d      	bne.n	8002362 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_TIM_MspPostInit+0xd8>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800233e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002350:	230a      	movs	r3, #10
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235e:	f000 fecb 	bl	80030f8 <HAL_GPIO_Init>
}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40000800 	.word	0x40000800

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b09c      	sub	sp, #112	; 0x70
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	f107 0318 	add.w	r3, r7, #24
 8002394:	2244      	movs	r2, #68	; 0x44
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f006 f903 	bl	80085a4 <memset>
  if(huart->Instance==USART2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a46      	ldr	r2, [pc, #280]	; (80024bc <HAL_UART_MspInit+0x144>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	f040 8085 	bne.w	80024b4 <HAL_UART_MspInit+0x13c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80023ae:	2304      	movs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b2:	f107 0318 	add.w	r3, r7, #24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fc0c 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023c2:	f7ff fb13 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a3d      	ldr	r2, [pc, #244]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a37      	ldr	r2, [pc, #220]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <HAL_UART_MspInit+0x148>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_UART_MspInit+0x148>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800240e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002412:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002420:	2307      	movs	r3, #7
 8002422:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f000 fe63 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002432:	2308      	movs	r3, #8
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002442:	2307      	movs	r3, #7
 8002444:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800244a:	4619      	mov	r1, r3
 800244c:	481d      	ldr	r0, [pc, #116]	; (80024c4 <HAL_UART_MspInit+0x14c>)
 800244e:	f000 fe53 	bl	80030f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_UART_MspInit+0x154>)
 8002456:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_UART_MspInit+0x150>)
 800245a:	221a      	movs	r2, #26
 800245c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_UART_MspInit+0x150>)
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_UART_MspInit+0x150>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_UART_MspInit+0x150>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002488:	480f      	ldr	r0, [pc, #60]	; (80024c8 <HAL_UART_MspInit+0x150>)
 800248a:	f000 fb03 	bl	8002a94 <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002494:	f7ff faaa 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_UART_MspInit+0x150>)
 800249c:	67da      	str	r2, [r3, #124]	; 0x7c
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_UART_MspInit+0x150>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2100      	movs	r1, #0
 80024a8:	2026      	movs	r0, #38	; 0x26
 80024aa:	f000 fabe 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ae:	2026      	movs	r0, #38	; 0x26
 80024b0:	f000 fad5 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024b4:	bf00      	nop
 80024b6:	3770      	adds	r7, #112	; 0x70
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000400 	.word	0x48000400
 80024c8:	20000378 	.word	0x20000378
 80024cc:	40020008 	.word	0x40020008

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <NMI_Handler+0x4>

080024d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <MemManage_Handler+0x4>

080024e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler+0x4>

080024ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f000 f96a 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA1_Channel1_IRQHandler+0x10>)
 800252a:	f000 fc96 	bl	8002e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000378 	.word	0x20000378

08002538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <USART2_IRQHandler+0x10>)
 800253e:	f003 ffb7 	bl	80064b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200002e8 	.word	0x200002e8

0800254c <_getpid>:
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 8002550:	2301      	movs	r3, #1
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_kill>:
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	f005 fff3 	bl	8008550 <__errno>
 800256a:	4603      	mov	r3, r0
 800256c:	2216      	movs	r2, #22
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_exit>:
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_kill>
 800258e:	e7fe      	b.n	800258e <_exit+0x12>

08002590 <_read>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00a      	b.n	80025b8 <_read+0x28>
 80025a2:	f3af 8000 	nop.w
 80025a6:	4601      	mov	r1, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf0      	blt.n	80025a2 <_read+0x12>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_write>:
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e009      	b.n	80025f0 <_write+0x26>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f3af 8000 	nop.w
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf1      	blt.n	80025dc <_write+0x12>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_close>:
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_fstat>:
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	2300      	movs	r3, #0
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_isatty>:
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	2301      	movs	r3, #1
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_lseek>:
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	2300      	movs	r3, #0
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_sbrk>:
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
 800269c:	f005 ff58 	bl	8008550 <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	220c      	movs	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20008000 	.word	0x20008000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	200005b4 	.word	0x200005b4
 80026d4:	200005d0 	.word	0x200005d0

080026d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SystemInit+0x20>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <SystemInit+0x20>)
 80026e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <Reset_Handler>:
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopForever+0x2>)
 80026fe:	4685      	mov	sp, r0
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <LoopForever+0x6>)
 8002702:	490e      	ldr	r1, [pc, #56]	; (800273c <LoopForever+0xa>)
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <LoopForever+0xe>)
 8002706:	2300      	movs	r3, #0
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:
 800270a:	58d4      	ldr	r4, [r2, r3]
 800270c:	50c4      	str	r4, [r0, r3]
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:
 8002710:	18c4      	adds	r4, r0, r3
 8002712:	428c      	cmp	r4, r1
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <LoopForever+0x12>)
 8002718:	4c0b      	ldr	r4, [pc, #44]	; (8002748 <LoopForever+0x16>)
 800271a:	2300      	movs	r3, #0
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:
 8002722:	42a2      	cmp	r2, r4
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>
 8002726:	f7ff ffd7 	bl	80026d8 <SystemInit>
 800272a:	f005 ff17 	bl	800855c <__libc_init_array>
 800272e:	f7fe fd4b 	bl	80011c8 <main>

08002732 <LoopForever>:
 8002732:	e7fe      	b.n	8002732 <LoopForever>
 8002734:	20008000 	.word	0x20008000
 8002738:	20000000 	.word	0x20000000
 800273c:	200001e8 	.word	0x200001e8
 8002740:	0800b494 	.word	0x0800b494
 8002744:	200001e8 	.word	0x200001e8
 8002748:	200005cc 	.word	0x200005cc

0800274c <ADC1_2_IRQHandler>:
 800274c:	e7fe      	b.n	800274c <ADC1_2_IRQHandler>

0800274e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f95b 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f80e 	bl	8002780 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	e001      	b.n	8002774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002770:	f7ff fce0 	bl	8002134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002774:	79fb      	ldrb	r3, [r7, #7]

}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_InitTick+0x68>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_InitTick+0x6c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_InitTick+0x68>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f966 	bl	8002a7a <HAL_SYSTICK_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d809      	bhi.n	80027ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ba:	2200      	movs	r2, #0
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	f000 f932 	bl	8002a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_InitTick+0x70>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e007      	b.n	80027de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e004      	b.n	80027de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e001      	b.n	80027de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000014 	.word	0x20000014
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	20000010 	.word	0x20000010

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4413      	add	r3, r2
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_IncTick+0x1c>)
 8002804:	6013      	str	r3, [r2, #0]
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	200005b8 	.word	0x200005b8
 8002814:	20000014 	.word	0x20000014

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200005b8 	.word	0x200005b8

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d004      	beq.n	8002854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_Delay+0x40>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002854:	bf00      	nop
 8002856:	f7ff ffdf 	bl	8002818 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	429a      	cmp	r2, r3
 8002864:	d8f7      	bhi.n	8002856 <HAL_Delay+0x26>
  {
  }
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000014 	.word	0x20000014

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff29 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff40 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff90 	bl	8002968 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5f 	bl	8002914 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff33 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa4 	bl	80029d0 <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e08d      	b.n	8002bc2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_DMA_Init+0x138>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d80f      	bhi.n	8002ad2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <HAL_DMA_Init+0x13c>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a45      	ldr	r2, [pc, #276]	; (8002bd4 <HAL_DMA_Init+0x140>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_DMA_Init+0x144>)
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad0:	e00e      	b.n	8002af0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_DMA_Init+0x148>)
 8002ada:	4413      	add	r3, r2
 8002adc:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <HAL_DMA_Init+0x140>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <HAL_DMA_Init+0x14c>)
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa76 	bl	8003034 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b50:	d102      	bne.n	8002b58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b6c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d010      	beq.n	8002b98 <HAL_DMA_Init+0x104>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d80c      	bhi.n	8002b98 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa96 	bl	80030b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e008      	b.n	8002baa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020407 	.word	0x40020407
 8002bd0:	bffdfff8 	.word	0xbffdfff8
 8002bd4:	cccccccd 	.word	0xcccccccd
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	bffdfbf8 	.word	0xbffdfbf8
 8002be0:	40020400 	.word	0x40020400

08002be4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Start_IT+0x20>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e066      	b.n	8002cd2 <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d155      	bne.n	8002cc4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f9bb 	bl	8002fb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 020e 	orr.w	r2, r2, #14
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e00f      	b.n	8002c7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0204 	bic.w	r2, r2, #4
 8002c6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 020a 	orr.w	r2, r2, #10
 8002c7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d005      	beq.n	8002cfe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e037      	b.n	8002d6e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 020e 	bic.w	r2, r2, #14
 8002d0c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d4a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d6c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d00d      	beq.n	8002dc0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e047      	b.n	8002e50 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 020e 	bic.w	r2, r2, #14
 8002dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
    }
  }
  return status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d026      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x7a>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d021      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0204 	bic.w	r2, r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f003 021f 	and.w	r2, r3, #31
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2104      	movs	r1, #4
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d071      	beq.n	8002fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ed2:	e06c      	b.n	8002fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2202      	movs	r2, #2
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02e      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d029      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 020a 	bic.w	r2, r2, #10
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2102      	movs	r1, #2
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d038      	beq.n	8002fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f44:	e033      	b.n	8002fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2208      	movs	r2, #8
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d025      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 020e 	bic.w	r2, r2, #14
 8002f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
}
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fe0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f003 021f 	and.w	r2, r3, #31
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b10      	cmp	r3, #16
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d802      	bhi.n	800304e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	e001      	b.n	8003052 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003050:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3b08      	subs	r3, #8
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800307e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2201      	movs	r2, #1
 8003088:	409a      	lsls	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40020407 	.word	0x40020407
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020820 	.word	0x40020820
 80030a8:	cccccccd 	.word	0xcccccccd
 80030ac:	40020880 	.word	0x40020880

080030b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2201      	movs	r2, #1
 80030de:	409a      	lsls	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	1000823f 	.word	0x1000823f
 80030f4:	40020940 	.word	0x40020940

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003106:	e15a      	b.n	80033be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 814c 	beq.w	80033b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d005      	beq.n	8003138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003134:	2b02      	cmp	r3, #2
 8003136:	d130      	bne.n	800319a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 0201 	and.w	r2, r3, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d017      	beq.n	80031d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d123      	bne.n	800322a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0203 	and.w	r2, r3, #3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326c:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	4a5a      	ldr	r2, [pc, #360]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6613      	str	r3, [r2, #96]	; 0x60
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003284:	4a56      	ldr	r2, [pc, #344]	; (80033e0 <HAL_GPIO_Init+0x2e8>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	220f      	movs	r2, #15
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ae:	d01f      	beq.n	80032f0 <HAL_GPIO_Init+0x1f8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a4c      	ldr	r2, [pc, #304]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d019      	beq.n	80032ec <HAL_GPIO_Init+0x1f4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a4b      	ldr	r2, [pc, #300]	; (80033e8 <HAL_GPIO_Init+0x2f0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a4a      	ldr	r2, [pc, #296]	; (80033ec <HAL_GPIO_Init+0x2f4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00d      	beq.n	80032e4 <HAL_GPIO_Init+0x1ec>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <HAL_GPIO_Init+0x2f8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <HAL_GPIO_Init+0x1e8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_GPIO_Init+0x2fc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032d8:	2305      	movs	r3, #5
 80032da:	e00a      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032dc:	2306      	movs	r3, #6
 80032de:	e008      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e006      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032e4:	2303      	movs	r3, #3
 80032e6:	e004      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e002      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032f0:	2300      	movs	r3, #0
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	f002 0203 	and.w	r2, r2, #3
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	4093      	lsls	r3, r2
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003302:	4937      	ldr	r1, [pc, #220]	; (80033e0 <HAL_GPIO_Init+0x2e8>)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003334:	4a30      	ldr	r2, [pc, #192]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_GPIO_Init+0x300>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800335e:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_GPIO_Init+0x300>)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033b2:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_GPIO_Init+0x300>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3301      	adds	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f47f ae9d 	bne.w	8003108 <HAL_GPIO_Init+0x10>
  }
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40010000 	.word	0x40010000
 80033e4:	48000400 	.word	0x48000400
 80033e8:	48000800 	.word	0x48000800
 80033ec:	48000c00 	.word	0x48000c00
 80033f0:	48001000 	.word	0x48001000
 80033f4:	48001400 	.word	0x48001400
 80033f8:	40010400 	.word	0x40010400

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003418:	e002      	b.n	8003420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e081      	b.n	8003542 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fe fe92 	bl	800217c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	; 0x24
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800347c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800348c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e006      	b.n	80034b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d104      	bne.n	80034c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4603      	mov	r3, r0
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	460b      	mov	r3, r1
 8003560:	813b      	strh	r3, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	f040 80f9 	bne.w	8003766 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_I2C_Mem_Write+0x34>
 800357a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ed      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Mem_Write+0x4e>
 8003596:	2302      	movs	r3, #2
 8003598:	e0e6      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035a2:	f7ff f939 	bl	8002818 <HAL_GetTick>
 80035a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fac3 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d1      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ec:	88f8      	ldrh	r0, [r7, #6]
 80035ee:	893a      	ldrh	r2, [r7, #8]
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4603      	mov	r3, r0
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f9d3 	bl	80039a8 <I2C_RequestMemoryWrite>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0a9      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2bff      	cmp	r3, #255	; 0xff
 800361c:	d90e      	bls.n	800363c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc2b 	bl	8003e90 <I2C_TransferConfig>
 800363a:	e00f      	b.n	800365c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	b2da      	uxtb	r2, r3
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fc1a 	bl	8003e90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 faad 	bl	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e07b      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d034      	beq.n	8003714 <HAL_I2C_Mem_Write+0x1c8>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d130      	bne.n	8003714 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa3f 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e04d      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d90e      	bls.n	80036f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fbcf 	bl	8003e90 <I2C_TransferConfig>
 80036f2:	e00f      	b.n	8003714 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	b2da      	uxtb	r2, r3
 8003704:	8979      	ldrh	r1, [r7, #10]
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fbbe 	bl	8003e90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d19e      	bne.n	800365c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa8c 	bl	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e01a      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_I2C_Mem_Write+0x224>)
 8003746:	400b      	ands	r3, r1
 8003748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	fe00e800 	.word	0xfe00e800

08003774 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	817b      	strh	r3, [r7, #10]
 8003786:	460b      	mov	r3, r1
 8003788:	813b      	strh	r3, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 80fd 	bne.w	8003996 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x34>
 80037a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0f1      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x4e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0ea      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ca:	f7ff f825 	bl	8002818 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f9af 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0d5      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2222      	movs	r2, #34	; 0x22
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003814:	88f8      	ldrh	r0, [r7, #6]
 8003816:	893a      	ldrh	r2, [r7, #8]
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	4603      	mov	r3, r0
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f913 	bl	8003a50 <I2C_RequestMemoryRead>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0ad      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d90e      	bls.n	8003864 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	4b52      	ldr	r3, [pc, #328]	; (80039a0 <HAL_I2C_Mem_Read+0x22c>)
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb17 	bl	8003e90 <I2C_TransferConfig>
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	b2da      	uxtb	r2, r3
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_I2C_Mem_Read+0x22c>)
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fb06 	bl	8003e90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	2200      	movs	r2, #0
 800388c:	2104      	movs	r1, #4
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f956 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07c      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d034      	beq.n	8003944 <HAL_I2C_Mem_Read+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d130      	bne.n	8003944 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f927 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04d      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d90e      	bls.n	8003924 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fab7 	bl	8003e90 <I2C_TransferConfig>
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	8979      	ldrh	r1, [r7, #10]
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 faa6 	bl	8003e90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19a      	bne.n	8003884 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f974 	bl	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e01a      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2220      	movs	r2, #32
 8003968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_I2C_Mem_Read+0x230>)
 8003976:	400b      	ands	r3, r1
 8003978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	80002400 	.word	0x80002400
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	817b      	strh	r3, [r7, #10]
 80039ba:	460b      	mov	r3, r1
 80039bc:	813b      	strh	r3, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <I2C_RequestMemoryWrite+0xa4>)
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fa5d 	bl	8003e90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8f0 	bl	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e02c      	b.n	8003a44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
 80039fa:	e015      	b.n	8003a28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8d6 	bl	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e012      	b.n	8003a44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f884 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	80002000 	.word	0x80002000

08003a50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	460b      	mov	r3, r1
 8003a64:	813b      	strh	r3, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	8979      	ldrh	r1, [r7, #10]
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <I2C_RequestMemoryRead+0xa4>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fa0a 	bl	8003e90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f89d 	bl	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e02c      	b.n	8003aea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa0:	e015      	b.n	8003ace <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f883 	bl	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e012      	b.n	8003aea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f831 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	80002000 	.word	0x80002000

08003af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d007      	beq.n	8003b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	619a      	str	r2, [r3, #24]
  }
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b50:	e022      	b.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d01e      	beq.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe fe5d 	bl	8002818 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e00f      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d0cd      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bcc:	e02c      	b.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f870 	bl	8003cb8 <I2C_IsErrorOccurred>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02a      	b.n	8003c38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d01e      	beq.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe fe15 	bl	8002818 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e007      	b.n	8003c38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d1cb      	bne.n	8003bce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c4c:	e028      	b.n	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f830 	bl	8003cb8 <I2C_IsErrorOccurred>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e026      	b.n	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe fdd9 	bl	8002818 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d113      	bne.n	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d1cf      	bne.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d075      	beq.n	8003dd0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cec:	e056      	b.n	8003d9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d052      	beq.n	8003d9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fe fd8f 	bl	8002818 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_IsErrorOccurred+0x54>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d147      	bne.n	8003d9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2e:	d12e      	bne.n	8003d8e <I2C_IsErrorOccurred+0xd6>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d36:	d02a      	beq.n	8003d8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d027      	beq.n	8003d8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d4e:	f7fe fd63 	bl	8002818 <HAL_GetTick>
 8003d52:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d54:	e01b      	b.n	8003d8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d56:	f7fe fd5f 	bl	8002818 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b19      	cmp	r3, #25
 8003d62:	d914      	bls.n	8003d8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d1dc      	bne.n	8003d56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d003      	beq.n	8003db2 <I2C_IsErrorOccurred+0xfa>
 8003daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d09d      	beq.n	8003cee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01c      	beq.n	8003e80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fe56 	bl	8003af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <I2C_IsErrorOccurred+0x1d4>)
 8003e58:	400b      	ands	r3, r1
 8003e5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3728      	adds	r7, #40	; 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fe00e800 	.word	0xfe00e800

08003e90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ea8:	7a7b      	ldrb	r3, [r7, #9]
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	0d5b      	lsrs	r3, r3, #21
 8003eca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <I2C_TransferConfig+0x60>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	ea02 0103 	and.w	r1, r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	03ff63ff 	.word	0x03ff63ff

08003ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d138      	bne.n	8003f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e032      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d139      	bne.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e033      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d141      	bne.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004032:	4b4b      	ldr	r3, [pc, #300]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d131      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004040:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004050:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004058:	4a41      	ldr	r2, [pc, #260]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2232      	movs	r2, #50	; 0x32
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a3f      	ldr	r2, [pc, #252]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	0c9b      	lsrs	r3, r3, #18
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004076:	e002      	b.n	800407e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3b01      	subs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d102      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f2      	bne.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d158      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e057      	b.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a4:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b4:	e04d      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d141      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d131      	bne.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e4:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2232      	movs	r2, #50	; 0x32
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	0c9b      	lsrs	r3, r3, #18
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004102:	e002      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d102      	bne.n	800411e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f2      	bne.n	8004104 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d112      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e011      	b.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004140:	e007      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004150:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40007000 	.word	0x40007000
 8004164:	2000000c 	.word	0x2000000c
 8004168:	431bde83 	.word	0x431bde83

0800416c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e306      	b.n	800478c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d075      	beq.n	8004276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418a:	4b97      	ldr	r3, [pc, #604]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004194:	4b94      	ldr	r3, [pc, #592]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d102      	bne.n	80041aa <HAL_RCC_OscConfig+0x3e>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d002      	beq.n	80041b0 <HAL_RCC_OscConfig+0x44>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05b      	beq.n	8004274 <HAL_RCC_OscConfig+0x108>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d157      	bne.n	8004274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e2e1      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCC_OscConfig+0x74>
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a84      	ldr	r2, [pc, #528]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x98>
 80041ea:	4b7f      	ldr	r3, [pc, #508]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7e      	ldr	r2, [pc, #504]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b7c      	ldr	r3, [pc, #496]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7b      	ldr	r2, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 8004204:	4b78      	ldr	r3, [pc, #480]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a77      	ldr	r2, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a74      	ldr	r2, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe faf8 	bl	8002818 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe faf4 	bl	8002818 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e2a6      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xc0>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe fae4 	bl	8002818 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe fae0 	bl	8002818 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e292      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004266:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0xe8>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d075      	beq.n	800436e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004282:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b0c      	cmp	r3, #12
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_OscConfig+0x136>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_OscConfig+0x13c>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d11f      	bne.n	80042e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x154>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e265      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	4946      	ldr	r1, [pc, #280]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042d4:	4b45      	ldr	r3, [pc, #276]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe fa51 	bl	8002780 <HAL_InitTick>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d043      	beq.n	800436c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e251      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d023      	beq.n	8004338 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f0:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe fa8c 	bl	8002818 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004304:	f7fe fa88 	bl	8002818 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e23a      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	492d      	ldr	r1, [pc, #180]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
 8004336:	e01a      	b.n	800436e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe fa68 	bl	8002818 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7fe fa64 	bl	8002818 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e216      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1e0>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d041      	beq.n	80043fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01c      	beq.n	80043bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fe fa41 	bl	8002818 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439a:	f7fe fa3d 	bl	8002818 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1ef      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ef      	beq.n	800439a <HAL_RCC_OscConfig+0x22e>
 80043ba:	e020      	b.n	80043fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe fa24 	bl	8002818 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d2:	e00d      	b.n	80043f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fe fa20 	bl	8002818 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d906      	bls.n	80043f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e1d2      	b.n	800478c <HAL_RCC_OscConfig+0x620>
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f0:	4b8c      	ldr	r3, [pc, #560]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ea      	bne.n	80043d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80a6 	beq.w	8004558 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_OscConfig+0x2b4>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x2b6>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	4a7e      	ldr	r2, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6593      	str	r3, [r2, #88]	; 0x58
 8004432:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800443e:	2301      	movs	r3, #1
 8004440:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004442:	4b79      	ldr	r3, [pc, #484]	; (8004628 <HAL_RCC_OscConfig+0x4bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x4bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x4bc>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445a:	f7fe f9dd 	bl	8002818 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fe f9d9 	bl	8002818 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e18b      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCC_OscConfig+0x4bc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d108      	bne.n	800449a <HAL_RCC_OscConfig+0x32e>
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004498:	e024      	b.n	80044e4 <HAL_RCC_OscConfig+0x378>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d110      	bne.n	80044c4 <HAL_RCC_OscConfig+0x358>
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c2:	e00f      	b.n	80044e4 <HAL_RCC_OscConfig+0x378>
 80044c4:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d4:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d016      	beq.n	800451a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f994 	bl	8002818 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fe f990 	bl	8002818 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e140      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ed      	beq.n	80044f4 <HAL_RCC_OscConfig+0x388>
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fe f97d 	bl	8002818 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fe f979 	bl	8002818 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e129      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004538:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ed      	bne.n	8004522 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004546:	7ffb      	ldrb	r3, [r7, #31]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d03c      	beq.n	80045de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fe f94c 	bl	8002818 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004584:	f7fe f948 	bl	8002818 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e0fa      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <HAL_RCC_OscConfig+0x418>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fe f92f 	bl	8002818 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045be:	f7fe f92b 	bl	8002818 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0dd      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ef      	bne.n	80045be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80d1 	beq.w	800478a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	f000 808b 	beq.w	800470c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d15e      	bne.n	80046bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <HAL_RCC_OscConfig+0x4b8>)
 8004604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fe f905 	bl	8002818 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004610:	e00c      	b.n	800462c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fe f901 	bl	8002818 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d905      	bls.n	800462c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0b3      	b.n	800478c <HAL_RCC_OscConfig+0x620>
 8004624:	40021000 	.word	0x40021000
 8004628:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b59      	ldr	r3, [pc, #356]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ec      	bne.n	8004612 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	4b56      	ldr	r3, [pc, #344]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4b56      	ldr	r3, [pc, #344]	; (8004798 <HAL_RCC_OscConfig+0x62c>)
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6a11      	ldr	r1, [r2, #32]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004648:	3a01      	subs	r2, #1
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0552      	lsls	r2, r2, #21
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0652      	lsls	r2, r2, #25
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004672:	06d2      	lsls	r2, r2, #27
 8004674:	430a      	orrs	r2, r1
 8004676:	4947      	ldr	r1, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 8004678:	4313      	orrs	r3, r2
 800467a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a44      	ldr	r2, [pc, #272]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a41      	ldr	r2, [pc, #260]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fe f8c0 	bl	8002818 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fe f8bc 	bl	8002818 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e06e      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x530>
 80046ba:	e066      	b.n	800478a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a34      	ldr	r2, [pc, #208]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a31      	ldr	r2, [pc, #196]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046d4:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 80046da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe f898 	bl	8002818 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fe f894 	bl	8002818 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e046      	b.n	800478c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x580>
 800470a:	e03e      	b.n	800478a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e039      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004718:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <HAL_RCC_OscConfig+0x628>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	429a      	cmp	r2, r3
 800472a:	d12c      	bne.n	8004786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	3b01      	subs	r3, #1
 8004738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d123      	bne.n	8004786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11b      	bne.n	8004786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d113      	bne.n	8004786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d109      	bne.n	8004786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	019f800c 	.word	0x019f800c

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e11e      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b91      	ldr	r3, [pc, #580]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b8e      	ldr	r3, [pc, #568]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 020f 	bic.w	r2, r3, #15
 80047ca:	498c      	ldr	r1, [pc, #560]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e106      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d073      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d129      	bne.n	800484c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f8:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0f4      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004808:	f000 f99e 	bl	8004b48 <RCC_GetSysClockFreqFromPLLSource>
 800480c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4a7c      	ldr	r2, [pc, #496]	; (8004a04 <HAL_RCC_ClockConfig+0x268>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d93f      	bls.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004816:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d033      	beq.n	8004896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d12f      	bne.n	8004896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483e:	4a70      	ldr	r2, [pc, #448]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e024      	b.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0c6      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	4b66      	ldr	r3, [pc, #408]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0be      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004874:	f000 f8ce 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4a61      	ldr	r2, [pc, #388]	; (8004a04 <HAL_RCC_ClockConfig+0x268>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d909      	bls.n	8004896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004896:	4b5a      	ldr	r3, [pc, #360]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 0203 	bic.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4957      	ldr	r1, [pc, #348]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fd ffb6 	bl	8002818 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	f7fd ffb2 	bl	8002818 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e095      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1eb      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f0:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004910:	4a3b      	ldr	r2, [pc, #236]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4936      	ldr	r1, [pc, #216]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	e008      	b.n	800493e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d105      	bne.n	800493e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d21d      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 020f 	bic.w	r2, r3, #15
 8004954:	4929      	ldr	r1, [pc, #164]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800495c:	f7fd ff5c 	bl	8002818 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fd ff58 	bl	8002818 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e03b      	b.n	80049f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d1ed      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4917      	ldr	r1, [pc, #92]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	490f      	ldr	r1, [pc, #60]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c6:	f000 f825 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	490c      	ldr	r1, [pc, #48]	; (8004a08 <HAL_RCC_ClockConfig+0x26c>)
 80049d8:	5ccb      	ldrb	r3, [r1, r3]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x270>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x274>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fd fec8 	bl	8002780 <HAL_InitTick>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40021000 	.word	0x40021000
 8004a04:	04c4b400 	.word	0x04c4b400
 8004a08:	0800aff8 	.word	0x0800aff8
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	20000010 	.word	0x20000010

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d102      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e047      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e03e      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d136      	bne.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	0a12      	lsrs	r2, r2, #8
 8004a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
      break;
 8004a80:	e00c      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	0a12      	lsrs	r2, r2, #8
 8004a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
      break;
 8004a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0e5b      	lsrs	r3, r3, #25
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e001      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004abc:	693b      	ldr	r3, [r7, #16]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	016e3600 	.word	0x016e3600

08004ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800b008 	.word	0x0800b008

08004b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b20:	f7ff ffda 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0adb      	lsrs	r3, r3, #11
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4904      	ldr	r1, [pc, #16]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	0800b008 	.word	0x0800b008

08004b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10c      	bne.n	8004b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	0a12      	lsrs	r2, r2, #8
 8004b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
    break;
 8004b84:	e00c      	b.n	8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	0a12      	lsrs	r2, r2, #8
 8004b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
    break;
 8004b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bba:	687b      	ldr	r3, [r7, #4]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	016e3600 	.word	0x016e3600
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8098 	beq.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	4a3f      	ldr	r2, [pc, #252]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a39      	ldr	r2, [pc, #228]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd fdf5 	bl	8002818 <HAL_GetTick>
 8004c2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c30:	e009      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c32:	f7fd fdf1 	bl	8002818 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d902      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	74fb      	strb	r3, [r7, #19]
        break;
 8004c44:	e005      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ef      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d159      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca0:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fdb1 	bl	8002818 <HAL_GetTick>
 8004cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd fdad 	bl	8002818 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ec      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	4903      	ldr	r1, [pc, #12]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	74bb      	strb	r3, [r7, #18]
 8004d02:	e005      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d10:	7c7b      	ldrb	r3, [r7, #17]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4ba6      	ldr	r3, [pc, #664]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	4aa5      	ldr	r2, [pc, #660]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d2e:	4ba0      	ldr	r3, [pc, #640]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f023 0203 	bic.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	499c      	ldr	r1, [pc, #624]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d50:	4b97      	ldr	r3, [pc, #604]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f023 020c 	bic.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	4994      	ldr	r1, [pc, #592]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d72:	4b8f      	ldr	r3, [pc, #572]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	498b      	ldr	r1, [pc, #556]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d94:	4b86      	ldr	r3, [pc, #536]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4983      	ldr	r1, [pc, #524]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db6:	4b7e      	ldr	r3, [pc, #504]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	497a      	ldr	r1, [pc, #488]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd8:	4b75      	ldr	r3, [pc, #468]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	4972      	ldr	r1, [pc, #456]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dfa:	4b6d      	ldr	r3, [pc, #436]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4969      	ldr	r1, [pc, #420]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e1c:	4b64      	ldr	r3, [pc, #400]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4961      	ldr	r1, [pc, #388]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e3e:	4b5c      	ldr	r3, [pc, #368]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	4958      	ldr	r1, [pc, #352]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	4950      	ldr	r1, [pc, #320]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b4b      	ldr	r3, [pc, #300]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a4a      	ldr	r2, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e98:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	4942      	ldr	r1, [pc, #264]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ed0:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4934      	ldr	r1, [pc, #208]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a2e      	ldr	r2, [pc, #184]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f08:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	4926      	ldr	r1, [pc, #152]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	4918      	ldr	r1, [pc, #96]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd f928 	bl	8002230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fba4 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e049      	b.n	8005108 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f841 	bl	8005110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fb4d 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PWM_Start+0x24>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e03c      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d109      	bne.n	8005162 <HAL_TIM_PWM_Start+0x3e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e02f      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d109      	bne.n	800517c <HAL_TIM_PWM_Start+0x58>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e022      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d109      	bne.n	8005196 <HAL_TIM_PWM_Start+0x72>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	bf14      	ite	ne
 800518e:	2301      	movne	r3, #1
 8005190:	2300      	moveq	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e015      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b10      	cmp	r3, #16
 800519a:	d109      	bne.n	80051b0 <HAL_TIM_PWM_Start+0x8c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e008      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e097      	b.n	80052fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xb6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d8:	e023      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xc6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e8:	e01b      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xd6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f8:	e013      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xe6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005208:	e00b      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b10      	cmp	r3, #16
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xf6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005218:	e003      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 feaa 	bl	8005f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_TIM_PWM_Start+0x1e0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a32      	ldr	r2, [pc, #200]	; (8005308 <HAL_TIM_PWM_Start+0x1e4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a30      	ldr	r2, [pc, #192]	; (800530c <HAL_TIM_PWM_Start+0x1e8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <HAL_TIM_PWM_Start+0x1ec>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <HAL_TIM_PWM_Start+0x1f0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_Start+0x142>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_TIM_PWM_Start+0x144>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a20      	ldr	r2, [pc, #128]	; (8005304 <HAL_TIM_PWM_Start+0x1e0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d018      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d013      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x194>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_TIM_PWM_Start+0x1f4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x194>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_TIM_PWM_Start+0x1f8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x194>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <HAL_TIM_PWM_Start+0x1e4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_PWM_Start+0x194>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a16      	ldr	r2, [pc, #88]	; (800530c <HAL_TIM_PWM_Start+0x1e8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d115      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <HAL_TIM_PWM_Start+0x1fc>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d015      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1d2>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d011      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	00010007 	.word	0x00010007

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ff      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b14      	cmp	r3, #20
 800534e:	f200 80f0 	bhi.w	8005532 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	080053ad 	.word	0x080053ad
 800535c:	08005533 	.word	0x08005533
 8005360:	08005533 	.word	0x08005533
 8005364:	08005533 	.word	0x08005533
 8005368:	080053ed 	.word	0x080053ed
 800536c:	08005533 	.word	0x08005533
 8005370:	08005533 	.word	0x08005533
 8005374:	08005533 	.word	0x08005533
 8005378:	0800542f 	.word	0x0800542f
 800537c:	08005533 	.word	0x08005533
 8005380:	08005533 	.word	0x08005533
 8005384:	08005533 	.word	0x08005533
 8005388:	0800546f 	.word	0x0800546f
 800538c:	08005533 	.word	0x08005533
 8005390:	08005533 	.word	0x08005533
 8005394:	08005533 	.word	0x08005533
 8005398:	080054b1 	.word	0x080054b1
 800539c:	08005533 	.word	0x08005533
 80053a0:	08005533 	.word	0x08005533
 80053a4:	08005533 	.word	0x08005533
 80053a8:	080054f1 	.word	0x080054f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fa54 	bl	8005860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
      break;
 80053ea:	e0a5      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fac4 	bl	8005980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
      break;
 800542c:	e084      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fb2d 	bl	8005a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0208 	orr.w	r2, r2, #8
 8005448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0204 	bic.w	r2, r2, #4
 8005458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      break;
 800546c:	e064      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb95 	bl	8005ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
      break;
 80054ae:	e043      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fbfe 	bl	8005cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054ee:	e023      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc42 	bl	8005d80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005530:	e002      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop

0800554c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_ConfigClockSource+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e0de      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x1da>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800558a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a63      	ldr	r2, [pc, #396]	; (8005730 <HAL_TIM_ConfigClockSource+0x1e4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f000 80a9 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 80055a8:	4a61      	ldr	r2, [pc, #388]	; (8005730 <HAL_TIM_ConfigClockSource+0x1e4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f200 80ae 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055b0:	4a60      	ldr	r2, [pc, #384]	; (8005734 <HAL_TIM_ConfigClockSource+0x1e8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f000 80a1 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 80055b8:	4a5e      	ldr	r2, [pc, #376]	; (8005734 <HAL_TIM_ConfigClockSource+0x1e8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f200 80a6 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055c0:	4a5d      	ldr	r2, [pc, #372]	; (8005738 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f000 8099 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 80055c8:	4a5b      	ldr	r2, [pc, #364]	; (8005738 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f200 809e 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055d0:	4a5a      	ldr	r2, [pc, #360]	; (800573c <HAL_TIM_ConfigClockSource+0x1f0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f000 8091 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 80055d8:	4a58      	ldr	r2, [pc, #352]	; (800573c <HAL_TIM_ConfigClockSource+0x1f0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f200 8096 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055e4:	f000 8089 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 80055e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055ec:	f200 808e 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	d03e      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0x128>
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	f200 8087 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	f000 8086 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1c6>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d87f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d01a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xfa>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d87b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d050      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x16e>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d877      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d03c      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x14e>
 8005620:	2b50      	cmp	r3, #80	; 0x50
 8005622:	d873      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d058      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x18e>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d86f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d064      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d86b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d060      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d867      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005640:	2b10      	cmp	r3, #16
 8005642:	d05a      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005644:	e062      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f000 fc75 	bl	8005f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	609a      	str	r2, [r3, #8]
      break;
 8005672:	e04f      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f000 fc5e 	bl	8005f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005696:	609a      	str	r2, [r3, #8]
      break;
 8005698:	e03c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fbd0 	bl	8005e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2150      	movs	r1, #80	; 0x50
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fc29 	bl	8005f0a <TIM_ITRx_SetConfig>
      break;
 80056b8:	e02c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fbef 	bl	8005eaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2160      	movs	r1, #96	; 0x60
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fc19 	bl	8005f0a <TIM_ITRx_SetConfig>
      break;
 80056d8:	e01c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fbb0 	bl	8005e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2140      	movs	r1, #64	; 0x40
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc09 	bl	8005f0a <TIM_ITRx_SetConfig>
      break;
 80056f8:	e00c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f000 fc00 	bl	8005f0a <TIM_ITRx_SetConfig>
      break;
 800570a:	e003      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e000      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	00100070 	.word	0x00100070
 8005734:	00100040 	.word	0x00100040
 8005738:	00100030 	.word	0x00100030
 800573c:	00100020 	.word	0x00100020

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3c      	ldr	r2, [pc, #240]	; (8005844 <TIM_Base_SetConfig+0x104>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a39      	ldr	r2, [pc, #228]	; (8005848 <TIM_Base_SetConfig+0x108>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a38      	ldr	r2, [pc, #224]	; (800584c <TIM_Base_SetConfig+0x10c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a37      	ldr	r2, [pc, #220]	; (8005850 <TIM_Base_SetConfig+0x110>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <TIM_Base_SetConfig+0x104>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <TIM_Base_SetConfig+0x108>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a29      	ldr	r2, [pc, #164]	; (800584c <TIM_Base_SetConfig+0x10c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a28      	ldr	r2, [pc, #160]	; (8005850 <TIM_Base_SetConfig+0x110>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a27      	ldr	r2, [pc, #156]	; (8005854 <TIM_Base_SetConfig+0x114>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a26      	ldr	r2, [pc, #152]	; (8005858 <TIM_Base_SetConfig+0x118>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <TIM_Base_SetConfig+0x11c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a10      	ldr	r2, [pc, #64]	; (8005844 <TIM_Base_SetConfig+0x104>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00f      	beq.n	8005828 <TIM_Base_SetConfig+0xe8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a11      	ldr	r2, [pc, #68]	; (8005850 <TIM_Base_SetConfig+0x110>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00b      	beq.n	8005828 <TIM_Base_SetConfig+0xe8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a10      	ldr	r2, [pc, #64]	; (8005854 <TIM_Base_SetConfig+0x114>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_Base_SetConfig+0xe8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0f      	ldr	r2, [pc, #60]	; (8005858 <TIM_Base_SetConfig+0x118>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0xe8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a0e      	ldr	r2, [pc, #56]	; (800585c <TIM_Base_SetConfig+0x11c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d103      	bne.n	8005830 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	615a      	str	r2, [r3, #20]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a2c      	ldr	r2, [pc, #176]	; (800596c <TIM_OC1_SetConfig+0x10c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <TIM_OC1_SetConfig+0x110>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <TIM_OC1_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a29      	ldr	r2, [pc, #164]	; (8005978 <TIM_OC1_SetConfig+0x118>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a28      	ldr	r2, [pc, #160]	; (800597c <TIM_OC1_SetConfig+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10c      	bne.n	80058fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0308 	bic.w	r3, r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <TIM_OC1_SetConfig+0x10c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <TIM_OC1_SetConfig+0x110>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	; (8005974 <TIM_OC1_SetConfig+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <TIM_OC1_SetConfig+0x118>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC1_SetConfig+0x11c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d111      	bne.n	8005946 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f023 0210 	bic.w	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <TIM_OC2_SetConfig+0x100>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC2_SetConfig+0x6c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <TIM_OC2_SetConfig+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10d      	bne.n	8005a08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <TIM_OC2_SetConfig+0x100>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <TIM_OC2_SetConfig+0x104>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <TIM_OC2_SetConfig+0x108>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <TIM_OC2_SetConfig+0x10c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <TIM_OC2_SetConfig+0x110>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d113      	bne.n	8005a58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40013400 	.word	0x40013400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800

08005a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_OC3_SetConfig+0xfc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0x6a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <TIM_OC3_SetConfig+0x100>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <TIM_OC3_SetConfig+0xfc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00f      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <TIM_OC3_SetConfig+0x100>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <TIM_OC3_SetConfig+0x104>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_OC3_SetConfig+0x108>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_OC3_SetConfig+0x10c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d113      	bne.n	8005b6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <TIM_OC4_SetConfig+0x100>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC4_SetConfig+0x6c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <TIM_OC4_SetConfig+0x104>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10d      	bne.n	8005c2c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	031b      	lsls	r3, r3, #12
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <TIM_OC4_SetConfig+0x100>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_OC4_SetConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <TIM_OC4_SetConfig+0x104>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_OC4_SetConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <TIM_OC4_SetConfig+0x108>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_OC4_SetConfig+0xb0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <TIM_OC4_SetConfig+0x10c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC4_SetConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <TIM_OC4_SetConfig+0x110>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d113      	bne.n	8005c7c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	019b      	lsls	r3, r3, #6
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	019b      	lsls	r3, r3, #6
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a17      	ldr	r2, [pc, #92]	; (8005d6c <TIM_OC5_SetConfig+0xb4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00f      	beq.n	8005d32 <TIM_OC5_SetConfig+0x7a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <TIM_OC5_SetConfig+0xb8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00b      	beq.n	8005d32 <TIM_OC5_SetConfig+0x7a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <TIM_OC5_SetConfig+0xbc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d007      	beq.n	8005d32 <TIM_OC5_SetConfig+0x7a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <TIM_OC5_SetConfig+0xc0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC5_SetConfig+0x7a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <TIM_OC5_SetConfig+0xc4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d109      	bne.n	8005d46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	621a      	str	r2, [r3, #32]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	051b      	lsls	r3, r3, #20
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <TIM_OC6_SetConfig+0xb8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_OC6_SetConfig+0x7c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC6_SetConfig+0xbc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_OC6_SetConfig+0x7c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC6_SetConfig+0xc0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_OC6_SetConfig+0x7c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <TIM_OC6_SetConfig+0xc4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC6_SetConfig+0x7c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <TIM_OC6_SetConfig+0xc8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d109      	bne.n	8005e10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800

08005e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f023 0201 	bic.w	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 030a 	bic.w	r3, r3, #10
 8005e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	031b      	lsls	r3, r3, #12
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f043 0307 	orr.w	r3, r3, #7
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	021a      	lsls	r2, r3, #8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2201      	movs	r2, #1
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1a      	ldr	r2, [r3, #32]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e065      	b.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d013      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10c      	bne.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40014000 	.word	0x40014000

080060d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e087      	b.n	8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a27      	ldr	r2, [pc, #156]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d106      	bne.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1e      	ldr	r2, [pc, #120]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d126      	bne.n	80061ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	051b      	lsls	r3, r3, #20
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0e      	ldr	r2, [pc, #56]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d106      	bne.n	80061ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40013400 	.word	0x40013400

08006214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e042      	b.n	80062ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fc f89d 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	; 0x24
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fc62 	bl	8006b20 <UART_SetConfig>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e022      	b.n	80062ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ff22 	bl	80070b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 ffa9 	bl	80071fc <UART_CheckIdleState>
 80062aa:	4603      	mov	r3, r0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b091      	sub	sp, #68	; 0x44
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	f040 808c 	bne.w	80063e6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_UART_Transmit_IT+0x26>
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e084      	b.n	80063e8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Transmit_IT+0x38>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e07d      	b.n	80063e8 <HAL_UART_Transmit_IT+0x134>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2221      	movs	r2, #33	; 0x21
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006328:	d12e      	bne.n	8006388 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	d107      	bne.n	8006344 <HAL_UART_Transmit_IT+0x90>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <HAL_UART_Transmit_IT+0x140>)
 8006340:	675a      	str	r2, [r3, #116]	; 0x74
 8006342:	e002      	b.n	800634a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <HAL_UART_Transmit_IT+0x144>)
 8006348:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006372:	637a      	str	r2, [r7, #52]	; 0x34
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <HAL_UART_Transmit_IT+0x9e>
 8006386:	e02c      	b.n	80063e2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d107      	bne.n	80063a2 <HAL_UART_Transmit_IT+0xee>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <HAL_UART_Transmit_IT+0x148>)
 800639e:	675a      	str	r2, [r3, #116]	; 0x74
 80063a0:	e002      	b.n	80063a8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_UART_Transmit_IT+0x14c>)
 80063a6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	61bb      	str	r3, [r7, #24]
   return(result);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e6      	bne.n	80063b0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e000      	b.n	80063e8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3744      	adds	r7, #68	; 0x44
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	08007b27 	.word	0x08007b27
 80063f8:	08007a47 	.word	0x08007a47
 80063fc:	08007985 	.word	0x08007985
 8006400:	080078cd 	.word	0x080078cd

08006404 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006418:	2b20      	cmp	r3, #32
 800641a:	d142      	bne.n	80064a2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Receive_DMA+0x24>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e03b      	b.n	80064a4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Receive_DMA+0x36>
 8006436:	2302      	movs	r3, #2
 8006438:	e034      	b.n	80064a4 <HAL_UART_Receive_DMA+0xa0>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_UART_Receive_DMA+0xa8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01f      	beq.n	8006492 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d018      	beq.n	8006492 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	613b      	str	r3, [r7, #16]
   return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	61bb      	str	r3, [r7, #24]
   return(result);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e6      	bne.n	8006460 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	461a      	mov	r2, r3
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 ffc3 	bl	8007424 <UART_Start_Receive_DMA>
 800649e:	4603      	mov	r3, r0
 80064a0:	e000      	b.n	80064a4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	; 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40008000 	.word	0x40008000

080064b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b0ba      	sub	sp, #232	; 0xe8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064da:	f640 030f 	movw	r3, #2063	; 0x80f
 80064de:	4013      	ands	r3, r2
 80064e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11b      	bne.n	8006524 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d015      	beq.n	8006524 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 82d6 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
      }
      return;
 8006522:	e2d0      	b.n	8006ac6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 811f 	beq.w	800676c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800652e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006532:	4b8b      	ldr	r3, [pc, #556]	; (8006760 <HAL_UART_IRQHandler+0x2b0>)
 8006534:	4013      	ands	r3, r2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800653a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800653e:	4b89      	ldr	r3, [pc, #548]	; (8006764 <HAL_UART_IRQHandler+0x2b4>)
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8112 	beq.w	800676c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d011      	beq.n	8006578 <HAL_UART_IRQHandler+0xc8>
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2201      	movs	r2, #1
 8006566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	f043 0201 	orr.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d011      	beq.n	80065a8 <HAL_UART_IRQHandler+0xf8>
 8006584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2202      	movs	r2, #2
 8006596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_UART_IRQHandler+0x128>
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2204      	movs	r2, #4
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ce:	f043 0202 	orr.w	r2, r3, #2
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065f4:	4b5a      	ldr	r3, [pc, #360]	; (8006760 <HAL_UART_IRQHandler+0x2b0>)
 80065f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2208      	movs	r2, #8
 8006602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660a:	f043 0208 	orr.w	r2, r3, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661c:	2b00      	cmp	r3, #0
 800661e:	d012      	beq.n	8006646 <HAL_UART_IRQHandler+0x196>
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f043 0220 	orr.w	r2, r3, #32
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 823c 	beq.w	8006aca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d013      	beq.n	8006686 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800668c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d005      	beq.n	80066aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800669e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04f      	beq.n	800674a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 ffa3 	bl	80075f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d141      	bne.n	8006742 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1d9      	bne.n	80066be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d013      	beq.n	800673a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006716:	4a14      	ldr	r2, [pc, #80]	; (8006768 <HAL_UART_IRQHandler+0x2b8>)
 8006718:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	4618      	mov	r0, r3
 8006720:	f7fc fb34 	bl	8002d8c <HAL_DMA_Abort_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d017      	beq.n	800675a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e00f      	b.n	800675a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9da 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	e00b      	b.n	800675a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9d6 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	e007      	b.n	800675a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f9d2 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006758:	e1b7      	b.n	8006aca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675a:	bf00      	nop
    return;
 800675c:	e1b5      	b.n	8006aca <HAL_UART_IRQHandler+0x61a>
 800675e:	bf00      	nop
 8006760:	10000001 	.word	0x10000001
 8006764:	04000120 	.word	0x04000120
 8006768:	080078a1 	.word	0x080078a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 814a 	bne.w	8006a0a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8143 	beq.w	8006a0a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 813c 	beq.w	8006a0a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	f040 80b5 	bne.w	8006914 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8187 	beq.w	8006ace <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 817f 	bcs.w	8006ace <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 8086 	bne.w	80068f8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800681a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800682e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1da      	bne.n	80067ec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800685a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800685e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800686c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e1      	bne.n	8006836 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006896:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800689c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e3      	bne.n	8006872 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c8:	f023 0310 	bic.w	r3, r3, #16
 80068cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068da:	65bb      	str	r3, [r7, #88]	; 0x58
 80068dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e4      	bne.n	80068b8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fc f9f1 	bl	8002cda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006904:	b29b      	uxth	r3, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	b29b      	uxth	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f8fb 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006912:	e0dc      	b.n	8006ace <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006920:	b29b      	uxth	r3, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80ce 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80c9 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e4      	bne.n	8006940 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	623b      	str	r3, [r7, #32]
   return(result);
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e1      	bne.n	8006976 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0310 	bic.w	r3, r3, #16
 80069da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	617b      	str	r3, [r7, #20]
   return(result);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e4      	bne.n	80069c6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f880 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a08:	e063      	b.n	8006ad2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00e      	beq.n	8006a34 <HAL_UART_IRQHandler+0x584>
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f91a 	bl	8007c66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a32:	e051      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d014      	beq.n	8006a6a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d03a      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
    }
    return;
 8006a68:	e035      	b.n	8006ad6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5da>
 8006a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f8c4 	bl	8007c10 <UART_EndTransmit_IT>
    return;
 8006a88:	e026      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <HAL_UART_IRQHandler+0x5fa>
 8006a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 f8f3 	bl	8007c8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa8:	e016      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d010      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x628>
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da0c      	bge.n	8006ad8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 f8db 	bl	8007c7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac4:	e008      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ac6:	bf00      	nop
 8006ac8:	e006      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
    return;
 8006aca:	bf00      	nop
 8006acc:	e004      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_UART_IRQHandler+0x628>
    return;
 8006ad6:	bf00      	nop
  }
}
 8006ad8:	37e8      	adds	r7, #232	; 0xe8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b24:	b08c      	sub	sp, #48	; 0x30
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4bab      	ldr	r3, [pc, #684]	; (8006dfc <UART_SetConfig+0x2dc>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4aa0      	ldr	r2, [pc, #640]	; (8006e00 <UART_SetConfig+0x2e0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	f023 010f 	bic.w	r1, r3, #15
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a91      	ldr	r2, [pc, #580]	; (8006e04 <UART_SetConfig+0x2e4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d125      	bne.n	8006c10 <UART_SetConfig+0xf0>
 8006bc4:	4b90      	ldr	r3, [pc, #576]	; (8006e08 <UART_SetConfig+0x2e8>)
 8006bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d81a      	bhi.n	8006c08 <UART_SetConfig+0xe8>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <UART_SetConfig+0xb8>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006be9 	.word	0x08006be9
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	08006bf1 	.word	0x08006bf1
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e0d6      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf6:	e0d2      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e0ce      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c00:	2308      	movs	r3, #8
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c06:	e0ca      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0e:	e0c6      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a7d      	ldr	r2, [pc, #500]	; (8006e0c <UART_SetConfig+0x2ec>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d138      	bne.n	8006c8c <UART_SetConfig+0x16c>
 8006c1a:	4b7b      	ldr	r3, [pc, #492]	; (8006e08 <UART_SetConfig+0x2e8>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b0c      	cmp	r3, #12
 8006c26:	d82d      	bhi.n	8006c84 <UART_SetConfig+0x164>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x110>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006c85 	.word	0x08006c85
 8006c3c:	08006c85 	.word	0x08006c85
 8006c40:	08006c75 	.word	0x08006c75
 8006c44:	08006c85 	.word	0x08006c85
 8006c48:	08006c85 	.word	0x08006c85
 8006c4c:	08006c85 	.word	0x08006c85
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	08006c85 	.word	0x08006c85
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c7d 	.word	0x08006c7d
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e098      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e094      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e090      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c82:	e08c      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	e088      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a5f      	ldr	r2, [pc, #380]	; (8006e10 <UART_SetConfig+0x2f0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d125      	bne.n	8006ce2 <UART_SetConfig+0x1c2>
 8006c96:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <UART_SetConfig+0x2e8>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ca0:	2b30      	cmp	r3, #48	; 0x30
 8006ca2:	d016      	beq.n	8006cd2 <UART_SetConfig+0x1b2>
 8006ca4:	2b30      	cmp	r3, #48	; 0x30
 8006ca6:	d818      	bhi.n	8006cda <UART_SetConfig+0x1ba>
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d00a      	beq.n	8006cc2 <UART_SetConfig+0x1a2>
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d814      	bhi.n	8006cda <UART_SetConfig+0x1ba>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <UART_SetConfig+0x19a>
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d008      	beq.n	8006cca <UART_SetConfig+0x1aa>
 8006cb8:	e00f      	b.n	8006cda <UART_SetConfig+0x1ba>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc0:	e06d      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc8:	e069      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006cca:	2304      	movs	r3, #4
 8006ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd0:	e065      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd8:	e061      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006cda:	2310      	movs	r3, #16
 8006cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce0:	e05d      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a4b      	ldr	r2, [pc, #300]	; (8006e14 <UART_SetConfig+0x2f4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d125      	bne.n	8006d38 <UART_SetConfig+0x218>
 8006cec:	4b46      	ldr	r3, [pc, #280]	; (8006e08 <UART_SetConfig+0x2e8>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf8:	d016      	beq.n	8006d28 <UART_SetConfig+0x208>
 8006cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006cfc:	d818      	bhi.n	8006d30 <UART_SetConfig+0x210>
 8006cfe:	2b80      	cmp	r3, #128	; 0x80
 8006d00:	d00a      	beq.n	8006d18 <UART_SetConfig+0x1f8>
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d814      	bhi.n	8006d30 <UART_SetConfig+0x210>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <UART_SetConfig+0x1f0>
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d008      	beq.n	8006d20 <UART_SetConfig+0x200>
 8006d0e:	e00f      	b.n	8006d30 <UART_SetConfig+0x210>
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d16:	e042      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d1e:	e03e      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d26:	e03a      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2e:	e036      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d36:	e032      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a30      	ldr	r2, [pc, #192]	; (8006e00 <UART_SetConfig+0x2e0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d12a      	bne.n	8006d98 <UART_SetConfig+0x278>
 8006d42:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <UART_SetConfig+0x2e8>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d50:	d01a      	beq.n	8006d88 <UART_SetConfig+0x268>
 8006d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d56:	d81b      	bhi.n	8006d90 <UART_SetConfig+0x270>
 8006d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5c:	d00c      	beq.n	8006d78 <UART_SetConfig+0x258>
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d62:	d815      	bhi.n	8006d90 <UART_SetConfig+0x270>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <UART_SetConfig+0x250>
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d008      	beq.n	8006d80 <UART_SetConfig+0x260>
 8006d6e:	e00f      	b.n	8006d90 <UART_SetConfig+0x270>
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d76:	e012      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d7e:	e00e      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d80:	2304      	movs	r3, #4
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d86:	e00a      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d88:	2308      	movs	r3, #8
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8e:	e006      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d90:	2310      	movs	r3, #16
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d96:	e002      	b.n	8006d9e <UART_SetConfig+0x27e>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <UART_SetConfig+0x2e0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	f040 80a8 	bne.w	8006efa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d834      	bhi.n	8006e1c <UART_SetConfig+0x2fc>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0x298>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006ddd 	.word	0x08006ddd
 8006dbc:	08006e1d 	.word	0x08006e1d
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006e1d 	.word	0x08006e1d
 8006dc8:	08006deb 	.word	0x08006deb
 8006dcc:	08006e1d 	.word	0x08006e1d
 8006dd0:	08006e1d 	.word	0x08006e1d
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006df3 	.word	0x08006df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ddc:	f7fd fe88 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006de2:	e021      	b.n	8006e28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <UART_SetConfig+0x2f8>)
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006de8:	e01e      	b.n	8006e28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dea:	f7fd fe13 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8006dee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006df0:	e01a      	b.n	8006e28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006df8:	e016      	b.n	8006e28 <UART_SetConfig+0x308>
 8006dfa:	bf00      	nop
 8006dfc:	cfff69f3 	.word	0xcfff69f3
 8006e00:	40008000 	.word	0x40008000
 8006e04:	40013800 	.word	0x40013800
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	40004400 	.word	0x40004400
 8006e10:	40004800 	.word	0x40004800
 8006e14:	40004c00 	.word	0x40004c00
 8006e18:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 812a 	beq.w	8007084 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	4a9e      	ldr	r2, [pc, #632]	; (80070b0 <UART_SetConfig+0x590>)
 8006e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d305      	bcc.n	8006e60 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d903      	bls.n	8006e68 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e66:	e10d      	b.n	8007084 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	60fa      	str	r2, [r7, #12]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	4a8e      	ldr	r2, [pc, #568]	; (80070b0 <UART_SetConfig+0x590>)
 8006e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e8a:	f7f9 ff05 	bl	8000c98 <__aeabi_uldivmod>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	020b      	lsls	r3, r1, #8
 8006ea0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ea4:	0202      	lsls	r2, r0, #8
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	6849      	ldr	r1, [r1, #4]
 8006eaa:	0849      	lsrs	r1, r1, #1
 8006eac:	2000      	movs	r0, #0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	eb12 0804 	adds.w	r8, r2, r4
 8006eb6:	eb43 0905 	adc.w	r9, r3, r5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	469a      	mov	sl, r3
 8006ec2:	4693      	mov	fp, r2
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	465b      	mov	r3, fp
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fee4 	bl	8000c98 <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ede:	d308      	bcc.n	8006ef2 <UART_SetConfig+0x3d2>
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee6:	d204      	bcs.n	8006ef2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	60da      	str	r2, [r3, #12]
 8006ef0:	e0c8      	b.n	8007084 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ef8:	e0c4      	b.n	8007084 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	d167      	bne.n	8006fd4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006f04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d828      	bhi.n	8006f5e <UART_SetConfig+0x43e>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0x3f4>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f39 	.word	0x08006f39
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f5f 	.word	0x08006f5f
 8006f24:	08006f4f 	.word	0x08006f4f
 8006f28:	08006f5f 	.word	0x08006f5f
 8006f2c:	08006f5f 	.word	0x08006f5f
 8006f30:	08006f5f 	.word	0x08006f5f
 8006f34:	08006f57 	.word	0x08006f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f38:	f7fd fdda 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3e:	e014      	b.n	8006f6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f40:	f7fd fdec 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8006f44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f46:	e010      	b.n	8006f6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f48:	4b5a      	ldr	r3, [pc, #360]	; (80070b4 <UART_SetConfig+0x594>)
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f4c:	e00d      	b.n	8006f6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4e:	f7fd fd61 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f54:	e009      	b.n	8006f6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f5c:	e005      	b.n	8006f6a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8089 	beq.w	8007084 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	4a4e      	ldr	r2, [pc, #312]	; (80070b0 <UART_SetConfig+0x590>)
 8006f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f84:	005a      	lsls	r2, r3, #1
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	441a      	add	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d916      	bls.n	8006fcc <UART_SetConfig+0x4ac>
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa4:	d212      	bcs.n	8006fcc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f023 030f 	bic.w	r3, r3, #15
 8006fae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	8bfb      	ldrh	r3, [r7, #30]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	8bfa      	ldrh	r2, [r7, #30]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	e05b      	b.n	8007084 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fd2:	e057      	b.n	8007084 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d828      	bhi.n	800702e <UART_SetConfig+0x50e>
 8006fdc:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x4c4>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fd fd72 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 800700c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800700e:	e014      	b.n	800703a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fd fd84 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007016:	e010      	b.n	800703a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <UART_SetConfig+0x594>)
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800701c:	e00d      	b.n	800703a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fd fcf9 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8007022:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007024:	e009      	b.n	800703a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800702c:	e005      	b.n	800703a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007038:	bf00      	nop
    }

    if (pclk != 0U)
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d021      	beq.n	8007084 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <UART_SetConfig+0x590>)
 8007046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800704a:	461a      	mov	r2, r3
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	441a      	add	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d909      	bls.n	800707e <UART_SetConfig+0x55e>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007070:	d205      	bcs.n	800707e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	b29a      	uxth	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60da      	str	r2, [r3, #12]
 800707c:	e002      	b.n	8007084 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2201      	movs	r2, #1
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2201      	movs	r2, #1
 8007090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2200      	movs	r2, #0
 800709e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80070a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3730      	adds	r7, #48	; 0x30
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	0800b010 	.word	0x0800b010
 80070b4:	00f42400 	.word	0x00f42400

080070b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b6:	d10a      	bne.n	80071ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800720c:	f7fb fb04 	bl	8002818 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d10e      	bne.n	800723e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f82f 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e025      	b.n	800728a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b04      	cmp	r3, #4
 800724a:	d10e      	bne.n	800726a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f819 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00f      	b.n	800728a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b09c      	sub	sp, #112	; 0x70
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a2:	e0a9      	b.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	f000 80a5 	beq.w	80073f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fb fab3 	bl	8002818 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d140      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072d8:	667b      	str	r3, [r7, #100]	; 0x64
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3308      	adds	r3, #8
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	663b      	str	r3, [r7, #96]	; 0x60
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007316:	64ba      	str	r2, [r7, #72]	; 0x48
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800731c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e069      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d051      	beq.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007362:	d149      	bne.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800736c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
 800738e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e6      	bne.n	800736e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	613b      	str	r3, [r7, #16]
   return(result);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073c0:	623a      	str	r2, [r7, #32]
 80073c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	69f9      	ldr	r1, [r7, #28]
 80073c6:	6a3a      	ldr	r2, [r7, #32]
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e010      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69da      	ldr	r2, [r3, #28]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4013      	ands	r3, r2
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	429a      	cmp	r2, r3
 8007414:	f43f af46 	beq.w	80072a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3770      	adds	r7, #112	; 0x70
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b096      	sub	sp, #88	; 0x58
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2222      	movs	r2, #34	; 0x22
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02c      	beq.n	80074b2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745c:	4a42      	ldr	r2, [pc, #264]	; (8007568 <UART_Start_Receive_DMA+0x144>)
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007464:	4a41      	ldr	r2, [pc, #260]	; (800756c <UART_Start_Receive_DMA+0x148>)
 8007466:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746c:	4a40      	ldr	r2, [pc, #256]	; (8007570 <UART_Start_Receive_DMA+0x14c>)
 800746e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007474:	2200      	movs	r2, #0
 8007476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3324      	adds	r3, #36	; 0x24
 8007482:	4619      	mov	r1, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007488:	461a      	mov	r2, r3
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	f7fb fbaa 	bl	8002be4 <HAL_DMA_Start_IT>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2210      	movs	r2, #16
 800749a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e055      	b.n	800755e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d018      	beq.n	80074f4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d6:	657b      	str	r3, [r7, #84]	; 0x54
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e6      	bne.n	80074c2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	653b      	str	r3, [r7, #80]	; 0x50
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007514:	637a      	str	r2, [r7, #52]	; 0x34
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800751a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e5      	bne.n	80074f4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	613b      	str	r3, [r7, #16]
   return(result);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800753e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007548:	623a      	str	r2, [r7, #32]
 800754a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	69f9      	ldr	r1, [r7, #28]
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	61bb      	str	r3, [r7, #24]
   return(result);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e5      	bne.n	8007528 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3758      	adds	r7, #88	; 0x58
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	080076c3 	.word	0x080076c3
 800756c:	080077e9 	.word	0x080077e9
 8007570:	08007821 	.word	0x08007821

08007574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b08f      	sub	sp, #60	; 0x3c
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	61fb      	str	r3, [r7, #28]
   return(result);
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800759c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e6      	bne.n	800757c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3308      	adds	r3, #8
 80075b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	61ba      	str	r2, [r7, #24]
 80075d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	613b      	str	r3, [r7, #16]
   return(result);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e5      	bne.n	80075ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80075ea:	bf00      	nop
 80075ec:	373c      	adds	r7, #60	; 0x3c
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b095      	sub	sp, #84	; 0x54
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	643b      	str	r3, [r7, #64]	; 0x40
 800761e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e6      	bne.n	80075fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	64bb      	str	r3, [r7, #72]	; 0x48
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800765a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e3      	bne.n	8007630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d118      	bne.n	80076a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	60bb      	str	r3, [r7, #8]
   return(result);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f023 0310 	bic.w	r3, r3, #16
 8007684:	647b      	str	r3, [r7, #68]	; 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	613b      	str	r3, [r7, #16]
   return(result);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80076b6:	bf00      	nop
 80076b8:	3754      	adds	r7, #84	; 0x54
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b09c      	sub	sp, #112	; 0x70
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d171      	bne.n	80077c2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80076fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007704:	65bb      	str	r3, [r7, #88]	; 0x58
 8007706:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800770a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e6      	bne.n	80076e6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3308      	adds	r3, #8
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	667b      	str	r3, [r7, #100]	; 0x64
 8007730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3308      	adds	r3, #8
 8007736:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007738:	647a      	str	r2, [r7, #68]	; 0x44
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800773e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	623b      	str	r3, [r7, #32]
   return(result);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007762:	663b      	str	r3, [r7, #96]	; 0x60
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800776c:	633a      	str	r2, [r7, #48]	; 0x30
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d118      	bne.n	80077c2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	60fb      	str	r3, [r7, #12]
   return(result);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 0310 	bic.w	r3, r3, #16
 80077a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	69b9      	ldr	r1, [r7, #24]
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	617b      	str	r3, [r7, #20]
   return(result);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d107      	bne.n	80077da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d0:	4619      	mov	r1, r3
 80077d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077d4:	f7ff f998 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077d8:	e002      	b.n	80077e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80077da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077dc:	f7f9 fcb2 	bl	8001144 <HAL_UART_RxCpltCallback>
}
 80077e0:	bf00      	nop
 80077e2:	3770      	adds	r7, #112	; 0x70
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d109      	bne.n	8007812 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff f97c 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007810:	e002      	b.n	8007818 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff f964 	bl	8006ae0 <HAL_UART_RxHalfCpltCallback>
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007834:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d109      	bne.n	8007860 <UART_DMAError+0x40>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d106      	bne.n	8007860 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2200      	movs	r2, #0
 8007856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800785a:	6978      	ldr	r0, [r7, #20]
 800785c:	f7ff fe8a 	bl	8007574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d109      	bne.n	8007882 <UART_DMAError+0x62>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b22      	cmp	r3, #34	; 0x22
 8007872:	d106      	bne.n	8007882 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2200      	movs	r2, #0
 8007878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800787c:	6978      	ldr	r0, [r7, #20]
 800787e:	f7ff feba 	bl	80075f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007888:	f043 0210 	orr.w	r2, r3, #16
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007892:	6978      	ldr	r0, [r7, #20]
 8007894:	f7ff f92e 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007898:	bf00      	nop
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff f918 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c4:	bf00      	nop
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b08f      	sub	sp, #60	; 0x3c
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078da:	2b21      	cmp	r3, #33	; 0x21
 80078dc:	d14c      	bne.n	8007978 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d132      	bne.n	8007950 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	60bb      	str	r3, [r7, #8]
   return(result);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	613b      	str	r3, [r7, #16]
   return(result);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e6      	bne.n	800791c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800794e:	e013      	b.n	8007978 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007978:	bf00      	nop
 800797a:	373c      	adds	r7, #60	; 0x3c
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b091      	sub	sp, #68	; 0x44
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007992:	2b21      	cmp	r3, #33	; 0x21
 8007994:	d151      	bne.n	8007a3a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d132      	bne.n	8007a08 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	623b      	str	r3, [r7, #32]
   return(result);
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
 80079c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e6      	bne.n	80079a2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	69b9      	ldr	r1, [r7, #24]
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e6      	bne.n	80079d4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a06:	e018      	b.n	8007a3a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a1c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	1c9a      	adds	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007a3a:	bf00      	nop
 8007a3c:	3744      	adds	r7, #68	; 0x44
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b091      	sub	sp, #68	; 0x44
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a54:	2b21      	cmp	r3, #33	; 0x21
 8007a56:	d160      	bne.n	8007b1a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a60:	e057      	b.n	8007b12 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d133      	bne.n	8007ad6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e5      	bne.n	8007a6e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	69b9      	ldr	r1, [r7, #24]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ad4:	e021      	b.n	8007b1a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d013      	beq.n	8007b0c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1a4      	bne.n	8007a62 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007b18:	e7ff      	b.n	8007b1a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007b1a:	bf00      	nop
 8007b1c:	3744      	adds	r7, #68	; 0x44
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b091      	sub	sp, #68	; 0x44
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	2b21      	cmp	r3, #33	; 0x21
 8007b36:	d165      	bne.n	8007c04 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b40:	e05c      	b.n	8007bfc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d133      	bne.n	8007bb6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6979      	ldr	r1, [r7, #20]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e6      	bne.n	8007b82 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007bb4:	e026      	b.n	8007c04 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d018      	beq.n	8007bf6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007bf6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d19f      	bne.n	8007b42 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007c02:	e7ff      	b.n	8007c04 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007c04:	bf00      	nop
 8007c06:	3744      	adds	r7, #68	; 0x44
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6979      	ldr	r1, [r7, #20]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	613b      	str	r3, [r7, #16]
   return(result);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7f9 fa5f 	bl	800111c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c5e:	bf00      	nop
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e027      	b.n	8007d08 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	; 0x24
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e02d      	b.n	8007d88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f84f 	bl	8007e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e02d      	b.n	8007e04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2224      	movs	r2, #36	; 0x24
 8007db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f811 	bl	8007e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d108      	bne.n	8007e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e2c:	e031      	b.n	8007e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e2e:	2308      	movs	r3, #8
 8007e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e32:	2308      	movs	r3, #8
 8007e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	0e5b      	lsrs	r3, r3, #25
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0f5b      	lsrs	r3, r3, #29
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	7b3a      	ldrb	r2, [r7, #12]
 8007e5a:	4911      	ldr	r1, [pc, #68]	; (8007ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e5c:	5c8a      	ldrb	r2, [r1, r2]
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e62:	7b3a      	ldrb	r2, [r7, #12]
 8007e64:	490f      	ldr	r1, [pc, #60]	; (8007ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	7b7a      	ldrb	r2, [r7, #13]
 8007e78:	4909      	ldr	r1, [pc, #36]	; (8007ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e7a:	5c8a      	ldrb	r2, [r1, r2]
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	0800b028 	.word	0x0800b028
 8007ea4:	0800b030 	.word	0x0800b030

08007ea8 <atan>:
 8007ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ec55 4b10 	vmov	r4, r5, d0
 8007eb0:	4bc3      	ldr	r3, [pc, #780]	; (80081c0 <atan+0x318>)
 8007eb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007eb6:	429e      	cmp	r6, r3
 8007eb8:	46ab      	mov	fp, r5
 8007eba:	dd18      	ble.n	8007eee <atan+0x46>
 8007ebc:	4bc1      	ldr	r3, [pc, #772]	; (80081c4 <atan+0x31c>)
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	dc01      	bgt.n	8007ec6 <atan+0x1e>
 8007ec2:	d109      	bne.n	8007ed8 <atan+0x30>
 8007ec4:	b144      	cbz	r4, 8007ed8 <atan+0x30>
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	462b      	mov	r3, r5
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 fa05 	bl	80002dc <__adddf3>
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	e006      	b.n	8007ee6 <atan+0x3e>
 8007ed8:	f1bb 0f00 	cmp.w	fp, #0
 8007edc:	f300 8131 	bgt.w	8008142 <atan+0x29a>
 8007ee0:	a59b      	add	r5, pc, #620	; (adr r5, 8008150 <atan+0x2a8>)
 8007ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ee6:	ec45 4b10 	vmov	d0, r4, r5
 8007eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	4bb6      	ldr	r3, [pc, #728]	; (80081c8 <atan+0x320>)
 8007ef0:	429e      	cmp	r6, r3
 8007ef2:	dc14      	bgt.n	8007f1e <atan+0x76>
 8007ef4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ef8:	429e      	cmp	r6, r3
 8007efa:	dc0d      	bgt.n	8007f18 <atan+0x70>
 8007efc:	a396      	add	r3, pc, #600	; (adr r3, 8008158 <atan+0x2b0>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	ee10 0a10 	vmov	r0, s0
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 f9e8 	bl	80002dc <__adddf3>
 8007f0c:	4baf      	ldr	r3, [pc, #700]	; (80081cc <atan+0x324>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f7f8 fe2a 	bl	8000b68 <__aeabi_dcmpgt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d1e6      	bne.n	8007ee6 <atan+0x3e>
 8007f18:	f04f 3aff 	mov.w	sl, #4294967295
 8007f1c:	e02b      	b.n	8007f76 <atan+0xce>
 8007f1e:	f000 f963 	bl	80081e8 <fabs>
 8007f22:	4bab      	ldr	r3, [pc, #684]	; (80081d0 <atan+0x328>)
 8007f24:	429e      	cmp	r6, r3
 8007f26:	ec55 4b10 	vmov	r4, r5, d0
 8007f2a:	f300 80bf 	bgt.w	80080ac <atan+0x204>
 8007f2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f32:	429e      	cmp	r6, r3
 8007f34:	f300 80a0 	bgt.w	8008078 <atan+0x1d0>
 8007f38:	ee10 2a10 	vmov	r2, s0
 8007f3c:	ee10 0a10 	vmov	r0, s0
 8007f40:	462b      	mov	r3, r5
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 f9ca 	bl	80002dc <__adddf3>
 8007f48:	4ba0      	ldr	r3, [pc, #640]	; (80081cc <atan+0x324>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f7f8 f9c4 	bl	80002d8 <__aeabi_dsub>
 8007f50:	2200      	movs	r2, #0
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 f9bd 	bl	80002dc <__adddf3>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4630      	mov	r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	f7f8 fc97 	bl	800089c <__aeabi_ddiv>
 8007f6e:	f04f 0a00 	mov.w	sl, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	460d      	mov	r5, r1
 8007f76:	4622      	mov	r2, r4
 8007f78:	462b      	mov	r3, r5
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 fb63 	bl	8000648 <__aeabi_dmul>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4680      	mov	r8, r0
 8007f88:	4689      	mov	r9, r1
 8007f8a:	f7f8 fb5d 	bl	8000648 <__aeabi_dmul>
 8007f8e:	a374      	add	r3, pc, #464	; (adr r3, 8008160 <atan+0x2b8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	f7f8 fb56 	bl	8000648 <__aeabi_dmul>
 8007f9c:	a372      	add	r3, pc, #456	; (adr r3, 8008168 <atan+0x2c0>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f99b 	bl	80002dc <__adddf3>
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	463b      	mov	r3, r7
 8007faa:	f7f8 fb4d 	bl	8000648 <__aeabi_dmul>
 8007fae:	a370      	add	r3, pc, #448	; (adr r3, 8008170 <atan+0x2c8>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 f992 	bl	80002dc <__adddf3>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	f7f8 fb44 	bl	8000648 <__aeabi_dmul>
 8007fc0:	a36d      	add	r3, pc, #436	; (adr r3, 8008178 <atan+0x2d0>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 f989 	bl	80002dc <__adddf3>
 8007fca:	4632      	mov	r2, r6
 8007fcc:	463b      	mov	r3, r7
 8007fce:	f7f8 fb3b 	bl	8000648 <__aeabi_dmul>
 8007fd2:	a36b      	add	r3, pc, #428	; (adr r3, 8008180 <atan+0x2d8>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f7f8 f980 	bl	80002dc <__adddf3>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	f7f8 fb32 	bl	8000648 <__aeabi_dmul>
 8007fe4:	a368      	add	r3, pc, #416	; (adr r3, 8008188 <atan+0x2e0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 f977 	bl	80002dc <__adddf3>
 8007fee:	4642      	mov	r2, r8
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	f7f8 fb29 	bl	8000648 <__aeabi_dmul>
 8007ff6:	a366      	add	r3, pc, #408	; (adr r3, 8008190 <atan+0x2e8>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fb20 	bl	8000648 <__aeabi_dmul>
 8008008:	a363      	add	r3, pc, #396	; (adr r3, 8008198 <atan+0x2f0>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 f963 	bl	80002d8 <__aeabi_dsub>
 8008012:	4632      	mov	r2, r6
 8008014:	463b      	mov	r3, r7
 8008016:	f7f8 fb17 	bl	8000648 <__aeabi_dmul>
 800801a:	a361      	add	r3, pc, #388	; (adr r3, 80081a0 <atan+0x2f8>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 f95a 	bl	80002d8 <__aeabi_dsub>
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	f7f8 fb0e 	bl	8000648 <__aeabi_dmul>
 800802c:	a35e      	add	r3, pc, #376	; (adr r3, 80081a8 <atan+0x300>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 f951 	bl	80002d8 <__aeabi_dsub>
 8008036:	4632      	mov	r2, r6
 8008038:	463b      	mov	r3, r7
 800803a:	f7f8 fb05 	bl	8000648 <__aeabi_dmul>
 800803e:	a35c      	add	r3, pc, #368	; (adr r3, 80081b0 <atan+0x308>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 f948 	bl	80002d8 <__aeabi_dsub>
 8008048:	4632      	mov	r2, r6
 800804a:	463b      	mov	r3, r7
 800804c:	f7f8 fafc 	bl	8000648 <__aeabi_dmul>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4640      	mov	r0, r8
 8008056:	4649      	mov	r1, r9
 8008058:	f7f8 f940 	bl	80002dc <__adddf3>
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	f7f8 faf2 	bl	8000648 <__aeabi_dmul>
 8008064:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	d14b      	bne.n	8008106 <atan+0x25e>
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 f931 	bl	80002d8 <__aeabi_dsub>
 8008076:	e72c      	b.n	8007ed2 <atan+0x2a>
 8008078:	ee10 0a10 	vmov	r0, s0
 800807c:	4b53      	ldr	r3, [pc, #332]	; (80081cc <atan+0x324>)
 800807e:	2200      	movs	r2, #0
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 f929 	bl	80002d8 <__aeabi_dsub>
 8008086:	4b51      	ldr	r3, [pc, #324]	; (80081cc <atan+0x324>)
 8008088:	4606      	mov	r6, r0
 800808a:	460f      	mov	r7, r1
 800808c:	2200      	movs	r2, #0
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	f7f8 f923 	bl	80002dc <__adddf3>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7f8 fbfd 	bl	800089c <__aeabi_ddiv>
 80080a2:	f04f 0a01 	mov.w	sl, #1
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	e764      	b.n	8007f76 <atan+0xce>
 80080ac:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <atan+0x32c>)
 80080ae:	429e      	cmp	r6, r3
 80080b0:	da1d      	bge.n	80080ee <atan+0x246>
 80080b2:	ee10 0a10 	vmov	r0, s0
 80080b6:	4b48      	ldr	r3, [pc, #288]	; (80081d8 <atan+0x330>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 f90c 	bl	80002d8 <__aeabi_dsub>
 80080c0:	4b45      	ldr	r3, [pc, #276]	; (80081d8 <atan+0x330>)
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	2200      	movs	r2, #0
 80080c8:	4620      	mov	r0, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	f7f8 fabc 	bl	8000648 <__aeabi_dmul>
 80080d0:	4b3e      	ldr	r3, [pc, #248]	; (80081cc <atan+0x324>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7f8 f902 	bl	80002dc <__adddf3>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fbdc 	bl	800089c <__aeabi_ddiv>
 80080e4:	f04f 0a02 	mov.w	sl, #2
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	e743      	b.n	8007f76 <atan+0xce>
 80080ee:	462b      	mov	r3, r5
 80080f0:	ee10 2a10 	vmov	r2, s0
 80080f4:	4939      	ldr	r1, [pc, #228]	; (80081dc <atan+0x334>)
 80080f6:	2000      	movs	r0, #0
 80080f8:	f7f8 fbd0 	bl	800089c <__aeabi_ddiv>
 80080fc:	f04f 0a03 	mov.w	sl, #3
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	e737      	b.n	8007f76 <atan+0xce>
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <atan+0x338>)
 8008108:	4e36      	ldr	r6, [pc, #216]	; (80081e4 <atan+0x33c>)
 800810a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800810e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008112:	e9da 2300 	ldrd	r2, r3, [sl]
 8008116:	f7f8 f8df 	bl	80002d8 <__aeabi_dsub>
 800811a:	4622      	mov	r2, r4
 800811c:	462b      	mov	r3, r5
 800811e:	f7f8 f8db 	bl	80002d8 <__aeabi_dsub>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	e9d6 0100 	ldrd	r0, r1, [r6]
 800812a:	f7f8 f8d5 	bl	80002d8 <__aeabi_dsub>
 800812e:	f1bb 0f00 	cmp.w	fp, #0
 8008132:	4604      	mov	r4, r0
 8008134:	460d      	mov	r5, r1
 8008136:	f6bf aed6 	bge.w	8007ee6 <atan+0x3e>
 800813a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800813e:	461d      	mov	r5, r3
 8008140:	e6d1      	b.n	8007ee6 <atan+0x3e>
 8008142:	a51d      	add	r5, pc, #116	; (adr r5, 80081b8 <atan+0x310>)
 8008144:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008148:	e6cd      	b.n	8007ee6 <atan+0x3e>
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w
 8008150:	54442d18 	.word	0x54442d18
 8008154:	bff921fb 	.word	0xbff921fb
 8008158:	8800759c 	.word	0x8800759c
 800815c:	7e37e43c 	.word	0x7e37e43c
 8008160:	e322da11 	.word	0xe322da11
 8008164:	3f90ad3a 	.word	0x3f90ad3a
 8008168:	24760deb 	.word	0x24760deb
 800816c:	3fa97b4b 	.word	0x3fa97b4b
 8008170:	a0d03d51 	.word	0xa0d03d51
 8008174:	3fb10d66 	.word	0x3fb10d66
 8008178:	c54c206e 	.word	0xc54c206e
 800817c:	3fb745cd 	.word	0x3fb745cd
 8008180:	920083ff 	.word	0x920083ff
 8008184:	3fc24924 	.word	0x3fc24924
 8008188:	5555550d 	.word	0x5555550d
 800818c:	3fd55555 	.word	0x3fd55555
 8008190:	2c6a6c2f 	.word	0x2c6a6c2f
 8008194:	bfa2b444 	.word	0xbfa2b444
 8008198:	52defd9a 	.word	0x52defd9a
 800819c:	3fadde2d 	.word	0x3fadde2d
 80081a0:	af749a6d 	.word	0xaf749a6d
 80081a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80081a8:	fe231671 	.word	0xfe231671
 80081ac:	3fbc71c6 	.word	0x3fbc71c6
 80081b0:	9998ebc4 	.word	0x9998ebc4
 80081b4:	3fc99999 	.word	0x3fc99999
 80081b8:	54442d18 	.word	0x54442d18
 80081bc:	3ff921fb 	.word	0x3ff921fb
 80081c0:	440fffff 	.word	0x440fffff
 80081c4:	7ff00000 	.word	0x7ff00000
 80081c8:	3fdbffff 	.word	0x3fdbffff
 80081cc:	3ff00000 	.word	0x3ff00000
 80081d0:	3ff2ffff 	.word	0x3ff2ffff
 80081d4:	40038000 	.word	0x40038000
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	bff00000 	.word	0xbff00000
 80081e0:	0800b058 	.word	0x0800b058
 80081e4:	0800b038 	.word	0x0800b038

080081e8 <fabs>:
 80081e8:	ec51 0b10 	vmov	r0, r1, d0
 80081ec:	ee10 2a10 	vmov	r2, s0
 80081f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081f4:	ec43 2b10 	vmov	d0, r2, r3
 80081f8:	4770      	bx	lr

080081fa <atan2>:
 80081fa:	f000 b82d 	b.w	8008258 <__ieee754_atan2>

080081fe <sqrt>:
 80081fe:	b538      	push	{r3, r4, r5, lr}
 8008200:	ed2d 8b02 	vpush	{d8}
 8008204:	ec55 4b10 	vmov	r4, r5, d0
 8008208:	f000 f8f0 	bl	80083ec <__ieee754_sqrt>
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	eeb0 8a40 	vmov.f32	s16, s0
 8008218:	eef0 8a60 	vmov.f32	s17, s1
 800821c:	f7f8 fcae 	bl	8000b7c <__aeabi_dcmpun>
 8008220:	b990      	cbnz	r0, 8008248 <sqrt+0x4a>
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 fc7f 	bl	8000b2c <__aeabi_dcmplt>
 800822e:	b158      	cbz	r0, 8008248 <sqrt+0x4a>
 8008230:	f000 f98e 	bl	8008550 <__errno>
 8008234:	2321      	movs	r3, #33	; 0x21
 8008236:	6003      	str	r3, [r0, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	f7f8 fb2c 	bl	800089c <__aeabi_ddiv>
 8008244:	ec41 0b18 	vmov	d8, r0, r1
 8008248:	eeb0 0a48 	vmov.f32	s0, s16
 800824c:	eef0 0a68 	vmov.f32	s1, s17
 8008250:	ecbd 8b02 	vpop	{d8}
 8008254:	bd38      	pop	{r3, r4, r5, pc}
	...

08008258 <__ieee754_atan2>:
 8008258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800825c:	ec57 6b11 	vmov	r6, r7, d1
 8008260:	4273      	negs	r3, r6
 8008262:	f8df e184 	ldr.w	lr, [pc, #388]	; 80083e8 <__ieee754_atan2+0x190>
 8008266:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800826a:	4333      	orrs	r3, r6
 800826c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008270:	4573      	cmp	r3, lr
 8008272:	ec51 0b10 	vmov	r0, r1, d0
 8008276:	ee11 8a10 	vmov	r8, s2
 800827a:	d80a      	bhi.n	8008292 <__ieee754_atan2+0x3a>
 800827c:	4244      	negs	r4, r0
 800827e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008282:	4304      	orrs	r4, r0
 8008284:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008288:	4574      	cmp	r4, lr
 800828a:	ee10 9a10 	vmov	r9, s0
 800828e:	468c      	mov	ip, r1
 8008290:	d907      	bls.n	80082a2 <__ieee754_atan2+0x4a>
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	f7f8 f821 	bl	80002dc <__adddf3>
 800829a:	ec41 0b10 	vmov	d0, r0, r1
 800829e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80082a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082aa:	4334      	orrs	r4, r6
 80082ac:	d103      	bne.n	80082b6 <__ieee754_atan2+0x5e>
 80082ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b2:	f7ff bdf9 	b.w	8007ea8 <atan>
 80082b6:	17bc      	asrs	r4, r7, #30
 80082b8:	f004 0402 	and.w	r4, r4, #2
 80082bc:	ea53 0909 	orrs.w	r9, r3, r9
 80082c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80082c4:	d107      	bne.n	80082d6 <__ieee754_atan2+0x7e>
 80082c6:	2c02      	cmp	r4, #2
 80082c8:	d060      	beq.n	800838c <__ieee754_atan2+0x134>
 80082ca:	2c03      	cmp	r4, #3
 80082cc:	d1e5      	bne.n	800829a <__ieee754_atan2+0x42>
 80082ce:	a142      	add	r1, pc, #264	; (adr r1, 80083d8 <__ieee754_atan2+0x180>)
 80082d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d4:	e7e1      	b.n	800829a <__ieee754_atan2+0x42>
 80082d6:	ea52 0808 	orrs.w	r8, r2, r8
 80082da:	d106      	bne.n	80082ea <__ieee754_atan2+0x92>
 80082dc:	f1bc 0f00 	cmp.w	ip, #0
 80082e0:	da5f      	bge.n	80083a2 <__ieee754_atan2+0x14a>
 80082e2:	a13f      	add	r1, pc, #252	; (adr r1, 80083e0 <__ieee754_atan2+0x188>)
 80082e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e8:	e7d7      	b.n	800829a <__ieee754_atan2+0x42>
 80082ea:	4572      	cmp	r2, lr
 80082ec:	d10f      	bne.n	800830e <__ieee754_atan2+0xb6>
 80082ee:	4293      	cmp	r3, r2
 80082f0:	f104 34ff 	add.w	r4, r4, #4294967295
 80082f4:	d107      	bne.n	8008306 <__ieee754_atan2+0xae>
 80082f6:	2c02      	cmp	r4, #2
 80082f8:	d84c      	bhi.n	8008394 <__ieee754_atan2+0x13c>
 80082fa:	4b35      	ldr	r3, [pc, #212]	; (80083d0 <__ieee754_atan2+0x178>)
 80082fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008300:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008304:	e7c9      	b.n	800829a <__ieee754_atan2+0x42>
 8008306:	2c02      	cmp	r4, #2
 8008308:	d848      	bhi.n	800839c <__ieee754_atan2+0x144>
 800830a:	4b32      	ldr	r3, [pc, #200]	; (80083d4 <__ieee754_atan2+0x17c>)
 800830c:	e7f6      	b.n	80082fc <__ieee754_atan2+0xa4>
 800830e:	4573      	cmp	r3, lr
 8008310:	d0e4      	beq.n	80082dc <__ieee754_atan2+0x84>
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008318:	ea4f 5223 	mov.w	r2, r3, asr #20
 800831c:	da1e      	bge.n	800835c <__ieee754_atan2+0x104>
 800831e:	2f00      	cmp	r7, #0
 8008320:	da01      	bge.n	8008326 <__ieee754_atan2+0xce>
 8008322:	323c      	adds	r2, #60	; 0x3c
 8008324:	db1e      	blt.n	8008364 <__ieee754_atan2+0x10c>
 8008326:	4632      	mov	r2, r6
 8008328:	463b      	mov	r3, r7
 800832a:	f7f8 fab7 	bl	800089c <__aeabi_ddiv>
 800832e:	ec41 0b10 	vmov	d0, r0, r1
 8008332:	f7ff ff59 	bl	80081e8 <fabs>
 8008336:	f7ff fdb7 	bl	8007ea8 <atan>
 800833a:	ec51 0b10 	vmov	r0, r1, d0
 800833e:	2c01      	cmp	r4, #1
 8008340:	d013      	beq.n	800836a <__ieee754_atan2+0x112>
 8008342:	2c02      	cmp	r4, #2
 8008344:	d015      	beq.n	8008372 <__ieee754_atan2+0x11a>
 8008346:	2c00      	cmp	r4, #0
 8008348:	d0a7      	beq.n	800829a <__ieee754_atan2+0x42>
 800834a:	a319      	add	r3, pc, #100	; (adr r3, 80083b0 <__ieee754_atan2+0x158>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ffc2 	bl	80002d8 <__aeabi_dsub>
 8008354:	a318      	add	r3, pc, #96	; (adr r3, 80083b8 <__ieee754_atan2+0x160>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	e014      	b.n	8008386 <__ieee754_atan2+0x12e>
 800835c:	a118      	add	r1, pc, #96	; (adr r1, 80083c0 <__ieee754_atan2+0x168>)
 800835e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008362:	e7ec      	b.n	800833e <__ieee754_atan2+0xe6>
 8008364:	2000      	movs	r0, #0
 8008366:	2100      	movs	r1, #0
 8008368:	e7e9      	b.n	800833e <__ieee754_atan2+0xe6>
 800836a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800836e:	4619      	mov	r1, r3
 8008370:	e793      	b.n	800829a <__ieee754_atan2+0x42>
 8008372:	a30f      	add	r3, pc, #60	; (adr r3, 80083b0 <__ieee754_atan2+0x158>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 ffae 	bl	80002d8 <__aeabi_dsub>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	a10d      	add	r1, pc, #52	; (adr r1, 80083b8 <__ieee754_atan2+0x160>)
 8008382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008386:	f7f7 ffa7 	bl	80002d8 <__aeabi_dsub>
 800838a:	e786      	b.n	800829a <__ieee754_atan2+0x42>
 800838c:	a10a      	add	r1, pc, #40	; (adr r1, 80083b8 <__ieee754_atan2+0x160>)
 800838e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008392:	e782      	b.n	800829a <__ieee754_atan2+0x42>
 8008394:	a10c      	add	r1, pc, #48	; (adr r1, 80083c8 <__ieee754_atan2+0x170>)
 8008396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839a:	e77e      	b.n	800829a <__ieee754_atan2+0x42>
 800839c:	2000      	movs	r0, #0
 800839e:	2100      	movs	r1, #0
 80083a0:	e77b      	b.n	800829a <__ieee754_atan2+0x42>
 80083a2:	a107      	add	r1, pc, #28	; (adr r1, 80083c0 <__ieee754_atan2+0x168>)
 80083a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a8:	e777      	b.n	800829a <__ieee754_atan2+0x42>
 80083aa:	bf00      	nop
 80083ac:	f3af 8000 	nop.w
 80083b0:	33145c07 	.word	0x33145c07
 80083b4:	3ca1a626 	.word	0x3ca1a626
 80083b8:	54442d18 	.word	0x54442d18
 80083bc:	400921fb 	.word	0x400921fb
 80083c0:	54442d18 	.word	0x54442d18
 80083c4:	3ff921fb 	.word	0x3ff921fb
 80083c8:	54442d18 	.word	0x54442d18
 80083cc:	3fe921fb 	.word	0x3fe921fb
 80083d0:	0800b078 	.word	0x0800b078
 80083d4:	0800b090 	.word	0x0800b090
 80083d8:	54442d18 	.word	0x54442d18
 80083dc:	c00921fb 	.word	0xc00921fb
 80083e0:	54442d18 	.word	0x54442d18
 80083e4:	bff921fb 	.word	0xbff921fb
 80083e8:	7ff00000 	.word	0x7ff00000

080083ec <__ieee754_sqrt>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	4e55      	ldr	r6, [pc, #340]	; (800854c <__ieee754_sqrt+0x160>)
 80083f6:	43ae      	bics	r6, r5
 80083f8:	ee10 0a10 	vmov	r0, s0
 80083fc:	ee10 3a10 	vmov	r3, s0
 8008400:	462a      	mov	r2, r5
 8008402:	4629      	mov	r1, r5
 8008404:	d110      	bne.n	8008428 <__ieee754_sqrt+0x3c>
 8008406:	ee10 2a10 	vmov	r2, s0
 800840a:	462b      	mov	r3, r5
 800840c:	f7f8 f91c 	bl	8000648 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f7 ff60 	bl	80002dc <__adddf3>
 800841c:	4604      	mov	r4, r0
 800841e:	460d      	mov	r5, r1
 8008420:	ec45 4b10 	vmov	d0, r4, r5
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	2d00      	cmp	r5, #0
 800842a:	dc10      	bgt.n	800844e <__ieee754_sqrt+0x62>
 800842c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008430:	4330      	orrs	r0, r6
 8008432:	d0f5      	beq.n	8008420 <__ieee754_sqrt+0x34>
 8008434:	b15d      	cbz	r5, 800844e <__ieee754_sqrt+0x62>
 8008436:	ee10 2a10 	vmov	r2, s0
 800843a:	462b      	mov	r3, r5
 800843c:	ee10 0a10 	vmov	r0, s0
 8008440:	f7f7 ff4a 	bl	80002d8 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	f7f8 fa28 	bl	800089c <__aeabi_ddiv>
 800844c:	e7e6      	b.n	800841c <__ieee754_sqrt+0x30>
 800844e:	1512      	asrs	r2, r2, #20
 8008450:	d074      	beq.n	800853c <__ieee754_sqrt+0x150>
 8008452:	07d4      	lsls	r4, r2, #31
 8008454:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008458:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800845c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008460:	bf5e      	ittt	pl
 8008462:	0fda      	lsrpl	r2, r3, #31
 8008464:	005b      	lslpl	r3, r3, #1
 8008466:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800846a:	2400      	movs	r4, #0
 800846c:	0fda      	lsrs	r2, r3, #31
 800846e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008472:	107f      	asrs	r7, r7, #1
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	2516      	movs	r5, #22
 8008478:	4620      	mov	r0, r4
 800847a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800847e:	1886      	adds	r6, r0, r2
 8008480:	428e      	cmp	r6, r1
 8008482:	bfde      	ittt	le
 8008484:	1b89      	suble	r1, r1, r6
 8008486:	18b0      	addle	r0, r6, r2
 8008488:	18a4      	addle	r4, r4, r2
 800848a:	0049      	lsls	r1, r1, #1
 800848c:	3d01      	subs	r5, #1
 800848e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008492:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008496:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800849a:	d1f0      	bne.n	800847e <__ieee754_sqrt+0x92>
 800849c:	462a      	mov	r2, r5
 800849e:	f04f 0e20 	mov.w	lr, #32
 80084a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80084a6:	4281      	cmp	r1, r0
 80084a8:	eb06 0c05 	add.w	ip, r6, r5
 80084ac:	dc02      	bgt.n	80084b4 <__ieee754_sqrt+0xc8>
 80084ae:	d113      	bne.n	80084d8 <__ieee754_sqrt+0xec>
 80084b0:	459c      	cmp	ip, r3
 80084b2:	d811      	bhi.n	80084d8 <__ieee754_sqrt+0xec>
 80084b4:	f1bc 0f00 	cmp.w	ip, #0
 80084b8:	eb0c 0506 	add.w	r5, ip, r6
 80084bc:	da43      	bge.n	8008546 <__ieee754_sqrt+0x15a>
 80084be:	2d00      	cmp	r5, #0
 80084c0:	db41      	blt.n	8008546 <__ieee754_sqrt+0x15a>
 80084c2:	f100 0801 	add.w	r8, r0, #1
 80084c6:	1a09      	subs	r1, r1, r0
 80084c8:	459c      	cmp	ip, r3
 80084ca:	bf88      	it	hi
 80084cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80084d0:	eba3 030c 	sub.w	r3, r3, ip
 80084d4:	4432      	add	r2, r6
 80084d6:	4640      	mov	r0, r8
 80084d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084dc:	f1be 0e01 	subs.w	lr, lr, #1
 80084e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80084e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084ec:	d1db      	bne.n	80084a6 <__ieee754_sqrt+0xba>
 80084ee:	430b      	orrs	r3, r1
 80084f0:	d006      	beq.n	8008500 <__ieee754_sqrt+0x114>
 80084f2:	1c50      	adds	r0, r2, #1
 80084f4:	bf13      	iteet	ne
 80084f6:	3201      	addne	r2, #1
 80084f8:	3401      	addeq	r4, #1
 80084fa:	4672      	moveq	r2, lr
 80084fc:	f022 0201 	bicne.w	r2, r2, #1
 8008500:	1063      	asrs	r3, r4, #1
 8008502:	0852      	lsrs	r2, r2, #1
 8008504:	07e1      	lsls	r1, r4, #31
 8008506:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800850a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800850e:	bf48      	it	mi
 8008510:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008514:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008518:	4614      	mov	r4, r2
 800851a:	e781      	b.n	8008420 <__ieee754_sqrt+0x34>
 800851c:	0ad9      	lsrs	r1, r3, #11
 800851e:	3815      	subs	r0, #21
 8008520:	055b      	lsls	r3, r3, #21
 8008522:	2900      	cmp	r1, #0
 8008524:	d0fa      	beq.n	800851c <__ieee754_sqrt+0x130>
 8008526:	02cd      	lsls	r5, r1, #11
 8008528:	d50a      	bpl.n	8008540 <__ieee754_sqrt+0x154>
 800852a:	f1c2 0420 	rsb	r4, r2, #32
 800852e:	fa23 f404 	lsr.w	r4, r3, r4
 8008532:	1e55      	subs	r5, r2, #1
 8008534:	4093      	lsls	r3, r2
 8008536:	4321      	orrs	r1, r4
 8008538:	1b42      	subs	r2, r0, r5
 800853a:	e78a      	b.n	8008452 <__ieee754_sqrt+0x66>
 800853c:	4610      	mov	r0, r2
 800853e:	e7f0      	b.n	8008522 <__ieee754_sqrt+0x136>
 8008540:	0049      	lsls	r1, r1, #1
 8008542:	3201      	adds	r2, #1
 8008544:	e7ef      	b.n	8008526 <__ieee754_sqrt+0x13a>
 8008546:	4680      	mov	r8, r0
 8008548:	e7bd      	b.n	80084c6 <__ieee754_sqrt+0xda>
 800854a:	bf00      	nop
 800854c:	7ff00000 	.word	0x7ff00000

08008550 <__errno>:
 8008550:	4b01      	ldr	r3, [pc, #4]	; (8008558 <__errno+0x8>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000018 	.word	0x20000018

0800855c <__libc_init_array>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	4d0d      	ldr	r5, [pc, #52]	; (8008594 <__libc_init_array+0x38>)
 8008560:	4c0d      	ldr	r4, [pc, #52]	; (8008598 <__libc_init_array+0x3c>)
 8008562:	1b64      	subs	r4, r4, r5
 8008564:	10a4      	asrs	r4, r4, #2
 8008566:	2600      	movs	r6, #0
 8008568:	42a6      	cmp	r6, r4
 800856a:	d109      	bne.n	8008580 <__libc_init_array+0x24>
 800856c:	4d0b      	ldr	r5, [pc, #44]	; (800859c <__libc_init_array+0x40>)
 800856e:	4c0c      	ldr	r4, [pc, #48]	; (80085a0 <__libc_init_array+0x44>)
 8008570:	f002 fd36 	bl	800afe0 <_init>
 8008574:	1b64      	subs	r4, r4, r5
 8008576:	10a4      	asrs	r4, r4, #2
 8008578:	2600      	movs	r6, #0
 800857a:	42a6      	cmp	r6, r4
 800857c:	d105      	bne.n	800858a <__libc_init_array+0x2e>
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	f855 3b04 	ldr.w	r3, [r5], #4
 8008584:	4798      	blx	r3
 8008586:	3601      	adds	r6, #1
 8008588:	e7ee      	b.n	8008568 <__libc_init_array+0xc>
 800858a:	f855 3b04 	ldr.w	r3, [r5], #4
 800858e:	4798      	blx	r3
 8008590:	3601      	adds	r6, #1
 8008592:	e7f2      	b.n	800857a <__libc_init_array+0x1e>
 8008594:	0800b48c 	.word	0x0800b48c
 8008598:	0800b48c 	.word	0x0800b48c
 800859c:	0800b48c 	.word	0x0800b48c
 80085a0:	0800b490 	.word	0x0800b490

080085a4 <memset>:
 80085a4:	4402      	add	r2, r0
 80085a6:	4603      	mov	r3, r0
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d100      	bne.n	80085ae <memset+0xa>
 80085ac:	4770      	bx	lr
 80085ae:	f803 1b01 	strb.w	r1, [r3], #1
 80085b2:	e7f9      	b.n	80085a8 <memset+0x4>

080085b4 <__cvt>:
 80085b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	ec55 4b10 	vmov	r4, r5, d0
 80085bc:	2d00      	cmp	r5, #0
 80085be:	460e      	mov	r6, r1
 80085c0:	4619      	mov	r1, r3
 80085c2:	462b      	mov	r3, r5
 80085c4:	bfbb      	ittet	lt
 80085c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085ca:	461d      	movlt	r5, r3
 80085cc:	2300      	movge	r3, #0
 80085ce:	232d      	movlt	r3, #45	; 0x2d
 80085d0:	700b      	strb	r3, [r1, #0]
 80085d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085d8:	4691      	mov	r9, r2
 80085da:	f023 0820 	bic.w	r8, r3, #32
 80085de:	bfbc      	itt	lt
 80085e0:	4622      	movlt	r2, r4
 80085e2:	4614      	movlt	r4, r2
 80085e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085e8:	d005      	beq.n	80085f6 <__cvt+0x42>
 80085ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ee:	d100      	bne.n	80085f2 <__cvt+0x3e>
 80085f0:	3601      	adds	r6, #1
 80085f2:	2102      	movs	r1, #2
 80085f4:	e000      	b.n	80085f8 <__cvt+0x44>
 80085f6:	2103      	movs	r1, #3
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	ab02      	add	r3, sp, #8
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	ec45 4b10 	vmov	d0, r4, r5
 8008604:	4653      	mov	r3, sl
 8008606:	4632      	mov	r2, r6
 8008608:	f000 fcca 	bl	8008fa0 <_dtoa_r>
 800860c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008610:	4607      	mov	r7, r0
 8008612:	d102      	bne.n	800861a <__cvt+0x66>
 8008614:	f019 0f01 	tst.w	r9, #1
 8008618:	d022      	beq.n	8008660 <__cvt+0xac>
 800861a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800861e:	eb07 0906 	add.w	r9, r7, r6
 8008622:	d110      	bne.n	8008646 <__cvt+0x92>
 8008624:	783b      	ldrb	r3, [r7, #0]
 8008626:	2b30      	cmp	r3, #48	; 0x30
 8008628:	d10a      	bne.n	8008640 <__cvt+0x8c>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	4620      	mov	r0, r4
 8008630:	4629      	mov	r1, r5
 8008632:	f7f8 fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8008636:	b918      	cbnz	r0, 8008640 <__cvt+0x8c>
 8008638:	f1c6 0601 	rsb	r6, r6, #1
 800863c:	f8ca 6000 	str.w	r6, [sl]
 8008640:	f8da 3000 	ldr.w	r3, [sl]
 8008644:	4499      	add	r9, r3
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	4620      	mov	r0, r4
 800864c:	4629      	mov	r1, r5
 800864e:	f7f8 fa63 	bl	8000b18 <__aeabi_dcmpeq>
 8008652:	b108      	cbz	r0, 8008658 <__cvt+0xa4>
 8008654:	f8cd 900c 	str.w	r9, [sp, #12]
 8008658:	2230      	movs	r2, #48	; 0x30
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	454b      	cmp	r3, r9
 800865e:	d307      	bcc.n	8008670 <__cvt+0xbc>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008664:	1bdb      	subs	r3, r3, r7
 8008666:	4638      	mov	r0, r7
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	b004      	add	sp, #16
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	9103      	str	r1, [sp, #12]
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e7f0      	b.n	800865a <__cvt+0xa6>

08008678 <__exponent>:
 8008678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867a:	4603      	mov	r3, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	bfb8      	it	lt
 8008680:	4249      	neglt	r1, r1
 8008682:	f803 2b02 	strb.w	r2, [r3], #2
 8008686:	bfb4      	ite	lt
 8008688:	222d      	movlt	r2, #45	; 0x2d
 800868a:	222b      	movge	r2, #43	; 0x2b
 800868c:	2909      	cmp	r1, #9
 800868e:	7042      	strb	r2, [r0, #1]
 8008690:	dd2a      	ble.n	80086e8 <__exponent+0x70>
 8008692:	f10d 0407 	add.w	r4, sp, #7
 8008696:	46a4      	mov	ip, r4
 8008698:	270a      	movs	r7, #10
 800869a:	46a6      	mov	lr, r4
 800869c:	460a      	mov	r2, r1
 800869e:	fb91 f6f7 	sdiv	r6, r1, r7
 80086a2:	fb07 1516 	mls	r5, r7, r6, r1
 80086a6:	3530      	adds	r5, #48	; 0x30
 80086a8:	2a63      	cmp	r2, #99	; 0x63
 80086aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80086ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086b2:	4631      	mov	r1, r6
 80086b4:	dcf1      	bgt.n	800869a <__exponent+0x22>
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	f1ae 0502 	sub.w	r5, lr, #2
 80086bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086c0:	1c44      	adds	r4, r0, #1
 80086c2:	4629      	mov	r1, r5
 80086c4:	4561      	cmp	r1, ip
 80086c6:	d30a      	bcc.n	80086de <__exponent+0x66>
 80086c8:	f10d 0209 	add.w	r2, sp, #9
 80086cc:	eba2 020e 	sub.w	r2, r2, lr
 80086d0:	4565      	cmp	r5, ip
 80086d2:	bf88      	it	hi
 80086d4:	2200      	movhi	r2, #0
 80086d6:	4413      	add	r3, r2
 80086d8:	1a18      	subs	r0, r3, r0
 80086da:	b003      	add	sp, #12
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086e6:	e7ed      	b.n	80086c4 <__exponent+0x4c>
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	3130      	adds	r1, #48	; 0x30
 80086ec:	7083      	strb	r3, [r0, #2]
 80086ee:	70c1      	strb	r1, [r0, #3]
 80086f0:	1d03      	adds	r3, r0, #4
 80086f2:	e7f1      	b.n	80086d8 <__exponent+0x60>

080086f4 <_printf_float>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	ed2d 8b02 	vpush	{d8}
 80086fc:	b08d      	sub	sp, #52	; 0x34
 80086fe:	460c      	mov	r4, r1
 8008700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008704:	4616      	mov	r6, r2
 8008706:	461f      	mov	r7, r3
 8008708:	4605      	mov	r5, r0
 800870a:	f001 fa37 	bl	8009b7c <_localeconv_r>
 800870e:	f8d0 a000 	ldr.w	sl, [r0]
 8008712:	4650      	mov	r0, sl
 8008714:	f7f7 fd84 	bl	8000220 <strlen>
 8008718:	2300      	movs	r3, #0
 800871a:	930a      	str	r3, [sp, #40]	; 0x28
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8d8 3000 	ldr.w	r3, [r8]
 8008724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008728:	3307      	adds	r3, #7
 800872a:	f023 0307 	bic.w	r3, r3, #7
 800872e:	f103 0208 	add.w	r2, r3, #8
 8008732:	f8c8 2000 	str.w	r2, [r8]
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800873e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	f8cd 8018 	str.w	r8, [sp, #24]
 800874c:	ee08 0a10 	vmov	s16, r0
 8008750:	4b9f      	ldr	r3, [pc, #636]	; (80089d0 <_printf_float+0x2dc>)
 8008752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	f7f8 fa0f 	bl	8000b7c <__aeabi_dcmpun>
 800875e:	bb88      	cbnz	r0, 80087c4 <_printf_float+0xd0>
 8008760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008764:	4b9a      	ldr	r3, [pc, #616]	; (80089d0 <_printf_float+0x2dc>)
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	f7f8 f9e9 	bl	8000b40 <__aeabi_dcmple>
 800876e:	bb48      	cbnz	r0, 80087c4 <_printf_float+0xd0>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f9d8 	bl	8000b2c <__aeabi_dcmplt>
 800877c:	b110      	cbz	r0, 8008784 <_printf_float+0x90>
 800877e:	232d      	movs	r3, #45	; 0x2d
 8008780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008784:	4b93      	ldr	r3, [pc, #588]	; (80089d4 <_printf_float+0x2e0>)
 8008786:	4894      	ldr	r0, [pc, #592]	; (80089d8 <_printf_float+0x2e4>)
 8008788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800878c:	bf94      	ite	ls
 800878e:	4698      	movls	r8, r3
 8008790:	4680      	movhi	r8, r0
 8008792:	2303      	movs	r3, #3
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	f023 0204 	bic.w	r2, r3, #4
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	f04f 0900 	mov.w	r9, #0
 80087a2:	9700      	str	r7, [sp, #0]
 80087a4:	4633      	mov	r3, r6
 80087a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f9d8 	bl	8008b60 <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f040 8090 	bne.w	80088d6 <_printf_float+0x1e2>
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	b00d      	add	sp, #52	; 0x34
 80087bc:	ecbd 8b02 	vpop	{d8}
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	4642      	mov	r2, r8
 80087c6:	464b      	mov	r3, r9
 80087c8:	4640      	mov	r0, r8
 80087ca:	4649      	mov	r1, r9
 80087cc:	f7f8 f9d6 	bl	8000b7c <__aeabi_dcmpun>
 80087d0:	b140      	cbz	r0, 80087e4 <_printf_float+0xf0>
 80087d2:	464b      	mov	r3, r9
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfbc      	itt	lt
 80087d8:	232d      	movlt	r3, #45	; 0x2d
 80087da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087de:	487f      	ldr	r0, [pc, #508]	; (80089dc <_printf_float+0x2e8>)
 80087e0:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <_printf_float+0x2ec>)
 80087e2:	e7d1      	b.n	8008788 <_printf_float+0x94>
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087ea:	9206      	str	r2, [sp, #24]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	d13f      	bne.n	8008870 <_printf_float+0x17c>
 80087f0:	2306      	movs	r3, #6
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	9b05      	ldr	r3, [sp, #20]
 80087f6:	6861      	ldr	r1, [r4, #4]
 80087f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	ab0a      	add	r3, sp, #40	; 0x28
 8008802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008806:	ab09      	add	r3, sp, #36	; 0x24
 8008808:	ec49 8b10 	vmov	d0, r8, r9
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fecd 	bl	80085b4 <__cvt>
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	2b47      	cmp	r3, #71	; 0x47
 8008820:	4680      	mov	r8, r0
 8008822:	d108      	bne.n	8008836 <_printf_float+0x142>
 8008824:	1cc8      	adds	r0, r1, #3
 8008826:	db02      	blt.n	800882e <_printf_float+0x13a>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	4299      	cmp	r1, r3
 800882c:	dd41      	ble.n	80088b2 <_printf_float+0x1be>
 800882e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008832:	fa5f fb8b 	uxtb.w	fp, fp
 8008836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800883a:	d820      	bhi.n	800887e <_printf_float+0x18a>
 800883c:	3901      	subs	r1, #1
 800883e:	465a      	mov	r2, fp
 8008840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008844:	9109      	str	r1, [sp, #36]	; 0x24
 8008846:	f7ff ff17 	bl	8008678 <__exponent>
 800884a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800884c:	1813      	adds	r3, r2, r0
 800884e:	2a01      	cmp	r2, #1
 8008850:	4681      	mov	r9, r0
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	dc02      	bgt.n	800885c <_printf_float+0x168>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d501      	bpl.n	8008860 <_printf_float+0x16c>
 800885c:	3301      	adds	r3, #1
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008864:	2b00      	cmp	r3, #0
 8008866:	d09c      	beq.n	80087a2 <_printf_float+0xae>
 8008868:	232d      	movs	r3, #45	; 0x2d
 800886a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886e:	e798      	b.n	80087a2 <_printf_float+0xae>
 8008870:	9a06      	ldr	r2, [sp, #24]
 8008872:	2a47      	cmp	r2, #71	; 0x47
 8008874:	d1be      	bne.n	80087f4 <_printf_float+0x100>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1bc      	bne.n	80087f4 <_printf_float+0x100>
 800887a:	2301      	movs	r3, #1
 800887c:	e7b9      	b.n	80087f2 <_printf_float+0xfe>
 800887e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008882:	d118      	bne.n	80088b6 <_printf_float+0x1c2>
 8008884:	2900      	cmp	r1, #0
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	dd0b      	ble.n	80088a2 <_printf_float+0x1ae>
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	b913      	cbnz	r3, 8008894 <_printf_float+0x1a0>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d502      	bpl.n	800889a <_printf_float+0x1a6>
 8008894:	3301      	adds	r3, #1
 8008896:	440b      	add	r3, r1
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	65a1      	str	r1, [r4, #88]	; 0x58
 800889c:	f04f 0900 	mov.w	r9, #0
 80088a0:	e7de      	b.n	8008860 <_printf_float+0x16c>
 80088a2:	b913      	cbnz	r3, 80088aa <_printf_float+0x1b6>
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	07d2      	lsls	r2, r2, #31
 80088a8:	d501      	bpl.n	80088ae <_printf_float+0x1ba>
 80088aa:	3302      	adds	r3, #2
 80088ac:	e7f4      	b.n	8008898 <_printf_float+0x1a4>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e7f2      	b.n	8008898 <_printf_float+0x1a4>
 80088b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	4299      	cmp	r1, r3
 80088ba:	db05      	blt.n	80088c8 <_printf_float+0x1d4>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6121      	str	r1, [r4, #16]
 80088c0:	07d8      	lsls	r0, r3, #31
 80088c2:	d5ea      	bpl.n	800889a <_printf_float+0x1a6>
 80088c4:	1c4b      	adds	r3, r1, #1
 80088c6:	e7e7      	b.n	8008898 <_printf_float+0x1a4>
 80088c8:	2900      	cmp	r1, #0
 80088ca:	bfd4      	ite	le
 80088cc:	f1c1 0202 	rsble	r2, r1, #2
 80088d0:	2201      	movgt	r2, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	e7e0      	b.n	8008898 <_printf_float+0x1a4>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	055a      	lsls	r2, r3, #21
 80088da:	d407      	bmi.n	80088ec <_printf_float+0x1f8>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	4642      	mov	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d12c      	bne.n	8008944 <_printf_float+0x250>
 80088ea:	e764      	b.n	80087b6 <_printf_float+0xc2>
 80088ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088f0:	f240 80e0 	bls.w	8008ab4 <_printf_float+0x3c0>
 80088f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	f7f8 f90c 	bl	8000b18 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d034      	beq.n	800896e <_printf_float+0x27a>
 8008904:	4a37      	ldr	r2, [pc, #220]	; (80089e4 <_printf_float+0x2f0>)
 8008906:	2301      	movs	r3, #1
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f af51 	beq.w	80087b6 <_printf_float+0xc2>
 8008914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008918:	429a      	cmp	r2, r3
 800891a:	db02      	blt.n	8008922 <_printf_float+0x22e>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	07d8      	lsls	r0, r3, #31
 8008920:	d510      	bpl.n	8008944 <_printf_float+0x250>
 8008922:	ee18 3a10 	vmov	r3, s16
 8008926:	4652      	mov	r2, sl
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af41 	beq.w	80087b6 <_printf_float+0xc2>
 8008934:	f04f 0800 	mov.w	r8, #0
 8008938:	f104 091a 	add.w	r9, r4, #26
 800893c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893e:	3b01      	subs	r3, #1
 8008940:	4543      	cmp	r3, r8
 8008942:	dc09      	bgt.n	8008958 <_printf_float+0x264>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	f100 8105 	bmi.w	8008b56 <_printf_float+0x462>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e730      	b.n	80087ba <_printf_float+0xc6>
 8008958:	2301      	movs	r3, #1
 800895a:	464a      	mov	r2, r9
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f af27 	beq.w	80087b6 <_printf_float+0xc2>
 8008968:	f108 0801 	add.w	r8, r8, #1
 800896c:	e7e6      	b.n	800893c <_printf_float+0x248>
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc39      	bgt.n	80089e8 <_printf_float+0x2f4>
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <_printf_float+0x2f0>)
 8008976:	2301      	movs	r3, #1
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af19 	beq.w	80087b6 <_printf_float+0xc2>
 8008984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008988:	4313      	orrs	r3, r2
 800898a:	d102      	bne.n	8008992 <_printf_float+0x29e>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	d5d8      	bpl.n	8008944 <_printf_float+0x250>
 8008992:	ee18 3a10 	vmov	r3, s16
 8008996:	4652      	mov	r2, sl
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af09 	beq.w	80087b6 <_printf_float+0xc2>
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	f104 0a1a 	add.w	sl, r4, #26
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	425b      	negs	r3, r3
 80089b0:	454b      	cmp	r3, r9
 80089b2:	dc01      	bgt.n	80089b8 <_printf_float+0x2c4>
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	e792      	b.n	80088de <_printf_float+0x1ea>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4652      	mov	r2, sl
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f aef7 	beq.w	80087b6 <_printf_float+0xc2>
 80089c8:	f109 0901 	add.w	r9, r9, #1
 80089cc:	e7ee      	b.n	80089ac <_printf_float+0x2b8>
 80089ce:	bf00      	nop
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	0800b0ac 	.word	0x0800b0ac
 80089d8:	0800b0b0 	.word	0x0800b0b0
 80089dc:	0800b0b8 	.word	0x0800b0b8
 80089e0:	0800b0b4 	.word	0x0800b0b4
 80089e4:	0800b0bc 	.word	0x0800b0bc
 80089e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ec:	429a      	cmp	r2, r3
 80089ee:	bfa8      	it	ge
 80089f0:	461a      	movge	r2, r3
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	4691      	mov	r9, r2
 80089f6:	dc37      	bgt.n	8008a68 <_printf_float+0x374>
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a00:	f104 021a 	add.w	r2, r4, #26
 8008a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	eba3 0309 	sub.w	r3, r3, r9
 8008a0c:	455b      	cmp	r3, fp
 8008a0e:	dc33      	bgt.n	8008a78 <_printf_float+0x384>
 8008a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a14:	429a      	cmp	r2, r3
 8008a16:	db3b      	blt.n	8008a90 <_printf_float+0x39c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d438      	bmi.n	8008a90 <_printf_float+0x39c>
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a20:	9a05      	ldr	r2, [sp, #20]
 8008a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a24:	1a9a      	subs	r2, r3, r2
 8008a26:	eba3 0901 	sub.w	r9, r3, r1
 8008a2a:	4591      	cmp	r9, r2
 8008a2c:	bfa8      	it	ge
 8008a2e:	4691      	movge	r9, r2
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	dc35      	bgt.n	8008aa2 <_printf_float+0x3ae>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a3e:	f104 0a1a 	add.w	sl, r4, #26
 8008a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	eba3 0309 	sub.w	r3, r3, r9
 8008a4c:	4543      	cmp	r3, r8
 8008a4e:	f77f af79 	ble.w	8008944 <_printf_float+0x250>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f aeaa 	beq.w	80087b6 <_printf_float+0xc2>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	e7ec      	b.n	8008a42 <_printf_float+0x34e>
 8008a68:	4613      	mov	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	d1c0      	bne.n	80089f8 <_printf_float+0x304>
 8008a76:	e69e      	b.n	80087b6 <_printf_float+0xc2>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f ae97 	beq.w	80087b6 <_printf_float+0xc2>
 8008a88:	9a05      	ldr	r2, [sp, #20]
 8008a8a:	f10b 0b01 	add.w	fp, fp, #1
 8008a8e:	e7b9      	b.n	8008a04 <_printf_float+0x310>
 8008a90:	ee18 3a10 	vmov	r3, s16
 8008a94:	4652      	mov	r2, sl
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d1be      	bne.n	8008a1e <_printf_float+0x32a>
 8008aa0:	e689      	b.n	80087b6 <_printf_float+0xc2>
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	4442      	add	r2, r8
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d1c1      	bne.n	8008a36 <_printf_float+0x342>
 8008ab2:	e680      	b.n	80087b6 <_printf_float+0xc2>
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	dc01      	bgt.n	8008abe <_printf_float+0x3ca>
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d538      	bpl.n	8008b30 <_printf_float+0x43c>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f43f ae74 	beq.w	80087b6 <_printf_float+0xc2>
 8008ace:	ee18 3a10 	vmov	r3, s16
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f ae6b 	beq.w	80087b6 <_printf_float+0xc2>
 8008ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f7f8 f816 	bl	8000b18 <__aeabi_dcmpeq>
 8008aec:	b9d8      	cbnz	r0, 8008b26 <_printf_float+0x432>
 8008aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af0:	f108 0201 	add.w	r2, r8, #1
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	d10e      	bne.n	8008b1e <_printf_float+0x42a>
 8008b00:	e659      	b.n	80087b6 <_printf_float+0xc2>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4652      	mov	r2, sl
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae52 	beq.w	80087b6 <_printf_float+0xc2>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	4543      	cmp	r3, r8
 8008b1c:	dcf1      	bgt.n	8008b02 <_printf_float+0x40e>
 8008b1e:	464b      	mov	r3, r9
 8008b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b24:	e6dc      	b.n	80088e0 <_printf_float+0x1ec>
 8008b26:	f04f 0800 	mov.w	r8, #0
 8008b2a:	f104 0a1a 	add.w	sl, r4, #26
 8008b2e:	e7f2      	b.n	8008b16 <_printf_float+0x422>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4642      	mov	r2, r8
 8008b34:	e7df      	b.n	8008af6 <_printf_float+0x402>
 8008b36:	2301      	movs	r3, #1
 8008b38:	464a      	mov	r2, r9
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f ae38 	beq.w	80087b6 <_printf_float+0xc2>
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	4543      	cmp	r3, r8
 8008b52:	dcf0      	bgt.n	8008b36 <_printf_float+0x442>
 8008b54:	e6fa      	b.n	800894c <_printf_float+0x258>
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	f104 0919 	add.w	r9, r4, #25
 8008b5e:	e7f4      	b.n	8008b4a <_printf_float+0x456>

08008b60 <_printf_common>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	4616      	mov	r6, r2
 8008b66:	4699      	mov	r9, r3
 8008b68:	688a      	ldr	r2, [r1, #8]
 8008b6a:	690b      	ldr	r3, [r1, #16]
 8008b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bfb8      	it	lt
 8008b74:	4613      	movlt	r3, r2
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b10a      	cbz	r2, 8008b86 <_printf_common+0x26>
 8008b82:	3301      	adds	r3, #1
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	0699      	lsls	r1, r3, #26
 8008b8a:	bf42      	ittt	mi
 8008b8c:	6833      	ldrmi	r3, [r6, #0]
 8008b8e:	3302      	addmi	r3, #2
 8008b90:	6033      	strmi	r3, [r6, #0]
 8008b92:	6825      	ldr	r5, [r4, #0]
 8008b94:	f015 0506 	ands.w	r5, r5, #6
 8008b98:	d106      	bne.n	8008ba8 <_printf_common+0x48>
 8008b9a:	f104 0a19 	add.w	sl, r4, #25
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	6832      	ldr	r2, [r6, #0]
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dc26      	bgt.n	8008bf6 <_printf_common+0x96>
 8008ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bac:	1e13      	subs	r3, r2, #0
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	bf18      	it	ne
 8008bb2:	2301      	movne	r3, #1
 8008bb4:	0692      	lsls	r2, r2, #26
 8008bb6:	d42b      	bmi.n	8008c10 <_printf_common+0xb0>
 8008bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	47c0      	blx	r8
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d01e      	beq.n	8008c04 <_printf_common+0xa4>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	68e5      	ldr	r5, [r4, #12]
 8008bca:	6832      	ldr	r2, [r6, #0]
 8008bcc:	f003 0306 	and.w	r3, r3, #6
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	bf08      	it	eq
 8008bd4:	1aad      	subeq	r5, r5, r2
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	6922      	ldr	r2, [r4, #16]
 8008bda:	bf0c      	ite	eq
 8008bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be0:	2500      	movne	r5, #0
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bfc4      	itt	gt
 8008be6:	1a9b      	subgt	r3, r3, r2
 8008be8:	18ed      	addgt	r5, r5, r3
 8008bea:	2600      	movs	r6, #0
 8008bec:	341a      	adds	r4, #26
 8008bee:	42b5      	cmp	r5, r6
 8008bf0:	d11a      	bne.n	8008c28 <_printf_common+0xc8>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e008      	b.n	8008c08 <_printf_common+0xa8>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	47c0      	blx	r8
 8008c00:	3001      	adds	r0, #1
 8008c02:	d103      	bne.n	8008c0c <_printf_common+0xac>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	e7c6      	b.n	8008b9e <_printf_common+0x3e>
 8008c10:	18e1      	adds	r1, r4, r3
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	2030      	movs	r0, #48	; 0x30
 8008c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c1a:	4422      	add	r2, r4
 8008c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c24:	3302      	adds	r3, #2
 8008c26:	e7c7      	b.n	8008bb8 <_printf_common+0x58>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4638      	mov	r0, r7
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d0e6      	beq.n	8008c04 <_printf_common+0xa4>
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7d9      	b.n	8008bee <_printf_common+0x8e>
	...

08008c3c <_printf_i>:
 8008c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	7e0f      	ldrb	r7, [r1, #24]
 8008c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c44:	2f78      	cmp	r7, #120	; 0x78
 8008c46:	4691      	mov	r9, r2
 8008c48:	4680      	mov	r8, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	469a      	mov	sl, r3
 8008c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c52:	d807      	bhi.n	8008c64 <_printf_i+0x28>
 8008c54:	2f62      	cmp	r7, #98	; 0x62
 8008c56:	d80a      	bhi.n	8008c6e <_printf_i+0x32>
 8008c58:	2f00      	cmp	r7, #0
 8008c5a:	f000 80d8 	beq.w	8008e0e <_printf_i+0x1d2>
 8008c5e:	2f58      	cmp	r7, #88	; 0x58
 8008c60:	f000 80a3 	beq.w	8008daa <_printf_i+0x16e>
 8008c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c6c:	e03a      	b.n	8008ce4 <_printf_i+0xa8>
 8008c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c72:	2b15      	cmp	r3, #21
 8008c74:	d8f6      	bhi.n	8008c64 <_printf_i+0x28>
 8008c76:	a101      	add	r1, pc, #4	; (adr r1, 8008c7c <_printf_i+0x40>)
 8008c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c7c:	08008cd5 	.word	0x08008cd5
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008c65 	.word	0x08008c65
 8008c88:	08008c65 	.word	0x08008c65
 8008c8c:	08008c65 	.word	0x08008c65
 8008c90:	08008c65 	.word	0x08008c65
 8008c94:	08008ce9 	.word	0x08008ce9
 8008c98:	08008c65 	.word	0x08008c65
 8008c9c:	08008c65 	.word	0x08008c65
 8008ca0:	08008c65 	.word	0x08008c65
 8008ca4:	08008c65 	.word	0x08008c65
 8008ca8:	08008df5 	.word	0x08008df5
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008dd7 	.word	0x08008dd7
 8008cb4:	08008c65 	.word	0x08008c65
 8008cb8:	08008c65 	.word	0x08008c65
 8008cbc:	08008e17 	.word	0x08008e17
 8008cc0:	08008c65 	.word	0x08008c65
 8008cc4:	08008d19 	.word	0x08008d19
 8008cc8:	08008c65 	.word	0x08008c65
 8008ccc:	08008c65 	.word	0x08008c65
 8008cd0:	08008ddf 	.word	0x08008ddf
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	1d1a      	adds	r2, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	602a      	str	r2, [r5, #0]
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0a3      	b.n	8008e30 <_printf_i+0x1f4>
 8008ce8:	6820      	ldr	r0, [r4, #0]
 8008cea:	6829      	ldr	r1, [r5, #0]
 8008cec:	0606      	lsls	r6, r0, #24
 8008cee:	f101 0304 	add.w	r3, r1, #4
 8008cf2:	d50a      	bpl.n	8008d0a <_printf_i+0xce>
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	da03      	bge.n	8008d04 <_printf_i+0xc8>
 8008cfc:	232d      	movs	r3, #45	; 0x2d
 8008cfe:	4276      	negs	r6, r6
 8008d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d04:	485e      	ldr	r0, [pc, #376]	; (8008e80 <_printf_i+0x244>)
 8008d06:	230a      	movs	r3, #10
 8008d08:	e019      	b.n	8008d3e <_printf_i+0x102>
 8008d0a:	680e      	ldr	r6, [r1, #0]
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d12:	bf18      	it	ne
 8008d14:	b236      	sxthne	r6, r6
 8008d16:	e7ef      	b.n	8008cf8 <_printf_i+0xbc>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6820      	ldr	r0, [r4, #0]
 8008d1c:	1d19      	adds	r1, r3, #4
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	0601      	lsls	r1, r0, #24
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0xec>
 8008d24:	681e      	ldr	r6, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0xf2>
 8008d28:	0646      	lsls	r6, r0, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0xe8>
 8008d2c:	881e      	ldrh	r6, [r3, #0]
 8008d2e:	4854      	ldr	r0, [pc, #336]	; (8008e80 <_printf_i+0x244>)
 8008d30:	2f6f      	cmp	r7, #111	; 0x6f
 8008d32:	bf0c      	ite	eq
 8008d34:	2308      	moveq	r3, #8
 8008d36:	230a      	movne	r3, #10
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d3e:	6865      	ldr	r5, [r4, #4]
 8008d40:	60a5      	str	r5, [r4, #8]
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	bfa2      	ittt	ge
 8008d46:	6821      	ldrge	r1, [r4, #0]
 8008d48:	f021 0104 	bicge.w	r1, r1, #4
 8008d4c:	6021      	strge	r1, [r4, #0]
 8008d4e:	b90e      	cbnz	r6, 8008d54 <_printf_i+0x118>
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	d04d      	beq.n	8008df0 <_printf_i+0x1b4>
 8008d54:	4615      	mov	r5, r2
 8008d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d5e:	5dc7      	ldrb	r7, [r0, r7]
 8008d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d64:	4637      	mov	r7, r6
 8008d66:	42bb      	cmp	r3, r7
 8008d68:	460e      	mov	r6, r1
 8008d6a:	d9f4      	bls.n	8008d56 <_printf_i+0x11a>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d10b      	bne.n	8008d88 <_printf_i+0x14c>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	07de      	lsls	r6, r3, #31
 8008d74:	d508      	bpl.n	8008d88 <_printf_i+0x14c>
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	6861      	ldr	r1, [r4, #4]
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	bfde      	ittt	le
 8008d7e:	2330      	movle	r3, #48	; 0x30
 8008d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d88:	1b52      	subs	r2, r2, r5
 8008d8a:	6122      	str	r2, [r4, #16]
 8008d8c:	f8cd a000 	str.w	sl, [sp]
 8008d90:	464b      	mov	r3, r9
 8008d92:	aa03      	add	r2, sp, #12
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff fee2 	bl	8008b60 <_printf_common>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d14c      	bne.n	8008e3a <_printf_i+0x1fe>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	b004      	add	sp, #16
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	4835      	ldr	r0, [pc, #212]	; (8008e80 <_printf_i+0x244>)
 8008dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008db0:	6829      	ldr	r1, [r5, #0]
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008db8:	6029      	str	r1, [r5, #0]
 8008dba:	061d      	lsls	r5, r3, #24
 8008dbc:	d514      	bpl.n	8008de8 <_printf_i+0x1ac>
 8008dbe:	07df      	lsls	r7, r3, #31
 8008dc0:	bf44      	itt	mi
 8008dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8008dc6:	6023      	strmi	r3, [r4, #0]
 8008dc8:	b91e      	cbnz	r6, 8008dd2 <_printf_i+0x196>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	f023 0320 	bic.w	r3, r3, #32
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	e7b0      	b.n	8008d38 <_printf_i+0xfc>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	f043 0320 	orr.w	r3, r3, #32
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	2378      	movs	r3, #120	; 0x78
 8008de0:	4828      	ldr	r0, [pc, #160]	; (8008e84 <_printf_i+0x248>)
 8008de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008de6:	e7e3      	b.n	8008db0 <_printf_i+0x174>
 8008de8:	0659      	lsls	r1, r3, #25
 8008dea:	bf48      	it	mi
 8008dec:	b2b6      	uxthmi	r6, r6
 8008dee:	e7e6      	b.n	8008dbe <_printf_i+0x182>
 8008df0:	4615      	mov	r5, r2
 8008df2:	e7bb      	b.n	8008d6c <_printf_i+0x130>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	6826      	ldr	r6, [r4, #0]
 8008df8:	6961      	ldr	r1, [r4, #20]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	6028      	str	r0, [r5, #0]
 8008dfe:	0635      	lsls	r5, r6, #24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0x1cc>
 8008e04:	6019      	str	r1, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0x1d2>
 8008e08:	0670      	lsls	r0, r6, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0x1c8>
 8008e0c:	8019      	strh	r1, [r3, #0]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	4615      	mov	r5, r2
 8008e14:	e7ba      	b.n	8008d8c <_printf_i+0x150>
 8008e16:	682b      	ldr	r3, [r5, #0]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	681d      	ldr	r5, [r3, #0]
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7f7 fa04 	bl	8000230 <memchr>
 8008e28:	b108      	cbz	r0, 8008e2e <_printf_i+0x1f2>
 8008e2a:	1b40      	subs	r0, r0, r5
 8008e2c:	6060      	str	r0, [r4, #4]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	2300      	movs	r3, #0
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e38:	e7a8      	b.n	8008d8c <_printf_i+0x150>
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0ab      	beq.n	8008da0 <_printf_i+0x164>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	079b      	lsls	r3, r3, #30
 8008e4c:	d413      	bmi.n	8008e76 <_printf_i+0x23a>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	4298      	cmp	r0, r3
 8008e54:	bfb8      	it	lt
 8008e56:	4618      	movlt	r0, r3
 8008e58:	e7a4      	b.n	8008da4 <_printf_i+0x168>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d09b      	beq.n	8008da0 <_printf_i+0x164>
 8008e68:	3501      	adds	r5, #1
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	9903      	ldr	r1, [sp, #12]
 8008e6e:	1a5b      	subs	r3, r3, r1
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dcf2      	bgt.n	8008e5a <_printf_i+0x21e>
 8008e74:	e7eb      	b.n	8008e4e <_printf_i+0x212>
 8008e76:	2500      	movs	r5, #0
 8008e78:	f104 0619 	add.w	r6, r4, #25
 8008e7c:	e7f5      	b.n	8008e6a <_printf_i+0x22e>
 8008e7e:	bf00      	nop
 8008e80:	0800b0be 	.word	0x0800b0be
 8008e84:	0800b0cf 	.word	0x0800b0cf

08008e88 <quorem>:
 8008e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	6903      	ldr	r3, [r0, #16]
 8008e8e:	690c      	ldr	r4, [r1, #16]
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	4607      	mov	r7, r0
 8008e94:	f2c0 8081 	blt.w	8008f9a <quorem+0x112>
 8008e98:	3c01      	subs	r4, #1
 8008e9a:	f101 0814 	add.w	r8, r1, #20
 8008e9e:	f100 0514 	add.w	r5, r0, #20
 8008ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ec0:	d331      	bcc.n	8008f26 <quorem+0x9e>
 8008ec2:	f04f 0e00 	mov.w	lr, #0
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	46ac      	mov	ip, r5
 8008eca:	46f2      	mov	sl, lr
 8008ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ed0:	b293      	uxth	r3, r2
 8008ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	ebaa 0303 	sub.w	r3, sl, r3
 8008ee0:	f8dc a000 	ldr.w	sl, [ip]
 8008ee4:	0c12      	lsrs	r2, r2, #16
 8008ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8008eea:	fb06 e202 	mla	r2, r6, r2, lr
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f04:	4581      	cmp	r9, r0
 8008f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f12:	d2db      	bcs.n	8008ecc <quorem+0x44>
 8008f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f18:	b92b      	cbnz	r3, 8008f26 <quorem+0x9e>
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	3b04      	subs	r3, #4
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	d32e      	bcc.n	8008f82 <quorem+0xfa>
 8008f24:	613c      	str	r4, [r7, #16]
 8008f26:	4638      	mov	r0, r7
 8008f28:	f001 f8c4 	bl	800a0b4 <__mcmp>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	db24      	blt.n	8008f7a <quorem+0xf2>
 8008f30:	3601      	adds	r6, #1
 8008f32:	4628      	mov	r0, r5
 8008f34:	f04f 0c00 	mov.w	ip, #0
 8008f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f40:	b293      	uxth	r3, r2
 8008f42:	ebac 0303 	sub.w	r3, ip, r3
 8008f46:	0c12      	lsrs	r2, r2, #16
 8008f48:	fa13 f38e 	uxtah	r3, r3, lr
 8008f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f5a:	45c1      	cmp	r9, r8
 8008f5c:	f840 3b04 	str.w	r3, [r0], #4
 8008f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f64:	d2e8      	bcs.n	8008f38 <quorem+0xb0>
 8008f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f6e:	b922      	cbnz	r2, 8008f7a <quorem+0xf2>
 8008f70:	3b04      	subs	r3, #4
 8008f72:	429d      	cmp	r5, r3
 8008f74:	461a      	mov	r2, r3
 8008f76:	d30a      	bcc.n	8008f8e <quorem+0x106>
 8008f78:	613c      	str	r4, [r7, #16]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	b003      	add	sp, #12
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	3b04      	subs	r3, #4
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	d1cc      	bne.n	8008f24 <quorem+0x9c>
 8008f8a:	3c01      	subs	r4, #1
 8008f8c:	e7c7      	b.n	8008f1e <quorem+0x96>
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d1f0      	bne.n	8008f78 <quorem+0xf0>
 8008f96:	3c01      	subs	r4, #1
 8008f98:	e7eb      	b.n	8008f72 <quorem+0xea>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7ee      	b.n	8008f7c <quorem+0xf4>
	...

08008fa0 <_dtoa_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	ed2d 8b04 	vpush	{d8-d9}
 8008fa8:	ec57 6b10 	vmov	r6, r7, d0
 8008fac:	b093      	sub	sp, #76	; 0x4c
 8008fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fb4:	9106      	str	r1, [sp, #24]
 8008fb6:	ee10 aa10 	vmov	sl, s0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008fc0:	46bb      	mov	fp, r7
 8008fc2:	b975      	cbnz	r5, 8008fe2 <_dtoa_r+0x42>
 8008fc4:	2010      	movs	r0, #16
 8008fc6:	f000 fddd 	bl	8009b84 <malloc>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8008fce:	b920      	cbnz	r0, 8008fda <_dtoa_r+0x3a>
 8008fd0:	4ba7      	ldr	r3, [pc, #668]	; (8009270 <_dtoa_r+0x2d0>)
 8008fd2:	21ea      	movs	r1, #234	; 0xea
 8008fd4:	48a7      	ldr	r0, [pc, #668]	; (8009274 <_dtoa_r+0x2d4>)
 8008fd6:	f001 fa75 	bl	800a4c4 <__assert_func>
 8008fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fde:	6005      	str	r5, [r0, #0]
 8008fe0:	60c5      	str	r5, [r0, #12]
 8008fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe4:	6819      	ldr	r1, [r3, #0]
 8008fe6:	b151      	cbz	r1, 8008ffe <_dtoa_r+0x5e>
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	604a      	str	r2, [r1, #4]
 8008fec:	2301      	movs	r3, #1
 8008fee:	4093      	lsls	r3, r2
 8008ff0:	608b      	str	r3, [r1, #8]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 fe1c 	bl	8009c30 <_Bfree>
 8008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	1e3b      	subs	r3, r7, #0
 8009000:	bfaa      	itet	ge
 8009002:	2300      	movge	r3, #0
 8009004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009008:	f8c8 3000 	strge.w	r3, [r8]
 800900c:	4b9a      	ldr	r3, [pc, #616]	; (8009278 <_dtoa_r+0x2d8>)
 800900e:	bfbc      	itt	lt
 8009010:	2201      	movlt	r2, #1
 8009012:	f8c8 2000 	strlt.w	r2, [r8]
 8009016:	ea33 030b 	bics.w	r3, r3, fp
 800901a:	d11b      	bne.n	8009054 <_dtoa_r+0xb4>
 800901c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800901e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009028:	4333      	orrs	r3, r6
 800902a:	f000 8592 	beq.w	8009b52 <_dtoa_r+0xbb2>
 800902e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009030:	b963      	cbnz	r3, 800904c <_dtoa_r+0xac>
 8009032:	4b92      	ldr	r3, [pc, #584]	; (800927c <_dtoa_r+0x2dc>)
 8009034:	e022      	b.n	800907c <_dtoa_r+0xdc>
 8009036:	4b92      	ldr	r3, [pc, #584]	; (8009280 <_dtoa_r+0x2e0>)
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	3308      	adds	r3, #8
 800903c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	9801      	ldr	r0, [sp, #4]
 8009042:	b013      	add	sp, #76	; 0x4c
 8009044:	ecbd 8b04 	vpop	{d8-d9}
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	4b8b      	ldr	r3, [pc, #556]	; (800927c <_dtoa_r+0x2dc>)
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	3303      	adds	r3, #3
 8009052:	e7f3      	b.n	800903c <_dtoa_r+0x9c>
 8009054:	2200      	movs	r2, #0
 8009056:	2300      	movs	r3, #0
 8009058:	4650      	mov	r0, sl
 800905a:	4659      	mov	r1, fp
 800905c:	f7f7 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8009060:	ec4b ab19 	vmov	d9, sl, fp
 8009064:	4680      	mov	r8, r0
 8009066:	b158      	cbz	r0, 8009080 <_dtoa_r+0xe0>
 8009068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800906a:	2301      	movs	r3, #1
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 856b 	beq.w	8009b4c <_dtoa_r+0xbac>
 8009076:	4883      	ldr	r0, [pc, #524]	; (8009284 <_dtoa_r+0x2e4>)
 8009078:	6018      	str	r0, [r3, #0]
 800907a:	1e43      	subs	r3, r0, #1
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	e7df      	b.n	8009040 <_dtoa_r+0xa0>
 8009080:	ec4b ab10 	vmov	d0, sl, fp
 8009084:	aa10      	add	r2, sp, #64	; 0x40
 8009086:	a911      	add	r1, sp, #68	; 0x44
 8009088:	4620      	mov	r0, r4
 800908a:	f001 f8b9 	bl	800a200 <__d2b>
 800908e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009092:	ee08 0a10 	vmov	s16, r0
 8009096:	2d00      	cmp	r5, #0
 8009098:	f000 8084 	beq.w	80091a4 <_dtoa_r+0x204>
 800909c:	ee19 3a90 	vmov	r3, s19
 80090a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090a8:	4656      	mov	r6, sl
 80090aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80090b6:	4b74      	ldr	r3, [pc, #464]	; (8009288 <_dtoa_r+0x2e8>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f90b 	bl	80002d8 <__aeabi_dsub>
 80090c2:	a365      	add	r3, pc, #404	; (adr r3, 8009258 <_dtoa_r+0x2b8>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 fabe 	bl	8000648 <__aeabi_dmul>
 80090cc:	a364      	add	r3, pc, #400	; (adr r3, 8009260 <_dtoa_r+0x2c0>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f903 	bl	80002dc <__adddf3>
 80090d6:	4606      	mov	r6, r0
 80090d8:	4628      	mov	r0, r5
 80090da:	460f      	mov	r7, r1
 80090dc:	f7f7 fa4a 	bl	8000574 <__aeabi_i2d>
 80090e0:	a361      	add	r3, pc, #388	; (adr r3, 8009268 <_dtoa_r+0x2c8>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 faaf 	bl	8000648 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	f7f7 f8f3 	bl	80002dc <__adddf3>
 80090f6:	4606      	mov	r6, r0
 80090f8:	460f      	mov	r7, r1
 80090fa:	f7f7 fd55 	bl	8000ba8 <__aeabi_d2iz>
 80090fe:	2200      	movs	r2, #0
 8009100:	9000      	str	r0, [sp, #0]
 8009102:	2300      	movs	r3, #0
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800910c:	b150      	cbz	r0, 8009124 <_dtoa_r+0x184>
 800910e:	9800      	ldr	r0, [sp, #0]
 8009110:	f7f7 fa30 	bl	8000574 <__aeabi_i2d>
 8009114:	4632      	mov	r2, r6
 8009116:	463b      	mov	r3, r7
 8009118:	f7f7 fcfe 	bl	8000b18 <__aeabi_dcmpeq>
 800911c:	b910      	cbnz	r0, 8009124 <_dtoa_r+0x184>
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	3b01      	subs	r3, #1
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	2b16      	cmp	r3, #22
 8009128:	d85a      	bhi.n	80091e0 <_dtoa_r+0x240>
 800912a:	9a00      	ldr	r2, [sp, #0]
 800912c:	4b57      	ldr	r3, [pc, #348]	; (800928c <_dtoa_r+0x2ec>)
 800912e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	ec51 0b19 	vmov	r0, r1, d9
 800913a:	f7f7 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800913e:	2800      	cmp	r0, #0
 8009140:	d050      	beq.n	80091e4 <_dtoa_r+0x244>
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	3b01      	subs	r3, #1
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	2300      	movs	r3, #0
 800914a:	930b      	str	r3, [sp, #44]	; 0x2c
 800914c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800914e:	1b5d      	subs	r5, r3, r5
 8009150:	1e6b      	subs	r3, r5, #1
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	bf45      	ittet	mi
 8009156:	f1c5 0301 	rsbmi	r3, r5, #1
 800915a:	9304      	strmi	r3, [sp, #16]
 800915c:	2300      	movpl	r3, #0
 800915e:	2300      	movmi	r3, #0
 8009160:	bf4c      	ite	mi
 8009162:	9305      	strmi	r3, [sp, #20]
 8009164:	9304      	strpl	r3, [sp, #16]
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	db3d      	blt.n	80091e8 <_dtoa_r+0x248>
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	9a00      	ldr	r2, [sp, #0]
 8009170:	920a      	str	r2, [sp, #40]	; 0x28
 8009172:	4413      	add	r3, r2
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	2300      	movs	r3, #0
 8009178:	9307      	str	r3, [sp, #28]
 800917a:	9b06      	ldr	r3, [sp, #24]
 800917c:	2b09      	cmp	r3, #9
 800917e:	f200 8089 	bhi.w	8009294 <_dtoa_r+0x2f4>
 8009182:	2b05      	cmp	r3, #5
 8009184:	bfc4      	itt	gt
 8009186:	3b04      	subgt	r3, #4
 8009188:	9306      	strgt	r3, [sp, #24]
 800918a:	9b06      	ldr	r3, [sp, #24]
 800918c:	f1a3 0302 	sub.w	r3, r3, #2
 8009190:	bfcc      	ite	gt
 8009192:	2500      	movgt	r5, #0
 8009194:	2501      	movle	r5, #1
 8009196:	2b03      	cmp	r3, #3
 8009198:	f200 8087 	bhi.w	80092aa <_dtoa_r+0x30a>
 800919c:	e8df f003 	tbb	[pc, r3]
 80091a0:	59383a2d 	.word	0x59383a2d
 80091a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091a8:	441d      	add	r5, r3
 80091aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	bfc1      	itttt	gt
 80091b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80091be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091c2:	bfda      	itte	le
 80091c4:	f1c3 0320 	rsble	r3, r3, #32
 80091c8:	fa06 f003 	lslle.w	r0, r6, r3
 80091cc:	4318      	orrgt	r0, r3
 80091ce:	f7f7 f9c1 	bl	8000554 <__aeabi_ui2d>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4606      	mov	r6, r0
 80091d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091da:	3d01      	subs	r5, #1
 80091dc:	930e      	str	r3, [sp, #56]	; 0x38
 80091de:	e76a      	b.n	80090b6 <_dtoa_r+0x116>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e7b2      	b.n	800914a <_dtoa_r+0x1aa>
 80091e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80091e6:	e7b1      	b.n	800914c <_dtoa_r+0x1ac>
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	9a00      	ldr	r2, [sp, #0]
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	4253      	negs	r3, r2
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	2300      	movs	r3, #0
 80091f6:	930a      	str	r3, [sp, #40]	; 0x28
 80091f8:	e7bf      	b.n	800917a <_dtoa_r+0x1da>
 80091fa:	2300      	movs	r3, #0
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	dc55      	bgt.n	80092b0 <_dtoa_r+0x310>
 8009204:	2301      	movs	r3, #1
 8009206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800920a:	461a      	mov	r2, r3
 800920c:	9209      	str	r2, [sp, #36]	; 0x24
 800920e:	e00c      	b.n	800922a <_dtoa_r+0x28a>
 8009210:	2301      	movs	r3, #1
 8009212:	e7f3      	b.n	80091fc <_dtoa_r+0x25c>
 8009214:	2300      	movs	r3, #0
 8009216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	9b00      	ldr	r3, [sp, #0]
 800921c:	4413      	add	r3, r2
 800921e:	9302      	str	r3, [sp, #8]
 8009220:	3301      	adds	r3, #1
 8009222:	2b01      	cmp	r3, #1
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	bfb8      	it	lt
 8009228:	2301      	movlt	r3, #1
 800922a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800922c:	2200      	movs	r2, #0
 800922e:	6042      	str	r2, [r0, #4]
 8009230:	2204      	movs	r2, #4
 8009232:	f102 0614 	add.w	r6, r2, #20
 8009236:	429e      	cmp	r6, r3
 8009238:	6841      	ldr	r1, [r0, #4]
 800923a:	d93d      	bls.n	80092b8 <_dtoa_r+0x318>
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fcb7 	bl	8009bb0 <_Balloc>
 8009242:	9001      	str	r0, [sp, #4]
 8009244:	2800      	cmp	r0, #0
 8009246:	d13b      	bne.n	80092c0 <_dtoa_r+0x320>
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <_dtoa_r+0x2f0>)
 800924a:	4602      	mov	r2, r0
 800924c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009250:	e6c0      	b.n	8008fd4 <_dtoa_r+0x34>
 8009252:	2301      	movs	r3, #1
 8009254:	e7df      	b.n	8009216 <_dtoa_r+0x276>
 8009256:	bf00      	nop
 8009258:	636f4361 	.word	0x636f4361
 800925c:	3fd287a7 	.word	0x3fd287a7
 8009260:	8b60c8b3 	.word	0x8b60c8b3
 8009264:	3fc68a28 	.word	0x3fc68a28
 8009268:	509f79fb 	.word	0x509f79fb
 800926c:	3fd34413 	.word	0x3fd34413
 8009270:	0800b0ed 	.word	0x0800b0ed
 8009274:	0800b104 	.word	0x0800b104
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	0800b0e9 	.word	0x0800b0e9
 8009280:	0800b0e0 	.word	0x0800b0e0
 8009284:	0800b0bd 	.word	0x0800b0bd
 8009288:	3ff80000 	.word	0x3ff80000
 800928c:	0800b1f8 	.word	0x0800b1f8
 8009290:	0800b15f 	.word	0x0800b15f
 8009294:	2501      	movs	r5, #1
 8009296:	2300      	movs	r3, #0
 8009298:	9306      	str	r3, [sp, #24]
 800929a:	9508      	str	r5, [sp, #32]
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092a4:	2200      	movs	r2, #0
 80092a6:	2312      	movs	r3, #18
 80092a8:	e7b0      	b.n	800920c <_dtoa_r+0x26c>
 80092aa:	2301      	movs	r3, #1
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	e7f5      	b.n	800929c <_dtoa_r+0x2fc>
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092b6:	e7b8      	b.n	800922a <_dtoa_r+0x28a>
 80092b8:	3101      	adds	r1, #1
 80092ba:	6041      	str	r1, [r0, #4]
 80092bc:	0052      	lsls	r2, r2, #1
 80092be:	e7b8      	b.n	8009232 <_dtoa_r+0x292>
 80092c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c2:	9a01      	ldr	r2, [sp, #4]
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	2b0e      	cmp	r3, #14
 80092ca:	f200 809d 	bhi.w	8009408 <_dtoa_r+0x468>
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	f000 809a 	beq.w	8009408 <_dtoa_r+0x468>
 80092d4:	9b00      	ldr	r3, [sp, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd32      	ble.n	8009340 <_dtoa_r+0x3a0>
 80092da:	4ab7      	ldr	r2, [pc, #732]	; (80095b8 <_dtoa_r+0x618>)
 80092dc:	f003 030f 	and.w	r3, r3, #15
 80092e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092e8:	9b00      	ldr	r3, [sp, #0]
 80092ea:	05d8      	lsls	r0, r3, #23
 80092ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80092f0:	d516      	bpl.n	8009320 <_dtoa_r+0x380>
 80092f2:	4bb2      	ldr	r3, [pc, #712]	; (80095bc <_dtoa_r+0x61c>)
 80092f4:	ec51 0b19 	vmov	r0, r1, d9
 80092f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092fc:	f7f7 face 	bl	800089c <__aeabi_ddiv>
 8009300:	f007 070f 	and.w	r7, r7, #15
 8009304:	4682      	mov	sl, r0
 8009306:	468b      	mov	fp, r1
 8009308:	2503      	movs	r5, #3
 800930a:	4eac      	ldr	r6, [pc, #688]	; (80095bc <_dtoa_r+0x61c>)
 800930c:	b957      	cbnz	r7, 8009324 <_dtoa_r+0x384>
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	4650      	mov	r0, sl
 8009314:	4659      	mov	r1, fp
 8009316:	f7f7 fac1 	bl	800089c <__aeabi_ddiv>
 800931a:	4682      	mov	sl, r0
 800931c:	468b      	mov	fp, r1
 800931e:	e028      	b.n	8009372 <_dtoa_r+0x3d2>
 8009320:	2502      	movs	r5, #2
 8009322:	e7f2      	b.n	800930a <_dtoa_r+0x36a>
 8009324:	07f9      	lsls	r1, r7, #31
 8009326:	d508      	bpl.n	800933a <_dtoa_r+0x39a>
 8009328:	4640      	mov	r0, r8
 800932a:	4649      	mov	r1, r9
 800932c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009330:	f7f7 f98a 	bl	8000648 <__aeabi_dmul>
 8009334:	3501      	adds	r5, #1
 8009336:	4680      	mov	r8, r0
 8009338:	4689      	mov	r9, r1
 800933a:	107f      	asrs	r7, r7, #1
 800933c:	3608      	adds	r6, #8
 800933e:	e7e5      	b.n	800930c <_dtoa_r+0x36c>
 8009340:	f000 809b 	beq.w	800947a <_dtoa_r+0x4da>
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	4f9d      	ldr	r7, [pc, #628]	; (80095bc <_dtoa_r+0x61c>)
 8009348:	425e      	negs	r6, r3
 800934a:	4b9b      	ldr	r3, [pc, #620]	; (80095b8 <_dtoa_r+0x618>)
 800934c:	f006 020f 	and.w	r2, r6, #15
 8009350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	ec51 0b19 	vmov	r0, r1, d9
 800935c:	f7f7 f974 	bl	8000648 <__aeabi_dmul>
 8009360:	1136      	asrs	r6, r6, #4
 8009362:	4682      	mov	sl, r0
 8009364:	468b      	mov	fp, r1
 8009366:	2300      	movs	r3, #0
 8009368:	2502      	movs	r5, #2
 800936a:	2e00      	cmp	r6, #0
 800936c:	d17a      	bne.n	8009464 <_dtoa_r+0x4c4>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1d3      	bne.n	800931a <_dtoa_r+0x37a>
 8009372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8082 	beq.w	800947e <_dtoa_r+0x4de>
 800937a:	4b91      	ldr	r3, [pc, #580]	; (80095c0 <_dtoa_r+0x620>)
 800937c:	2200      	movs	r2, #0
 800937e:	4650      	mov	r0, sl
 8009380:	4659      	mov	r1, fp
 8009382:	f7f7 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 8009386:	2800      	cmp	r0, #0
 8009388:	d079      	beq.n	800947e <_dtoa_r+0x4de>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d076      	beq.n	800947e <_dtoa_r+0x4de>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd36      	ble.n	8009404 <_dtoa_r+0x464>
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	4650      	mov	r0, sl
 800939a:	4659      	mov	r1, fp
 800939c:	1e5f      	subs	r7, r3, #1
 800939e:	2200      	movs	r2, #0
 80093a0:	4b88      	ldr	r3, [pc, #544]	; (80095c4 <_dtoa_r+0x624>)
 80093a2:	f7f7 f951 	bl	8000648 <__aeabi_dmul>
 80093a6:	9e02      	ldr	r6, [sp, #8]
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	3501      	adds	r5, #1
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7f7 f8e0 	bl	8000574 <__aeabi_i2d>
 80093b4:	4652      	mov	r2, sl
 80093b6:	465b      	mov	r3, fp
 80093b8:	f7f7 f946 	bl	8000648 <__aeabi_dmul>
 80093bc:	4b82      	ldr	r3, [pc, #520]	; (80095c8 <_dtoa_r+0x628>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f7f6 ff8c 	bl	80002dc <__adddf3>
 80093c4:	46d0      	mov	r8, sl
 80093c6:	46d9      	mov	r9, fp
 80093c8:	4682      	mov	sl, r0
 80093ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	d158      	bne.n	8009484 <_dtoa_r+0x4e4>
 80093d2:	4b7e      	ldr	r3, [pc, #504]	; (80095cc <_dtoa_r+0x62c>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f6 ff7d 	bl	80002d8 <__aeabi_dsub>
 80093de:	4652      	mov	r2, sl
 80093e0:	465b      	mov	r3, fp
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	f7f7 fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f040 8295 	bne.w	800991a <_dtoa_r+0x97a>
 80093f0:	4652      	mov	r2, sl
 80093f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093f6:	4640      	mov	r0, r8
 80093f8:	4649      	mov	r1, r9
 80093fa:	f7f7 fb97 	bl	8000b2c <__aeabi_dcmplt>
 80093fe:	2800      	cmp	r0, #0
 8009400:	f040 8289 	bne.w	8009916 <_dtoa_r+0x976>
 8009404:	ec5b ab19 	vmov	sl, fp, d9
 8009408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800940a:	2b00      	cmp	r3, #0
 800940c:	f2c0 8148 	blt.w	80096a0 <_dtoa_r+0x700>
 8009410:	9a00      	ldr	r2, [sp, #0]
 8009412:	2a0e      	cmp	r2, #14
 8009414:	f300 8144 	bgt.w	80096a0 <_dtoa_r+0x700>
 8009418:	4b67      	ldr	r3, [pc, #412]	; (80095b8 <_dtoa_r+0x618>)
 800941a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800941e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009424:	2b00      	cmp	r3, #0
 8009426:	f280 80d5 	bge.w	80095d4 <_dtoa_r+0x634>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f300 80d1 	bgt.w	80095d4 <_dtoa_r+0x634>
 8009432:	f040 826f 	bne.w	8009914 <_dtoa_r+0x974>
 8009436:	4b65      	ldr	r3, [pc, #404]	; (80095cc <_dtoa_r+0x62c>)
 8009438:	2200      	movs	r2, #0
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 f903 	bl	8000648 <__aeabi_dmul>
 8009442:	4652      	mov	r2, sl
 8009444:	465b      	mov	r3, fp
 8009446:	f7f7 fb85 	bl	8000b54 <__aeabi_dcmpge>
 800944a:	9e03      	ldr	r6, [sp, #12]
 800944c:	4637      	mov	r7, r6
 800944e:	2800      	cmp	r0, #0
 8009450:	f040 8245 	bne.w	80098de <_dtoa_r+0x93e>
 8009454:	9d01      	ldr	r5, [sp, #4]
 8009456:	2331      	movs	r3, #49	; 0x31
 8009458:	f805 3b01 	strb.w	r3, [r5], #1
 800945c:	9b00      	ldr	r3, [sp, #0]
 800945e:	3301      	adds	r3, #1
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	e240      	b.n	80098e6 <_dtoa_r+0x946>
 8009464:	07f2      	lsls	r2, r6, #31
 8009466:	d505      	bpl.n	8009474 <_dtoa_r+0x4d4>
 8009468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800946c:	f7f7 f8ec 	bl	8000648 <__aeabi_dmul>
 8009470:	3501      	adds	r5, #1
 8009472:	2301      	movs	r3, #1
 8009474:	1076      	asrs	r6, r6, #1
 8009476:	3708      	adds	r7, #8
 8009478:	e777      	b.n	800936a <_dtoa_r+0x3ca>
 800947a:	2502      	movs	r5, #2
 800947c:	e779      	b.n	8009372 <_dtoa_r+0x3d2>
 800947e:	9f00      	ldr	r7, [sp, #0]
 8009480:	9e03      	ldr	r6, [sp, #12]
 8009482:	e794      	b.n	80093ae <_dtoa_r+0x40e>
 8009484:	9901      	ldr	r1, [sp, #4]
 8009486:	4b4c      	ldr	r3, [pc, #304]	; (80095b8 <_dtoa_r+0x618>)
 8009488:	4431      	add	r1, r6
 800948a:	910d      	str	r1, [sp, #52]	; 0x34
 800948c:	9908      	ldr	r1, [sp, #32]
 800948e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009496:	2900      	cmp	r1, #0
 8009498:	d043      	beq.n	8009522 <_dtoa_r+0x582>
 800949a:	494d      	ldr	r1, [pc, #308]	; (80095d0 <_dtoa_r+0x630>)
 800949c:	2000      	movs	r0, #0
 800949e:	f7f7 f9fd 	bl	800089c <__aeabi_ddiv>
 80094a2:	4652      	mov	r2, sl
 80094a4:	465b      	mov	r3, fp
 80094a6:	f7f6 ff17 	bl	80002d8 <__aeabi_dsub>
 80094aa:	9d01      	ldr	r5, [sp, #4]
 80094ac:	4682      	mov	sl, r0
 80094ae:	468b      	mov	fp, r1
 80094b0:	4649      	mov	r1, r9
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7f7 fb78 	bl	8000ba8 <__aeabi_d2iz>
 80094b8:	4606      	mov	r6, r0
 80094ba:	f7f7 f85b 	bl	8000574 <__aeabi_i2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f6 ff07 	bl	80002d8 <__aeabi_dsub>
 80094ca:	3630      	adds	r6, #48	; 0x30
 80094cc:	f805 6b01 	strb.w	r6, [r5], #1
 80094d0:	4652      	mov	r2, sl
 80094d2:	465b      	mov	r3, fp
 80094d4:	4680      	mov	r8, r0
 80094d6:	4689      	mov	r9, r1
 80094d8:	f7f7 fb28 	bl	8000b2c <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d163      	bne.n	80095a8 <_dtoa_r+0x608>
 80094e0:	4642      	mov	r2, r8
 80094e2:	464b      	mov	r3, r9
 80094e4:	4936      	ldr	r1, [pc, #216]	; (80095c0 <_dtoa_r+0x620>)
 80094e6:	2000      	movs	r0, #0
 80094e8:	f7f6 fef6 	bl	80002d8 <__aeabi_dsub>
 80094ec:	4652      	mov	r2, sl
 80094ee:	465b      	mov	r3, fp
 80094f0:	f7f7 fb1c 	bl	8000b2c <__aeabi_dcmplt>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f040 80b5 	bne.w	8009664 <_dtoa_r+0x6c4>
 80094fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094fc:	429d      	cmp	r5, r3
 80094fe:	d081      	beq.n	8009404 <_dtoa_r+0x464>
 8009500:	4b30      	ldr	r3, [pc, #192]	; (80095c4 <_dtoa_r+0x624>)
 8009502:	2200      	movs	r2, #0
 8009504:	4650      	mov	r0, sl
 8009506:	4659      	mov	r1, fp
 8009508:	f7f7 f89e 	bl	8000648 <__aeabi_dmul>
 800950c:	4b2d      	ldr	r3, [pc, #180]	; (80095c4 <_dtoa_r+0x624>)
 800950e:	4682      	mov	sl, r0
 8009510:	468b      	mov	fp, r1
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	2200      	movs	r2, #0
 8009518:	f7f7 f896 	bl	8000648 <__aeabi_dmul>
 800951c:	4680      	mov	r8, r0
 800951e:	4689      	mov	r9, r1
 8009520:	e7c6      	b.n	80094b0 <_dtoa_r+0x510>
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f7 f88f 	bl	8000648 <__aeabi_dmul>
 800952a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800952c:	9d01      	ldr	r5, [sp, #4]
 800952e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009530:	4682      	mov	sl, r0
 8009532:	468b      	mov	fp, r1
 8009534:	4649      	mov	r1, r9
 8009536:	4640      	mov	r0, r8
 8009538:	f7f7 fb36 	bl	8000ba8 <__aeabi_d2iz>
 800953c:	4606      	mov	r6, r0
 800953e:	f7f7 f819 	bl	8000574 <__aeabi_i2d>
 8009542:	3630      	adds	r6, #48	; 0x30
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4640      	mov	r0, r8
 800954a:	4649      	mov	r1, r9
 800954c:	f7f6 fec4 	bl	80002d8 <__aeabi_dsub>
 8009550:	f805 6b01 	strb.w	r6, [r5], #1
 8009554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009556:	429d      	cmp	r5, r3
 8009558:	4680      	mov	r8, r0
 800955a:	4689      	mov	r9, r1
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	d124      	bne.n	80095ac <_dtoa_r+0x60c>
 8009562:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <_dtoa_r+0x630>)
 8009564:	4650      	mov	r0, sl
 8009566:	4659      	mov	r1, fp
 8009568:	f7f6 feb8 	bl	80002dc <__adddf3>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4640      	mov	r0, r8
 8009572:	4649      	mov	r1, r9
 8009574:	f7f7 faf8 	bl	8000b68 <__aeabi_dcmpgt>
 8009578:	2800      	cmp	r0, #0
 800957a:	d173      	bne.n	8009664 <_dtoa_r+0x6c4>
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	4913      	ldr	r1, [pc, #76]	; (80095d0 <_dtoa_r+0x630>)
 8009582:	2000      	movs	r0, #0
 8009584:	f7f6 fea8 	bl	80002d8 <__aeabi_dsub>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f7 facc 	bl	8000b2c <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	f43f af35 	beq.w	8009404 <_dtoa_r+0x464>
 800959a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800959c:	1e6b      	subs	r3, r5, #1
 800959e:	930f      	str	r3, [sp, #60]	; 0x3c
 80095a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095a4:	2b30      	cmp	r3, #48	; 0x30
 80095a6:	d0f8      	beq.n	800959a <_dtoa_r+0x5fa>
 80095a8:	9700      	str	r7, [sp, #0]
 80095aa:	e049      	b.n	8009640 <_dtoa_r+0x6a0>
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <_dtoa_r+0x624>)
 80095ae:	f7f7 f84b 	bl	8000648 <__aeabi_dmul>
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	e7bd      	b.n	8009534 <_dtoa_r+0x594>
 80095b8:	0800b1f8 	.word	0x0800b1f8
 80095bc:	0800b1d0 	.word	0x0800b1d0
 80095c0:	3ff00000 	.word	0x3ff00000
 80095c4:	40240000 	.word	0x40240000
 80095c8:	401c0000 	.word	0x401c0000
 80095cc:	40140000 	.word	0x40140000
 80095d0:	3fe00000 	.word	0x3fe00000
 80095d4:	9d01      	ldr	r5, [sp, #4]
 80095d6:	4656      	mov	r6, sl
 80095d8:	465f      	mov	r7, fp
 80095da:	4642      	mov	r2, r8
 80095dc:	464b      	mov	r3, r9
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f7 f95b 	bl	800089c <__aeabi_ddiv>
 80095e6:	f7f7 fadf 	bl	8000ba8 <__aeabi_d2iz>
 80095ea:	4682      	mov	sl, r0
 80095ec:	f7f6 ffc2 	bl	8000574 <__aeabi_i2d>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	f7f7 f828 	bl	8000648 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009604:	f7f6 fe68 	bl	80002d8 <__aeabi_dsub>
 8009608:	f805 6b01 	strb.w	r6, [r5], #1
 800960c:	9e01      	ldr	r6, [sp, #4]
 800960e:	9f03      	ldr	r7, [sp, #12]
 8009610:	1bae      	subs	r6, r5, r6
 8009612:	42b7      	cmp	r7, r6
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	d135      	bne.n	8009686 <_dtoa_r+0x6e6>
 800961a:	f7f6 fe5f 	bl	80002dc <__adddf3>
 800961e:	4642      	mov	r2, r8
 8009620:	464b      	mov	r3, r9
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f7f7 fa9f 	bl	8000b68 <__aeabi_dcmpgt>
 800962a:	b9d0      	cbnz	r0, 8009662 <_dtoa_r+0x6c2>
 800962c:	4642      	mov	r2, r8
 800962e:	464b      	mov	r3, r9
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f7 fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8009638:	b110      	cbz	r0, 8009640 <_dtoa_r+0x6a0>
 800963a:	f01a 0f01 	tst.w	sl, #1
 800963e:	d110      	bne.n	8009662 <_dtoa_r+0x6c2>
 8009640:	4620      	mov	r0, r4
 8009642:	ee18 1a10 	vmov	r1, s16
 8009646:	f000 faf3 	bl	8009c30 <_Bfree>
 800964a:	2300      	movs	r3, #0
 800964c:	9800      	ldr	r0, [sp, #0]
 800964e:	702b      	strb	r3, [r5, #0]
 8009650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009652:	3001      	adds	r0, #1
 8009654:	6018      	str	r0, [r3, #0]
 8009656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009658:	2b00      	cmp	r3, #0
 800965a:	f43f acf1 	beq.w	8009040 <_dtoa_r+0xa0>
 800965e:	601d      	str	r5, [r3, #0]
 8009660:	e4ee      	b.n	8009040 <_dtoa_r+0xa0>
 8009662:	9f00      	ldr	r7, [sp, #0]
 8009664:	462b      	mov	r3, r5
 8009666:	461d      	mov	r5, r3
 8009668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966c:	2a39      	cmp	r2, #57	; 0x39
 800966e:	d106      	bne.n	800967e <_dtoa_r+0x6de>
 8009670:	9a01      	ldr	r2, [sp, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d1f7      	bne.n	8009666 <_dtoa_r+0x6c6>
 8009676:	9901      	ldr	r1, [sp, #4]
 8009678:	2230      	movs	r2, #48	; 0x30
 800967a:	3701      	adds	r7, #1
 800967c:	700a      	strb	r2, [r1, #0]
 800967e:	781a      	ldrb	r2, [r3, #0]
 8009680:	3201      	adds	r2, #1
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e790      	b.n	80095a8 <_dtoa_r+0x608>
 8009686:	4ba6      	ldr	r3, [pc, #664]	; (8009920 <_dtoa_r+0x980>)
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffdd 	bl	8000648 <__aeabi_dmul>
 800968e:	2200      	movs	r2, #0
 8009690:	2300      	movs	r3, #0
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	f7f7 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800969a:	2800      	cmp	r0, #0
 800969c:	d09d      	beq.n	80095da <_dtoa_r+0x63a>
 800969e:	e7cf      	b.n	8009640 <_dtoa_r+0x6a0>
 80096a0:	9a08      	ldr	r2, [sp, #32]
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	f000 80d7 	beq.w	8009856 <_dtoa_r+0x8b6>
 80096a8:	9a06      	ldr	r2, [sp, #24]
 80096aa:	2a01      	cmp	r2, #1
 80096ac:	f300 80ba 	bgt.w	8009824 <_dtoa_r+0x884>
 80096b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	f000 80b2 	beq.w	800981c <_dtoa_r+0x87c>
 80096b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096bc:	9e07      	ldr	r6, [sp, #28]
 80096be:	9d04      	ldr	r5, [sp, #16]
 80096c0:	9a04      	ldr	r2, [sp, #16]
 80096c2:	441a      	add	r2, r3
 80096c4:	9204      	str	r2, [sp, #16]
 80096c6:	9a05      	ldr	r2, [sp, #20]
 80096c8:	2101      	movs	r1, #1
 80096ca:	441a      	add	r2, r3
 80096cc:	4620      	mov	r0, r4
 80096ce:	9205      	str	r2, [sp, #20]
 80096d0:	f000 fb66 	bl	8009da0 <__i2b>
 80096d4:	4607      	mov	r7, r0
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	dd0c      	ble.n	80096f4 <_dtoa_r+0x754>
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd09      	ble.n	80096f4 <_dtoa_r+0x754>
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	bfa8      	it	ge
 80096e6:	462b      	movge	r3, r5
 80096e8:	1ad2      	subs	r2, r2, r3
 80096ea:	9204      	str	r2, [sp, #16]
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	1aed      	subs	r5, r5, r3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	b31b      	cbz	r3, 8009740 <_dtoa_r+0x7a0>
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 80af 	beq.w	800985e <_dtoa_r+0x8be>
 8009700:	2e00      	cmp	r6, #0
 8009702:	dd13      	ble.n	800972c <_dtoa_r+0x78c>
 8009704:	4639      	mov	r1, r7
 8009706:	4632      	mov	r2, r6
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fc09 	bl	8009f20 <__pow5mult>
 800970e:	ee18 2a10 	vmov	r2, s16
 8009712:	4601      	mov	r1, r0
 8009714:	4607      	mov	r7, r0
 8009716:	4620      	mov	r0, r4
 8009718:	f000 fb58 	bl	8009dcc <__multiply>
 800971c:	ee18 1a10 	vmov	r1, s16
 8009720:	4680      	mov	r8, r0
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fa84 	bl	8009c30 <_Bfree>
 8009728:	ee08 8a10 	vmov	s16, r8
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	1b9a      	subs	r2, r3, r6
 8009730:	d006      	beq.n	8009740 <_dtoa_r+0x7a0>
 8009732:	ee18 1a10 	vmov	r1, s16
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fbf2 	bl	8009f20 <__pow5mult>
 800973c:	ee08 0a10 	vmov	s16, r0
 8009740:	2101      	movs	r1, #1
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fb2c 	bl	8009da0 <__i2b>
 8009748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	4606      	mov	r6, r0
 800974e:	f340 8088 	ble.w	8009862 <_dtoa_r+0x8c2>
 8009752:	461a      	mov	r2, r3
 8009754:	4601      	mov	r1, r0
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fbe2 	bl	8009f20 <__pow5mult>
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	2b01      	cmp	r3, #1
 8009760:	4606      	mov	r6, r0
 8009762:	f340 8081 	ble.w	8009868 <_dtoa_r+0x8c8>
 8009766:	f04f 0800 	mov.w	r8, #0
 800976a:	6933      	ldr	r3, [r6, #16]
 800976c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009770:	6918      	ldr	r0, [r3, #16]
 8009772:	f000 fac5 	bl	8009d00 <__hi0bits>
 8009776:	f1c0 0020 	rsb	r0, r0, #32
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	4418      	add	r0, r3
 800977e:	f010 001f 	ands.w	r0, r0, #31
 8009782:	f000 8092 	beq.w	80098aa <_dtoa_r+0x90a>
 8009786:	f1c0 0320 	rsb	r3, r0, #32
 800978a:	2b04      	cmp	r3, #4
 800978c:	f340 808a 	ble.w	80098a4 <_dtoa_r+0x904>
 8009790:	f1c0 001c 	rsb	r0, r0, #28
 8009794:	9b04      	ldr	r3, [sp, #16]
 8009796:	4403      	add	r3, r0
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	9b05      	ldr	r3, [sp, #20]
 800979c:	4403      	add	r3, r0
 800979e:	4405      	add	r5, r0
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	9b04      	ldr	r3, [sp, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dd07      	ble.n	80097b8 <_dtoa_r+0x818>
 80097a8:	ee18 1a10 	vmov	r1, s16
 80097ac:	461a      	mov	r2, r3
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 fc10 	bl	8009fd4 <__lshift>
 80097b4:	ee08 0a10 	vmov	s16, r0
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dd05      	ble.n	80097ca <_dtoa_r+0x82a>
 80097be:	4631      	mov	r1, r6
 80097c0:	461a      	mov	r2, r3
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fc06 	bl	8009fd4 <__lshift>
 80097c8:	4606      	mov	r6, r0
 80097ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d06e      	beq.n	80098ae <_dtoa_r+0x90e>
 80097d0:	ee18 0a10 	vmov	r0, s16
 80097d4:	4631      	mov	r1, r6
 80097d6:	f000 fc6d 	bl	800a0b4 <__mcmp>
 80097da:	2800      	cmp	r0, #0
 80097dc:	da67      	bge.n	80098ae <_dtoa_r+0x90e>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	ee18 1a10 	vmov	r1, s16
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	220a      	movs	r2, #10
 80097ea:	2300      	movs	r3, #0
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fa41 	bl	8009c74 <__multadd>
 80097f2:	9b08      	ldr	r3, [sp, #32]
 80097f4:	ee08 0a10 	vmov	s16, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 81b1 	beq.w	8009b60 <_dtoa_r+0xbc0>
 80097fe:	2300      	movs	r3, #0
 8009800:	4639      	mov	r1, r7
 8009802:	220a      	movs	r2, #10
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fa35 	bl	8009c74 <__multadd>
 800980a:	9b02      	ldr	r3, [sp, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	4607      	mov	r7, r0
 8009810:	f300 808e 	bgt.w	8009930 <_dtoa_r+0x990>
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	2b02      	cmp	r3, #2
 8009818:	dc51      	bgt.n	80098be <_dtoa_r+0x91e>
 800981a:	e089      	b.n	8009930 <_dtoa_r+0x990>
 800981c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800981e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009822:	e74b      	b.n	80096bc <_dtoa_r+0x71c>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	1e5e      	subs	r6, r3, #1
 8009828:	9b07      	ldr	r3, [sp, #28]
 800982a:	42b3      	cmp	r3, r6
 800982c:	bfbf      	itttt	lt
 800982e:	9b07      	ldrlt	r3, [sp, #28]
 8009830:	9607      	strlt	r6, [sp, #28]
 8009832:	1af2      	sublt	r2, r6, r3
 8009834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009836:	bfb6      	itet	lt
 8009838:	189b      	addlt	r3, r3, r2
 800983a:	1b9e      	subge	r6, r3, r6
 800983c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	bfb8      	it	lt
 8009842:	2600      	movlt	r6, #0
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfb7      	itett	lt
 8009848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800984c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009850:	1a9d      	sublt	r5, r3, r2
 8009852:	2300      	movlt	r3, #0
 8009854:	e734      	b.n	80096c0 <_dtoa_r+0x720>
 8009856:	9e07      	ldr	r6, [sp, #28]
 8009858:	9d04      	ldr	r5, [sp, #16]
 800985a:	9f08      	ldr	r7, [sp, #32]
 800985c:	e73b      	b.n	80096d6 <_dtoa_r+0x736>
 800985e:	9a07      	ldr	r2, [sp, #28]
 8009860:	e767      	b.n	8009732 <_dtoa_r+0x792>
 8009862:	9b06      	ldr	r3, [sp, #24]
 8009864:	2b01      	cmp	r3, #1
 8009866:	dc18      	bgt.n	800989a <_dtoa_r+0x8fa>
 8009868:	f1ba 0f00 	cmp.w	sl, #0
 800986c:	d115      	bne.n	800989a <_dtoa_r+0x8fa>
 800986e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009872:	b993      	cbnz	r3, 800989a <_dtoa_r+0x8fa>
 8009874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009878:	0d1b      	lsrs	r3, r3, #20
 800987a:	051b      	lsls	r3, r3, #20
 800987c:	b183      	cbz	r3, 80098a0 <_dtoa_r+0x900>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	9b05      	ldr	r3, [sp, #20]
 8009886:	3301      	adds	r3, #1
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	f04f 0801 	mov.w	r8, #1
 800988e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	f47f af6a 	bne.w	800976a <_dtoa_r+0x7ca>
 8009896:	2001      	movs	r0, #1
 8009898:	e76f      	b.n	800977a <_dtoa_r+0x7da>
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	e7f6      	b.n	800988e <_dtoa_r+0x8ee>
 80098a0:	4698      	mov	r8, r3
 80098a2:	e7f4      	b.n	800988e <_dtoa_r+0x8ee>
 80098a4:	f43f af7d 	beq.w	80097a2 <_dtoa_r+0x802>
 80098a8:	4618      	mov	r0, r3
 80098aa:	301c      	adds	r0, #28
 80098ac:	e772      	b.n	8009794 <_dtoa_r+0x7f4>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dc37      	bgt.n	8009924 <_dtoa_r+0x984>
 80098b4:	9b06      	ldr	r3, [sp, #24]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	dd34      	ble.n	8009924 <_dtoa_r+0x984>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	b96b      	cbnz	r3, 80098de <_dtoa_r+0x93e>
 80098c2:	4631      	mov	r1, r6
 80098c4:	2205      	movs	r2, #5
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 f9d4 	bl	8009c74 <__multadd>
 80098cc:	4601      	mov	r1, r0
 80098ce:	4606      	mov	r6, r0
 80098d0:	ee18 0a10 	vmov	r0, s16
 80098d4:	f000 fbee 	bl	800a0b4 <__mcmp>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f73f adbb 	bgt.w	8009454 <_dtoa_r+0x4b4>
 80098de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e0:	9d01      	ldr	r5, [sp, #4]
 80098e2:	43db      	mvns	r3, r3
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	f04f 0800 	mov.w	r8, #0
 80098ea:	4631      	mov	r1, r6
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f99f 	bl	8009c30 <_Bfree>
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	f43f aea4 	beq.w	8009640 <_dtoa_r+0x6a0>
 80098f8:	f1b8 0f00 	cmp.w	r8, #0
 80098fc:	d005      	beq.n	800990a <_dtoa_r+0x96a>
 80098fe:	45b8      	cmp	r8, r7
 8009900:	d003      	beq.n	800990a <_dtoa_r+0x96a>
 8009902:	4641      	mov	r1, r8
 8009904:	4620      	mov	r0, r4
 8009906:	f000 f993 	bl	8009c30 <_Bfree>
 800990a:	4639      	mov	r1, r7
 800990c:	4620      	mov	r0, r4
 800990e:	f000 f98f 	bl	8009c30 <_Bfree>
 8009912:	e695      	b.n	8009640 <_dtoa_r+0x6a0>
 8009914:	2600      	movs	r6, #0
 8009916:	4637      	mov	r7, r6
 8009918:	e7e1      	b.n	80098de <_dtoa_r+0x93e>
 800991a:	9700      	str	r7, [sp, #0]
 800991c:	4637      	mov	r7, r6
 800991e:	e599      	b.n	8009454 <_dtoa_r+0x4b4>
 8009920:	40240000 	.word	0x40240000
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80ca 	beq.w	8009ac0 <_dtoa_r+0xb20>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	2d00      	cmp	r5, #0
 8009932:	dd05      	ble.n	8009940 <_dtoa_r+0x9a0>
 8009934:	4639      	mov	r1, r7
 8009936:	462a      	mov	r2, r5
 8009938:	4620      	mov	r0, r4
 800993a:	f000 fb4b 	bl	8009fd4 <__lshift>
 800993e:	4607      	mov	r7, r0
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	d05b      	beq.n	80099fe <_dtoa_r+0xa5e>
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4620      	mov	r0, r4
 800994a:	f000 f931 	bl	8009bb0 <_Balloc>
 800994e:	4605      	mov	r5, r0
 8009950:	b928      	cbnz	r0, 800995e <_dtoa_r+0x9be>
 8009952:	4b87      	ldr	r3, [pc, #540]	; (8009b70 <_dtoa_r+0xbd0>)
 8009954:	4602      	mov	r2, r0
 8009956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800995a:	f7ff bb3b 	b.w	8008fd4 <_dtoa_r+0x34>
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	3202      	adds	r2, #2
 8009962:	0092      	lsls	r2, r2, #2
 8009964:	f107 010c 	add.w	r1, r7, #12
 8009968:	300c      	adds	r0, #12
 800996a:	f000 f913 	bl	8009b94 <memcpy>
 800996e:	2201      	movs	r2, #1
 8009970:	4629      	mov	r1, r5
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fb2e 	bl	8009fd4 <__lshift>
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	f103 0901 	add.w	r9, r3, #1
 800997e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009982:	4413      	add	r3, r2
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	f00a 0301 	and.w	r3, sl, #1
 800998a:	46b8      	mov	r8, r7
 800998c:	9304      	str	r3, [sp, #16]
 800998e:	4607      	mov	r7, r0
 8009990:	4631      	mov	r1, r6
 8009992:	ee18 0a10 	vmov	r0, s16
 8009996:	f7ff fa77 	bl	8008e88 <quorem>
 800999a:	4641      	mov	r1, r8
 800999c:	9002      	str	r0, [sp, #8]
 800999e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099a2:	ee18 0a10 	vmov	r0, s16
 80099a6:	f000 fb85 	bl	800a0b4 <__mcmp>
 80099aa:	463a      	mov	r2, r7
 80099ac:	9003      	str	r0, [sp, #12]
 80099ae:	4631      	mov	r1, r6
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fb9b 	bl	800a0ec <__mdiff>
 80099b6:	68c2      	ldr	r2, [r0, #12]
 80099b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80099bc:	4605      	mov	r5, r0
 80099be:	bb02      	cbnz	r2, 8009a02 <_dtoa_r+0xa62>
 80099c0:	4601      	mov	r1, r0
 80099c2:	ee18 0a10 	vmov	r0, s16
 80099c6:	f000 fb75 	bl	800a0b4 <__mcmp>
 80099ca:	4602      	mov	r2, r0
 80099cc:	4629      	mov	r1, r5
 80099ce:	4620      	mov	r0, r4
 80099d0:	9207      	str	r2, [sp, #28]
 80099d2:	f000 f92d 	bl	8009c30 <_Bfree>
 80099d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80099da:	ea43 0102 	orr.w	r1, r3, r2
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	430b      	orrs	r3, r1
 80099e2:	464d      	mov	r5, r9
 80099e4:	d10f      	bne.n	8009a06 <_dtoa_r+0xa66>
 80099e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099ea:	d02a      	beq.n	8009a42 <_dtoa_r+0xaa2>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dd02      	ble.n	80099f8 <_dtoa_r+0xa58>
 80099f2:	9b02      	ldr	r3, [sp, #8]
 80099f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80099f8:	f88b a000 	strb.w	sl, [fp]
 80099fc:	e775      	b.n	80098ea <_dtoa_r+0x94a>
 80099fe:	4638      	mov	r0, r7
 8009a00:	e7ba      	b.n	8009978 <_dtoa_r+0x9d8>
 8009a02:	2201      	movs	r2, #1
 8009a04:	e7e2      	b.n	80099cc <_dtoa_r+0xa2c>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	db04      	blt.n	8009a16 <_dtoa_r+0xa76>
 8009a0c:	9906      	ldr	r1, [sp, #24]
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	9904      	ldr	r1, [sp, #16]
 8009a12:	430b      	orrs	r3, r1
 8009a14:	d122      	bne.n	8009a5c <_dtoa_r+0xabc>
 8009a16:	2a00      	cmp	r2, #0
 8009a18:	ddee      	ble.n	80099f8 <_dtoa_r+0xa58>
 8009a1a:	ee18 1a10 	vmov	r1, s16
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fad7 	bl	8009fd4 <__lshift>
 8009a26:	4631      	mov	r1, r6
 8009a28:	ee08 0a10 	vmov	s16, r0
 8009a2c:	f000 fb42 	bl	800a0b4 <__mcmp>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dc03      	bgt.n	8009a3c <_dtoa_r+0xa9c>
 8009a34:	d1e0      	bne.n	80099f8 <_dtoa_r+0xa58>
 8009a36:	f01a 0f01 	tst.w	sl, #1
 8009a3a:	d0dd      	beq.n	80099f8 <_dtoa_r+0xa58>
 8009a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a40:	d1d7      	bne.n	80099f2 <_dtoa_r+0xa52>
 8009a42:	2339      	movs	r3, #57	; 0x39
 8009a44:	f88b 3000 	strb.w	r3, [fp]
 8009a48:	462b      	mov	r3, r5
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a52:	2a39      	cmp	r2, #57	; 0x39
 8009a54:	d071      	beq.n	8009b3a <_dtoa_r+0xb9a>
 8009a56:	3201      	adds	r2, #1
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	e746      	b.n	80098ea <_dtoa_r+0x94a>
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	dd07      	ble.n	8009a70 <_dtoa_r+0xad0>
 8009a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a64:	d0ed      	beq.n	8009a42 <_dtoa_r+0xaa2>
 8009a66:	f10a 0301 	add.w	r3, sl, #1
 8009a6a:	f88b 3000 	strb.w	r3, [fp]
 8009a6e:	e73c      	b.n	80098ea <_dtoa_r+0x94a>
 8009a70:	9b05      	ldr	r3, [sp, #20]
 8009a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009a76:	4599      	cmp	r9, r3
 8009a78:	d047      	beq.n	8009b0a <_dtoa_r+0xb6a>
 8009a7a:	ee18 1a10 	vmov	r1, s16
 8009a7e:	2300      	movs	r3, #0
 8009a80:	220a      	movs	r2, #10
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f8f6 	bl	8009c74 <__multadd>
 8009a88:	45b8      	cmp	r8, r7
 8009a8a:	ee08 0a10 	vmov	s16, r0
 8009a8e:	f04f 0300 	mov.w	r3, #0
 8009a92:	f04f 020a 	mov.w	r2, #10
 8009a96:	4641      	mov	r1, r8
 8009a98:	4620      	mov	r0, r4
 8009a9a:	d106      	bne.n	8009aaa <_dtoa_r+0xb0a>
 8009a9c:	f000 f8ea 	bl	8009c74 <__multadd>
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	4607      	mov	r7, r0
 8009aa4:	f109 0901 	add.w	r9, r9, #1
 8009aa8:	e772      	b.n	8009990 <_dtoa_r+0x9f0>
 8009aaa:	f000 f8e3 	bl	8009c74 <__multadd>
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4680      	mov	r8, r0
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	220a      	movs	r2, #10
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 f8dc 	bl	8009c74 <__multadd>
 8009abc:	4607      	mov	r7, r0
 8009abe:	e7f1      	b.n	8009aa4 <_dtoa_r+0xb04>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	9302      	str	r3, [sp, #8]
 8009ac4:	9d01      	ldr	r5, [sp, #4]
 8009ac6:	ee18 0a10 	vmov	r0, s16
 8009aca:	4631      	mov	r1, r6
 8009acc:	f7ff f9dc 	bl	8008e88 <quorem>
 8009ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8009ada:	1aea      	subs	r2, r5, r3
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	dd09      	ble.n	8009af6 <_dtoa_r+0xb56>
 8009ae2:	ee18 1a10 	vmov	r1, s16
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	220a      	movs	r2, #10
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f8c2 	bl	8009c74 <__multadd>
 8009af0:	ee08 0a10 	vmov	s16, r0
 8009af4:	e7e7      	b.n	8009ac6 <_dtoa_r+0xb26>
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bfc8      	it	gt
 8009afc:	461d      	movgt	r5, r3
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	bfd8      	it	le
 8009b02:	2501      	movle	r5, #1
 8009b04:	441d      	add	r5, r3
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fa5f 	bl	8009fd4 <__lshift>
 8009b16:	4631      	mov	r1, r6
 8009b18:	ee08 0a10 	vmov	s16, r0
 8009b1c:	f000 faca 	bl	800a0b4 <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dc91      	bgt.n	8009a48 <_dtoa_r+0xaa8>
 8009b24:	d102      	bne.n	8009b2c <_dtoa_r+0xb8c>
 8009b26:	f01a 0f01 	tst.w	sl, #1
 8009b2a:	d18d      	bne.n	8009a48 <_dtoa_r+0xaa8>
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	461d      	mov	r5, r3
 8009b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b34:	2a30      	cmp	r2, #48	; 0x30
 8009b36:	d0fa      	beq.n	8009b2e <_dtoa_r+0xb8e>
 8009b38:	e6d7      	b.n	80098ea <_dtoa_r+0x94a>
 8009b3a:	9a01      	ldr	r2, [sp, #4]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d184      	bne.n	8009a4a <_dtoa_r+0xaaa>
 8009b40:	9b00      	ldr	r3, [sp, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2331      	movs	r3, #49	; 0x31
 8009b48:	7013      	strb	r3, [r2, #0]
 8009b4a:	e6ce      	b.n	80098ea <_dtoa_r+0x94a>
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <_dtoa_r+0xbd4>)
 8009b4e:	f7ff ba95 	b.w	800907c <_dtoa_r+0xdc>
 8009b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f47f aa6e 	bne.w	8009036 <_dtoa_r+0x96>
 8009b5a:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <_dtoa_r+0xbd8>)
 8009b5c:	f7ff ba8e 	b.w	800907c <_dtoa_r+0xdc>
 8009b60:	9b02      	ldr	r3, [sp, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	dcae      	bgt.n	8009ac4 <_dtoa_r+0xb24>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	f73f aea8 	bgt.w	80098be <_dtoa_r+0x91e>
 8009b6e:	e7a9      	b.n	8009ac4 <_dtoa_r+0xb24>
 8009b70:	0800b15f 	.word	0x0800b15f
 8009b74:	0800b0bc 	.word	0x0800b0bc
 8009b78:	0800b0e0 	.word	0x0800b0e0

08009b7c <_localeconv_r>:
 8009b7c:	4800      	ldr	r0, [pc, #0]	; (8009b80 <_localeconv_r+0x4>)
 8009b7e:	4770      	bx	lr
 8009b80:	2000016c 	.word	0x2000016c

08009b84 <malloc>:
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <malloc+0xc>)
 8009b86:	4601      	mov	r1, r0
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f000 bc17 	b.w	800a3bc <_malloc_r>
 8009b8e:	bf00      	nop
 8009b90:	20000018 	.word	0x20000018

08009b94 <memcpy>:
 8009b94:	440a      	add	r2, r1
 8009b96:	4291      	cmp	r1, r2
 8009b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b9c:	d100      	bne.n	8009ba0 <memcpy+0xc>
 8009b9e:	4770      	bx	lr
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d1f9      	bne.n	8009ba2 <memcpy+0xe>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <_Balloc>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	b976      	cbnz	r6, 8009bd8 <_Balloc+0x28>
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f7ff ffe2 	bl	8009b84 <malloc>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8009bc4:	b920      	cbnz	r0, 8009bd0 <_Balloc+0x20>
 8009bc6:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <_Balloc+0x78>)
 8009bc8:	4818      	ldr	r0, [pc, #96]	; (8009c2c <_Balloc+0x7c>)
 8009bca:	2166      	movs	r1, #102	; 0x66
 8009bcc:	f000 fc7a 	bl	800a4c4 <__assert_func>
 8009bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd4:	6006      	str	r6, [r0, #0]
 8009bd6:	60c6      	str	r6, [r0, #12]
 8009bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bda:	68f3      	ldr	r3, [r6, #12]
 8009bdc:	b183      	cbz	r3, 8009c00 <_Balloc+0x50>
 8009bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009be6:	b9b8      	cbnz	r0, 8009c18 <_Balloc+0x68>
 8009be8:	2101      	movs	r1, #1
 8009bea:	fa01 f605 	lsl.w	r6, r1, r5
 8009bee:	1d72      	adds	r2, r6, #5
 8009bf0:	0092      	lsls	r2, r2, #2
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fb60 	bl	800a2b8 <_calloc_r>
 8009bf8:	b160      	cbz	r0, 8009c14 <_Balloc+0x64>
 8009bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bfe:	e00e      	b.n	8009c1e <_Balloc+0x6e>
 8009c00:	2221      	movs	r2, #33	; 0x21
 8009c02:	2104      	movs	r1, #4
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fb57 	bl	800a2b8 <_calloc_r>
 8009c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c0c:	60f0      	str	r0, [r6, #12]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e4      	bne.n	8009bde <_Balloc+0x2e>
 8009c14:	2000      	movs	r0, #0
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	6802      	ldr	r2, [r0, #0]
 8009c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c24:	e7f7      	b.n	8009c16 <_Balloc+0x66>
 8009c26:	bf00      	nop
 8009c28:	0800b0ed 	.word	0x0800b0ed
 8009c2c:	0800b170 	.word	0x0800b170

08009c30 <_Bfree>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	b976      	cbnz	r6, 8009c58 <_Bfree+0x28>
 8009c3a:	2010      	movs	r0, #16
 8009c3c:	f7ff ffa2 	bl	8009b84 <malloc>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6268      	str	r0, [r5, #36]	; 0x24
 8009c44:	b920      	cbnz	r0, 8009c50 <_Bfree+0x20>
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <_Bfree+0x3c>)
 8009c48:	4809      	ldr	r0, [pc, #36]	; (8009c70 <_Bfree+0x40>)
 8009c4a:	218a      	movs	r1, #138	; 0x8a
 8009c4c:	f000 fc3a 	bl	800a4c4 <__assert_func>
 8009c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c54:	6006      	str	r6, [r0, #0]
 8009c56:	60c6      	str	r6, [r0, #12]
 8009c58:	b13c      	cbz	r4, 8009c6a <_Bfree+0x3a>
 8009c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c64:	6021      	str	r1, [r4, #0]
 8009c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	0800b0ed 	.word	0x0800b0ed
 8009c70:	0800b170 	.word	0x0800b170

08009c74 <__multadd>:
 8009c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c78:	690d      	ldr	r5, [r1, #16]
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	461e      	mov	r6, r3
 8009c80:	f101 0c14 	add.w	ip, r1, #20
 8009c84:	2000      	movs	r0, #0
 8009c86:	f8dc 3000 	ldr.w	r3, [ip]
 8009c8a:	b299      	uxth	r1, r3
 8009c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c90:	0c1e      	lsrs	r6, r3, #16
 8009c92:	0c0b      	lsrs	r3, r1, #16
 8009c94:	fb02 3306 	mla	r3, r2, r6, r3
 8009c98:	b289      	uxth	r1, r1
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ca0:	4285      	cmp	r5, r0
 8009ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009caa:	dcec      	bgt.n	8009c86 <__multadd+0x12>
 8009cac:	b30e      	cbz	r6, 8009cf2 <__multadd+0x7e>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	dc19      	bgt.n	8009ce8 <__multadd+0x74>
 8009cb4:	6861      	ldr	r1, [r4, #4]
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	3101      	adds	r1, #1
 8009cba:	f7ff ff79 	bl	8009bb0 <_Balloc>
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <__multadd+0x5a>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <__multadd+0x84>)
 8009cc6:	480d      	ldr	r0, [pc, #52]	; (8009cfc <__multadd+0x88>)
 8009cc8:	21b5      	movs	r1, #181	; 0xb5
 8009cca:	f000 fbfb 	bl	800a4c4 <__assert_func>
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	3202      	adds	r2, #2
 8009cd2:	f104 010c 	add.w	r1, r4, #12
 8009cd6:	0092      	lsls	r2, r2, #2
 8009cd8:	300c      	adds	r0, #12
 8009cda:	f7ff ff5b 	bl	8009b94 <memcpy>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ffa5 	bl	8009c30 <_Bfree>
 8009ce6:	4644      	mov	r4, r8
 8009ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cec:	3501      	adds	r5, #1
 8009cee:	615e      	str	r6, [r3, #20]
 8009cf0:	6125      	str	r5, [r4, #16]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	0800b15f 	.word	0x0800b15f
 8009cfc:	0800b170 	.word	0x0800b170

08009d00 <__hi0bits>:
 8009d00:	0c03      	lsrs	r3, r0, #16
 8009d02:	041b      	lsls	r3, r3, #16
 8009d04:	b9d3      	cbnz	r3, 8009d3c <__hi0bits+0x3c>
 8009d06:	0400      	lsls	r0, r0, #16
 8009d08:	2310      	movs	r3, #16
 8009d0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d0e:	bf04      	itt	eq
 8009d10:	0200      	lsleq	r0, r0, #8
 8009d12:	3308      	addeq	r3, #8
 8009d14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d18:	bf04      	itt	eq
 8009d1a:	0100      	lsleq	r0, r0, #4
 8009d1c:	3304      	addeq	r3, #4
 8009d1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d22:	bf04      	itt	eq
 8009d24:	0080      	lsleq	r0, r0, #2
 8009d26:	3302      	addeq	r3, #2
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	db05      	blt.n	8009d38 <__hi0bits+0x38>
 8009d2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d30:	f103 0301 	add.w	r3, r3, #1
 8009d34:	bf08      	it	eq
 8009d36:	2320      	moveq	r3, #32
 8009d38:	4618      	mov	r0, r3
 8009d3a:	4770      	bx	lr
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e7e4      	b.n	8009d0a <__hi0bits+0xa>

08009d40 <__lo0bits>:
 8009d40:	6803      	ldr	r3, [r0, #0]
 8009d42:	f013 0207 	ands.w	r2, r3, #7
 8009d46:	4601      	mov	r1, r0
 8009d48:	d00b      	beq.n	8009d62 <__lo0bits+0x22>
 8009d4a:	07da      	lsls	r2, r3, #31
 8009d4c:	d423      	bmi.n	8009d96 <__lo0bits+0x56>
 8009d4e:	0798      	lsls	r0, r3, #30
 8009d50:	bf49      	itett	mi
 8009d52:	085b      	lsrmi	r3, r3, #1
 8009d54:	089b      	lsrpl	r3, r3, #2
 8009d56:	2001      	movmi	r0, #1
 8009d58:	600b      	strmi	r3, [r1, #0]
 8009d5a:	bf5c      	itt	pl
 8009d5c:	600b      	strpl	r3, [r1, #0]
 8009d5e:	2002      	movpl	r0, #2
 8009d60:	4770      	bx	lr
 8009d62:	b298      	uxth	r0, r3
 8009d64:	b9a8      	cbnz	r0, 8009d92 <__lo0bits+0x52>
 8009d66:	0c1b      	lsrs	r3, r3, #16
 8009d68:	2010      	movs	r0, #16
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	b90a      	cbnz	r2, 8009d72 <__lo0bits+0x32>
 8009d6e:	3008      	adds	r0, #8
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	071a      	lsls	r2, r3, #28
 8009d74:	bf04      	itt	eq
 8009d76:	091b      	lsreq	r3, r3, #4
 8009d78:	3004      	addeq	r0, #4
 8009d7a:	079a      	lsls	r2, r3, #30
 8009d7c:	bf04      	itt	eq
 8009d7e:	089b      	lsreq	r3, r3, #2
 8009d80:	3002      	addeq	r0, #2
 8009d82:	07da      	lsls	r2, r3, #31
 8009d84:	d403      	bmi.n	8009d8e <__lo0bits+0x4e>
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	f100 0001 	add.w	r0, r0, #1
 8009d8c:	d005      	beq.n	8009d9a <__lo0bits+0x5a>
 8009d8e:	600b      	str	r3, [r1, #0]
 8009d90:	4770      	bx	lr
 8009d92:	4610      	mov	r0, r2
 8009d94:	e7e9      	b.n	8009d6a <__lo0bits+0x2a>
 8009d96:	2000      	movs	r0, #0
 8009d98:	4770      	bx	lr
 8009d9a:	2020      	movs	r0, #32
 8009d9c:	4770      	bx	lr
	...

08009da0 <__i2b>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	460c      	mov	r4, r1
 8009da4:	2101      	movs	r1, #1
 8009da6:	f7ff ff03 	bl	8009bb0 <_Balloc>
 8009daa:	4602      	mov	r2, r0
 8009dac:	b928      	cbnz	r0, 8009dba <__i2b+0x1a>
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <__i2b+0x24>)
 8009db0:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <__i2b+0x28>)
 8009db2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009db6:	f000 fb85 	bl	800a4c4 <__assert_func>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	6144      	str	r4, [r0, #20]
 8009dbe:	6103      	str	r3, [r0, #16]
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	bf00      	nop
 8009dc4:	0800b15f 	.word	0x0800b15f
 8009dc8:	0800b170 	.word	0x0800b170

08009dcc <__multiply>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	4691      	mov	r9, r2
 8009dd2:	690a      	ldr	r2, [r1, #16]
 8009dd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	bfb8      	it	lt
 8009ddc:	460b      	movlt	r3, r1
 8009dde:	460c      	mov	r4, r1
 8009de0:	bfbc      	itt	lt
 8009de2:	464c      	movlt	r4, r9
 8009de4:	4699      	movlt	r9, r3
 8009de6:	6927      	ldr	r7, [r4, #16]
 8009de8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dec:	68a3      	ldr	r3, [r4, #8]
 8009dee:	6861      	ldr	r1, [r4, #4]
 8009df0:	eb07 060a 	add.w	r6, r7, sl
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	b085      	sub	sp, #20
 8009df8:	bfb8      	it	lt
 8009dfa:	3101      	addlt	r1, #1
 8009dfc:	f7ff fed8 	bl	8009bb0 <_Balloc>
 8009e00:	b930      	cbnz	r0, 8009e10 <__multiply+0x44>
 8009e02:	4602      	mov	r2, r0
 8009e04:	4b44      	ldr	r3, [pc, #272]	; (8009f18 <__multiply+0x14c>)
 8009e06:	4845      	ldr	r0, [pc, #276]	; (8009f1c <__multiply+0x150>)
 8009e08:	f240 115d 	movw	r1, #349	; 0x15d
 8009e0c:	f000 fb5a 	bl	800a4c4 <__assert_func>
 8009e10:	f100 0514 	add.w	r5, r0, #20
 8009e14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e18:	462b      	mov	r3, r5
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4543      	cmp	r3, r8
 8009e1e:	d321      	bcc.n	8009e64 <__multiply+0x98>
 8009e20:	f104 0314 	add.w	r3, r4, #20
 8009e24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e28:	f109 0314 	add.w	r3, r9, #20
 8009e2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e30:	9202      	str	r2, [sp, #8]
 8009e32:	1b3a      	subs	r2, r7, r4
 8009e34:	3a15      	subs	r2, #21
 8009e36:	f022 0203 	bic.w	r2, r2, #3
 8009e3a:	3204      	adds	r2, #4
 8009e3c:	f104 0115 	add.w	r1, r4, #21
 8009e40:	428f      	cmp	r7, r1
 8009e42:	bf38      	it	cc
 8009e44:	2204      	movcc	r2, #4
 8009e46:	9201      	str	r2, [sp, #4]
 8009e48:	9a02      	ldr	r2, [sp, #8]
 8009e4a:	9303      	str	r3, [sp, #12]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d80c      	bhi.n	8009e6a <__multiply+0x9e>
 8009e50:	2e00      	cmp	r6, #0
 8009e52:	dd03      	ble.n	8009e5c <__multiply+0x90>
 8009e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d05a      	beq.n	8009f12 <__multiply+0x146>
 8009e5c:	6106      	str	r6, [r0, #16]
 8009e5e:	b005      	add	sp, #20
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	f843 2b04 	str.w	r2, [r3], #4
 8009e68:	e7d8      	b.n	8009e1c <__multiply+0x50>
 8009e6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e6e:	f1ba 0f00 	cmp.w	sl, #0
 8009e72:	d024      	beq.n	8009ebe <__multiply+0xf2>
 8009e74:	f104 0e14 	add.w	lr, r4, #20
 8009e78:	46a9      	mov	r9, r5
 8009e7a:	f04f 0c00 	mov.w	ip, #0
 8009e7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e82:	f8d9 1000 	ldr.w	r1, [r9]
 8009e86:	fa1f fb82 	uxth.w	fp, r2
 8009e8a:	b289      	uxth	r1, r1
 8009e8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e94:	f8d9 2000 	ldr.w	r2, [r9]
 8009e98:	4461      	add	r1, ip
 8009e9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ea6:	b289      	uxth	r1, r1
 8009ea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009eac:	4577      	cmp	r7, lr
 8009eae:	f849 1b04 	str.w	r1, [r9], #4
 8009eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eb6:	d8e2      	bhi.n	8009e7e <__multiply+0xb2>
 8009eb8:	9a01      	ldr	r2, [sp, #4]
 8009eba:	f845 c002 	str.w	ip, [r5, r2]
 8009ebe:	9a03      	ldr	r2, [sp, #12]
 8009ec0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	f1b9 0f00 	cmp.w	r9, #0
 8009eca:	d020      	beq.n	8009f0e <__multiply+0x142>
 8009ecc:	6829      	ldr	r1, [r5, #0]
 8009ece:	f104 0c14 	add.w	ip, r4, #20
 8009ed2:	46ae      	mov	lr, r5
 8009ed4:	f04f 0a00 	mov.w	sl, #0
 8009ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8009edc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ee0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ee4:	4492      	add	sl, r2
 8009ee6:	b289      	uxth	r1, r1
 8009ee8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009eec:	f84e 1b04 	str.w	r1, [lr], #4
 8009ef0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ef4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ef8:	0c12      	lsrs	r2, r2, #16
 8009efa:	fb09 1102 	mla	r1, r9, r2, r1
 8009efe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f02:	4567      	cmp	r7, ip
 8009f04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f08:	d8e6      	bhi.n	8009ed8 <__multiply+0x10c>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	50a9      	str	r1, [r5, r2]
 8009f0e:	3504      	adds	r5, #4
 8009f10:	e79a      	b.n	8009e48 <__multiply+0x7c>
 8009f12:	3e01      	subs	r6, #1
 8009f14:	e79c      	b.n	8009e50 <__multiply+0x84>
 8009f16:	bf00      	nop
 8009f18:	0800b15f 	.word	0x0800b15f
 8009f1c:	0800b170 	.word	0x0800b170

08009f20 <__pow5mult>:
 8009f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f24:	4615      	mov	r5, r2
 8009f26:	f012 0203 	ands.w	r2, r2, #3
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	d007      	beq.n	8009f40 <__pow5mult+0x20>
 8009f30:	4c25      	ldr	r4, [pc, #148]	; (8009fc8 <__pow5mult+0xa8>)
 8009f32:	3a01      	subs	r2, #1
 8009f34:	2300      	movs	r3, #0
 8009f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f3a:	f7ff fe9b 	bl	8009c74 <__multadd>
 8009f3e:	4607      	mov	r7, r0
 8009f40:	10ad      	asrs	r5, r5, #2
 8009f42:	d03d      	beq.n	8009fc0 <__pow5mult+0xa0>
 8009f44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f46:	b97c      	cbnz	r4, 8009f68 <__pow5mult+0x48>
 8009f48:	2010      	movs	r0, #16
 8009f4a:	f7ff fe1b 	bl	8009b84 <malloc>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	6270      	str	r0, [r6, #36]	; 0x24
 8009f52:	b928      	cbnz	r0, 8009f60 <__pow5mult+0x40>
 8009f54:	4b1d      	ldr	r3, [pc, #116]	; (8009fcc <__pow5mult+0xac>)
 8009f56:	481e      	ldr	r0, [pc, #120]	; (8009fd0 <__pow5mult+0xb0>)
 8009f58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f5c:	f000 fab2 	bl	800a4c4 <__assert_func>
 8009f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f64:	6004      	str	r4, [r0, #0]
 8009f66:	60c4      	str	r4, [r0, #12]
 8009f68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f70:	b94c      	cbnz	r4, 8009f86 <__pow5mult+0x66>
 8009f72:	f240 2171 	movw	r1, #625	; 0x271
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ff12 	bl	8009da0 <__i2b>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f82:	4604      	mov	r4, r0
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	07eb      	lsls	r3, r5, #31
 8009f8c:	d50a      	bpl.n	8009fa4 <__pow5mult+0x84>
 8009f8e:	4639      	mov	r1, r7
 8009f90:	4622      	mov	r2, r4
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ff1a 	bl	8009dcc <__multiply>
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7ff fe47 	bl	8009c30 <_Bfree>
 8009fa2:	4647      	mov	r7, r8
 8009fa4:	106d      	asrs	r5, r5, #1
 8009fa6:	d00b      	beq.n	8009fc0 <__pow5mult+0xa0>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	b938      	cbnz	r0, 8009fbc <__pow5mult+0x9c>
 8009fac:	4622      	mov	r2, r4
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7ff ff0b 	bl	8009dcc <__multiply>
 8009fb6:	6020      	str	r0, [r4, #0]
 8009fb8:	f8c0 9000 	str.w	r9, [r0]
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	e7e4      	b.n	8009f8a <__pow5mult+0x6a>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc6:	bf00      	nop
 8009fc8:	0800b2c0 	.word	0x0800b2c0
 8009fcc:	0800b0ed 	.word	0x0800b0ed
 8009fd0:	0800b170 	.word	0x0800b170

08009fd4 <__lshift>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	6849      	ldr	r1, [r1, #4]
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	4691      	mov	r9, r2
 8009fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fec:	f108 0601 	add.w	r6, r8, #1
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	db0b      	blt.n	800a00c <__lshift+0x38>
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff fddb 	bl	8009bb0 <_Balloc>
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	b948      	cbnz	r0, 800a012 <__lshift+0x3e>
 8009ffe:	4602      	mov	r2, r0
 800a000:	4b2a      	ldr	r3, [pc, #168]	; (800a0ac <__lshift+0xd8>)
 800a002:	482b      	ldr	r0, [pc, #172]	; (800a0b0 <__lshift+0xdc>)
 800a004:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a008:	f000 fa5c 	bl	800a4c4 <__assert_func>
 800a00c:	3101      	adds	r1, #1
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	e7ee      	b.n	8009ff0 <__lshift+0x1c>
 800a012:	2300      	movs	r3, #0
 800a014:	f100 0114 	add.w	r1, r0, #20
 800a018:	f100 0210 	add.w	r2, r0, #16
 800a01c:	4618      	mov	r0, r3
 800a01e:	4553      	cmp	r3, sl
 800a020:	db37      	blt.n	800a092 <__lshift+0xbe>
 800a022:	6920      	ldr	r0, [r4, #16]
 800a024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a028:	f104 0314 	add.w	r3, r4, #20
 800a02c:	f019 091f 	ands.w	r9, r9, #31
 800a030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a034:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a038:	d02f      	beq.n	800a09a <__lshift+0xc6>
 800a03a:	f1c9 0e20 	rsb	lr, r9, #32
 800a03e:	468a      	mov	sl, r1
 800a040:	f04f 0c00 	mov.w	ip, #0
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	fa02 f209 	lsl.w	r2, r2, r9
 800a04a:	ea42 020c 	orr.w	r2, r2, ip
 800a04e:	f84a 2b04 	str.w	r2, [sl], #4
 800a052:	f853 2b04 	ldr.w	r2, [r3], #4
 800a056:	4298      	cmp	r0, r3
 800a058:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a05c:	d8f2      	bhi.n	800a044 <__lshift+0x70>
 800a05e:	1b03      	subs	r3, r0, r4
 800a060:	3b15      	subs	r3, #21
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	3304      	adds	r3, #4
 800a068:	f104 0215 	add.w	r2, r4, #21
 800a06c:	4290      	cmp	r0, r2
 800a06e:	bf38      	it	cc
 800a070:	2304      	movcc	r3, #4
 800a072:	f841 c003 	str.w	ip, [r1, r3]
 800a076:	f1bc 0f00 	cmp.w	ip, #0
 800a07a:	d001      	beq.n	800a080 <__lshift+0xac>
 800a07c:	f108 0602 	add.w	r6, r8, #2
 800a080:	3e01      	subs	r6, #1
 800a082:	4638      	mov	r0, r7
 800a084:	612e      	str	r6, [r5, #16]
 800a086:	4621      	mov	r1, r4
 800a088:	f7ff fdd2 	bl	8009c30 <_Bfree>
 800a08c:	4628      	mov	r0, r5
 800a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a092:	f842 0f04 	str.w	r0, [r2, #4]!
 800a096:	3301      	adds	r3, #1
 800a098:	e7c1      	b.n	800a01e <__lshift+0x4a>
 800a09a:	3904      	subs	r1, #4
 800a09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0a4:	4298      	cmp	r0, r3
 800a0a6:	d8f9      	bhi.n	800a09c <__lshift+0xc8>
 800a0a8:	e7ea      	b.n	800a080 <__lshift+0xac>
 800a0aa:	bf00      	nop
 800a0ac:	0800b15f 	.word	0x0800b15f
 800a0b0:	0800b170 	.word	0x0800b170

0800a0b4 <__mcmp>:
 800a0b4:	b530      	push	{r4, r5, lr}
 800a0b6:	6902      	ldr	r2, [r0, #16]
 800a0b8:	690c      	ldr	r4, [r1, #16]
 800a0ba:	1b12      	subs	r2, r2, r4
 800a0bc:	d10e      	bne.n	800a0dc <__mcmp+0x28>
 800a0be:	f100 0314 	add.w	r3, r0, #20
 800a0c2:	3114      	adds	r1, #20
 800a0c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0d4:	42a5      	cmp	r5, r4
 800a0d6:	d003      	beq.n	800a0e0 <__mcmp+0x2c>
 800a0d8:	d305      	bcc.n	800a0e6 <__mcmp+0x32>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4610      	mov	r0, r2
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	4283      	cmp	r3, r0
 800a0e2:	d3f3      	bcc.n	800a0cc <__mcmp+0x18>
 800a0e4:	e7fa      	b.n	800a0dc <__mcmp+0x28>
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	e7f7      	b.n	800a0dc <__mcmp+0x28>

0800a0ec <__mdiff>:
 800a0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4690      	mov	r8, r2
 800a0fa:	f7ff ffdb 	bl	800a0b4 <__mcmp>
 800a0fe:	1e05      	subs	r5, r0, #0
 800a100:	d110      	bne.n	800a124 <__mdiff+0x38>
 800a102:	4629      	mov	r1, r5
 800a104:	4630      	mov	r0, r6
 800a106:	f7ff fd53 	bl	8009bb0 <_Balloc>
 800a10a:	b930      	cbnz	r0, 800a11a <__mdiff+0x2e>
 800a10c:	4b3a      	ldr	r3, [pc, #232]	; (800a1f8 <__mdiff+0x10c>)
 800a10e:	4602      	mov	r2, r0
 800a110:	f240 2132 	movw	r1, #562	; 0x232
 800a114:	4839      	ldr	r0, [pc, #228]	; (800a1fc <__mdiff+0x110>)
 800a116:	f000 f9d5 	bl	800a4c4 <__assert_func>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	bfa4      	itt	ge
 800a126:	4643      	movge	r3, r8
 800a128:	46a0      	movge	r8, r4
 800a12a:	4630      	mov	r0, r6
 800a12c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a130:	bfa6      	itte	ge
 800a132:	461c      	movge	r4, r3
 800a134:	2500      	movge	r5, #0
 800a136:	2501      	movlt	r5, #1
 800a138:	f7ff fd3a 	bl	8009bb0 <_Balloc>
 800a13c:	b920      	cbnz	r0, 800a148 <__mdiff+0x5c>
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <__mdiff+0x10c>)
 800a140:	4602      	mov	r2, r0
 800a142:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a146:	e7e5      	b.n	800a114 <__mdiff+0x28>
 800a148:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a14c:	6926      	ldr	r6, [r4, #16]
 800a14e:	60c5      	str	r5, [r0, #12]
 800a150:	f104 0914 	add.w	r9, r4, #20
 800a154:	f108 0514 	add.w	r5, r8, #20
 800a158:	f100 0e14 	add.w	lr, r0, #20
 800a15c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a160:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a164:	f108 0210 	add.w	r2, r8, #16
 800a168:	46f2      	mov	sl, lr
 800a16a:	2100      	movs	r1, #0
 800a16c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a170:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a174:	fa1f f883 	uxth.w	r8, r3
 800a178:	fa11 f18b 	uxtah	r1, r1, fp
 800a17c:	0c1b      	lsrs	r3, r3, #16
 800a17e:	eba1 0808 	sub.w	r8, r1, r8
 800a182:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a186:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a18a:	fa1f f888 	uxth.w	r8, r8
 800a18e:	1419      	asrs	r1, r3, #16
 800a190:	454e      	cmp	r6, r9
 800a192:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a196:	f84a 3b04 	str.w	r3, [sl], #4
 800a19a:	d8e7      	bhi.n	800a16c <__mdiff+0x80>
 800a19c:	1b33      	subs	r3, r6, r4
 800a19e:	3b15      	subs	r3, #21
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	3415      	adds	r4, #21
 800a1a8:	42a6      	cmp	r6, r4
 800a1aa:	bf38      	it	cc
 800a1ac:	2304      	movcc	r3, #4
 800a1ae:	441d      	add	r5, r3
 800a1b0:	4473      	add	r3, lr
 800a1b2:	469e      	mov	lr, r3
 800a1b4:	462e      	mov	r6, r5
 800a1b6:	4566      	cmp	r6, ip
 800a1b8:	d30e      	bcc.n	800a1d8 <__mdiff+0xec>
 800a1ba:	f10c 0203 	add.w	r2, ip, #3
 800a1be:	1b52      	subs	r2, r2, r5
 800a1c0:	f022 0203 	bic.w	r2, r2, #3
 800a1c4:	3d03      	subs	r5, #3
 800a1c6:	45ac      	cmp	ip, r5
 800a1c8:	bf38      	it	cc
 800a1ca:	2200      	movcc	r2, #0
 800a1cc:	441a      	add	r2, r3
 800a1ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1d2:	b17b      	cbz	r3, 800a1f4 <__mdiff+0x108>
 800a1d4:	6107      	str	r7, [r0, #16]
 800a1d6:	e7a3      	b.n	800a120 <__mdiff+0x34>
 800a1d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1dc:	fa11 f288 	uxtah	r2, r1, r8
 800a1e0:	1414      	asrs	r4, r2, #16
 800a1e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1e6:	b292      	uxth	r2, r2
 800a1e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1ec:	f84e 2b04 	str.w	r2, [lr], #4
 800a1f0:	1421      	asrs	r1, r4, #16
 800a1f2:	e7e0      	b.n	800a1b6 <__mdiff+0xca>
 800a1f4:	3f01      	subs	r7, #1
 800a1f6:	e7ea      	b.n	800a1ce <__mdiff+0xe2>
 800a1f8:	0800b15f 	.word	0x0800b15f
 800a1fc:	0800b170 	.word	0x0800b170

0800a200 <__d2b>:
 800a200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a204:	4689      	mov	r9, r1
 800a206:	2101      	movs	r1, #1
 800a208:	ec57 6b10 	vmov	r6, r7, d0
 800a20c:	4690      	mov	r8, r2
 800a20e:	f7ff fccf 	bl	8009bb0 <_Balloc>
 800a212:	4604      	mov	r4, r0
 800a214:	b930      	cbnz	r0, 800a224 <__d2b+0x24>
 800a216:	4602      	mov	r2, r0
 800a218:	4b25      	ldr	r3, [pc, #148]	; (800a2b0 <__d2b+0xb0>)
 800a21a:	4826      	ldr	r0, [pc, #152]	; (800a2b4 <__d2b+0xb4>)
 800a21c:	f240 310a 	movw	r1, #778	; 0x30a
 800a220:	f000 f950 	bl	800a4c4 <__assert_func>
 800a224:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a22c:	bb35      	cbnz	r5, 800a27c <__d2b+0x7c>
 800a22e:	2e00      	cmp	r6, #0
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	d028      	beq.n	800a286 <__d2b+0x86>
 800a234:	4668      	mov	r0, sp
 800a236:	9600      	str	r6, [sp, #0]
 800a238:	f7ff fd82 	bl	8009d40 <__lo0bits>
 800a23c:	9900      	ldr	r1, [sp, #0]
 800a23e:	b300      	cbz	r0, 800a282 <__d2b+0x82>
 800a240:	9a01      	ldr	r2, [sp, #4]
 800a242:	f1c0 0320 	rsb	r3, r0, #32
 800a246:	fa02 f303 	lsl.w	r3, r2, r3
 800a24a:	430b      	orrs	r3, r1
 800a24c:	40c2      	lsrs	r2, r0
 800a24e:	6163      	str	r3, [r4, #20]
 800a250:	9201      	str	r2, [sp, #4]
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	61a3      	str	r3, [r4, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	bf14      	ite	ne
 800a25a:	2202      	movne	r2, #2
 800a25c:	2201      	moveq	r2, #1
 800a25e:	6122      	str	r2, [r4, #16]
 800a260:	b1d5      	cbz	r5, 800a298 <__d2b+0x98>
 800a262:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a266:	4405      	add	r5, r0
 800a268:	f8c9 5000 	str.w	r5, [r9]
 800a26c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a270:	f8c8 0000 	str.w	r0, [r8]
 800a274:	4620      	mov	r0, r4
 800a276:	b003      	add	sp, #12
 800a278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a280:	e7d5      	b.n	800a22e <__d2b+0x2e>
 800a282:	6161      	str	r1, [r4, #20]
 800a284:	e7e5      	b.n	800a252 <__d2b+0x52>
 800a286:	a801      	add	r0, sp, #4
 800a288:	f7ff fd5a 	bl	8009d40 <__lo0bits>
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	6163      	str	r3, [r4, #20]
 800a290:	2201      	movs	r2, #1
 800a292:	6122      	str	r2, [r4, #16]
 800a294:	3020      	adds	r0, #32
 800a296:	e7e3      	b.n	800a260 <__d2b+0x60>
 800a298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a29c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2a0:	f8c9 0000 	str.w	r0, [r9]
 800a2a4:	6918      	ldr	r0, [r3, #16]
 800a2a6:	f7ff fd2b 	bl	8009d00 <__hi0bits>
 800a2aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ae:	e7df      	b.n	800a270 <__d2b+0x70>
 800a2b0:	0800b15f 	.word	0x0800b15f
 800a2b4:	0800b170 	.word	0x0800b170

0800a2b8 <_calloc_r>:
 800a2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ba:	fba1 2402 	umull	r2, r4, r1, r2
 800a2be:	b94c      	cbnz	r4, 800a2d4 <_calloc_r+0x1c>
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	9201      	str	r2, [sp, #4]
 800a2c4:	f000 f87a 	bl	800a3bc <_malloc_r>
 800a2c8:	9a01      	ldr	r2, [sp, #4]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	b930      	cbnz	r0, 800a2dc <_calloc_r+0x24>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	b003      	add	sp, #12
 800a2d2:	bd30      	pop	{r4, r5, pc}
 800a2d4:	220c      	movs	r2, #12
 800a2d6:	6002      	str	r2, [r0, #0]
 800a2d8:	2500      	movs	r5, #0
 800a2da:	e7f8      	b.n	800a2ce <_calloc_r+0x16>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f7fe f961 	bl	80085a4 <memset>
 800a2e2:	e7f4      	b.n	800a2ce <_calloc_r+0x16>

0800a2e4 <_free_r>:
 800a2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	d044      	beq.n	800a374 <_free_r+0x90>
 800a2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ee:	9001      	str	r0, [sp, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2f6:	bfb8      	it	lt
 800a2f8:	18e4      	addlt	r4, r4, r3
 800a2fa:	f000 f925 	bl	800a548 <__malloc_lock>
 800a2fe:	4a1e      	ldr	r2, [pc, #120]	; (800a378 <_free_r+0x94>)
 800a300:	9801      	ldr	r0, [sp, #4]
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	b933      	cbnz	r3, 800a314 <_free_r+0x30>
 800a306:	6063      	str	r3, [r4, #4]
 800a308:	6014      	str	r4, [r2, #0]
 800a30a:	b003      	add	sp, #12
 800a30c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a310:	f000 b920 	b.w	800a554 <__malloc_unlock>
 800a314:	42a3      	cmp	r3, r4
 800a316:	d908      	bls.n	800a32a <_free_r+0x46>
 800a318:	6825      	ldr	r5, [r4, #0]
 800a31a:	1961      	adds	r1, r4, r5
 800a31c:	428b      	cmp	r3, r1
 800a31e:	bf01      	itttt	eq
 800a320:	6819      	ldreq	r1, [r3, #0]
 800a322:	685b      	ldreq	r3, [r3, #4]
 800a324:	1949      	addeq	r1, r1, r5
 800a326:	6021      	streq	r1, [r4, #0]
 800a328:	e7ed      	b.n	800a306 <_free_r+0x22>
 800a32a:	461a      	mov	r2, r3
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	b10b      	cbz	r3, 800a334 <_free_r+0x50>
 800a330:	42a3      	cmp	r3, r4
 800a332:	d9fa      	bls.n	800a32a <_free_r+0x46>
 800a334:	6811      	ldr	r1, [r2, #0]
 800a336:	1855      	adds	r5, r2, r1
 800a338:	42a5      	cmp	r5, r4
 800a33a:	d10b      	bne.n	800a354 <_free_r+0x70>
 800a33c:	6824      	ldr	r4, [r4, #0]
 800a33e:	4421      	add	r1, r4
 800a340:	1854      	adds	r4, r2, r1
 800a342:	42a3      	cmp	r3, r4
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	d1e0      	bne.n	800a30a <_free_r+0x26>
 800a348:	681c      	ldr	r4, [r3, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	6053      	str	r3, [r2, #4]
 800a34e:	4421      	add	r1, r4
 800a350:	6011      	str	r1, [r2, #0]
 800a352:	e7da      	b.n	800a30a <_free_r+0x26>
 800a354:	d902      	bls.n	800a35c <_free_r+0x78>
 800a356:	230c      	movs	r3, #12
 800a358:	6003      	str	r3, [r0, #0]
 800a35a:	e7d6      	b.n	800a30a <_free_r+0x26>
 800a35c:	6825      	ldr	r5, [r4, #0]
 800a35e:	1961      	adds	r1, r4, r5
 800a360:	428b      	cmp	r3, r1
 800a362:	bf04      	itt	eq
 800a364:	6819      	ldreq	r1, [r3, #0]
 800a366:	685b      	ldreq	r3, [r3, #4]
 800a368:	6063      	str	r3, [r4, #4]
 800a36a:	bf04      	itt	eq
 800a36c:	1949      	addeq	r1, r1, r5
 800a36e:	6021      	streq	r1, [r4, #0]
 800a370:	6054      	str	r4, [r2, #4]
 800a372:	e7ca      	b.n	800a30a <_free_r+0x26>
 800a374:	b003      	add	sp, #12
 800a376:	bd30      	pop	{r4, r5, pc}
 800a378:	200005bc 	.word	0x200005bc

0800a37c <sbrk_aligned>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	4e0e      	ldr	r6, [pc, #56]	; (800a3b8 <sbrk_aligned+0x3c>)
 800a380:	460c      	mov	r4, r1
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	4605      	mov	r5, r0
 800a386:	b911      	cbnz	r1, 800a38e <sbrk_aligned+0x12>
 800a388:	f000 f88c 	bl	800a4a4 <_sbrk_r>
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f000 f887 	bl	800a4a4 <_sbrk_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d00a      	beq.n	800a3b0 <sbrk_aligned+0x34>
 800a39a:	1cc4      	adds	r4, r0, #3
 800a39c:	f024 0403 	bic.w	r4, r4, #3
 800a3a0:	42a0      	cmp	r0, r4
 800a3a2:	d007      	beq.n	800a3b4 <sbrk_aligned+0x38>
 800a3a4:	1a21      	subs	r1, r4, r0
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f87c 	bl	800a4a4 <_sbrk_r>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d101      	bne.n	800a3b4 <sbrk_aligned+0x38>
 800a3b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	200005c0 	.word	0x200005c0

0800a3bc <_malloc_r>:
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	1ccd      	adds	r5, r1, #3
 800a3c2:	f025 0503 	bic.w	r5, r5, #3
 800a3c6:	3508      	adds	r5, #8
 800a3c8:	2d0c      	cmp	r5, #12
 800a3ca:	bf38      	it	cc
 800a3cc:	250c      	movcc	r5, #12
 800a3ce:	2d00      	cmp	r5, #0
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	db01      	blt.n	800a3d8 <_malloc_r+0x1c>
 800a3d4:	42a9      	cmp	r1, r5
 800a3d6:	d905      	bls.n	800a3e4 <_malloc_r+0x28>
 800a3d8:	230c      	movs	r3, #12
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	2600      	movs	r6, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	4e2e      	ldr	r6, [pc, #184]	; (800a4a0 <_malloc_r+0xe4>)
 800a3e6:	f000 f8af 	bl	800a548 <__malloc_lock>
 800a3ea:	6833      	ldr	r3, [r6, #0]
 800a3ec:	461c      	mov	r4, r3
 800a3ee:	bb34      	cbnz	r4, 800a43e <_malloc_r+0x82>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7ff ffc2 	bl	800a37c <sbrk_aligned>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	d14d      	bne.n	800a49a <_malloc_r+0xde>
 800a3fe:	6834      	ldr	r4, [r6, #0]
 800a400:	4626      	mov	r6, r4
 800a402:	2e00      	cmp	r6, #0
 800a404:	d140      	bne.n	800a488 <_malloc_r+0xcc>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	4631      	mov	r1, r6
 800a40a:	4638      	mov	r0, r7
 800a40c:	eb04 0803 	add.w	r8, r4, r3
 800a410:	f000 f848 	bl	800a4a4 <_sbrk_r>
 800a414:	4580      	cmp	r8, r0
 800a416:	d13a      	bne.n	800a48e <_malloc_r+0xd2>
 800a418:	6821      	ldr	r1, [r4, #0]
 800a41a:	3503      	adds	r5, #3
 800a41c:	1a6d      	subs	r5, r5, r1
 800a41e:	f025 0503 	bic.w	r5, r5, #3
 800a422:	3508      	adds	r5, #8
 800a424:	2d0c      	cmp	r5, #12
 800a426:	bf38      	it	cc
 800a428:	250c      	movcc	r5, #12
 800a42a:	4629      	mov	r1, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ffa5 	bl	800a37c <sbrk_aligned>
 800a432:	3001      	adds	r0, #1
 800a434:	d02b      	beq.n	800a48e <_malloc_r+0xd2>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	442b      	add	r3, r5
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	e00e      	b.n	800a45c <_malloc_r+0xa0>
 800a43e:	6822      	ldr	r2, [r4, #0]
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	d41e      	bmi.n	800a482 <_malloc_r+0xc6>
 800a444:	2a0b      	cmp	r2, #11
 800a446:	d916      	bls.n	800a476 <_malloc_r+0xba>
 800a448:	1961      	adds	r1, r4, r5
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6025      	str	r5, [r4, #0]
 800a44e:	bf18      	it	ne
 800a450:	6059      	strne	r1, [r3, #4]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	bf08      	it	eq
 800a456:	6031      	streq	r1, [r6, #0]
 800a458:	5162      	str	r2, [r4, r5]
 800a45a:	604b      	str	r3, [r1, #4]
 800a45c:	4638      	mov	r0, r7
 800a45e:	f104 060b 	add.w	r6, r4, #11
 800a462:	f000 f877 	bl	800a554 <__malloc_unlock>
 800a466:	f026 0607 	bic.w	r6, r6, #7
 800a46a:	1d23      	adds	r3, r4, #4
 800a46c:	1af2      	subs	r2, r6, r3
 800a46e:	d0b6      	beq.n	800a3de <_malloc_r+0x22>
 800a470:	1b9b      	subs	r3, r3, r6
 800a472:	50a3      	str	r3, [r4, r2]
 800a474:	e7b3      	b.n	800a3de <_malloc_r+0x22>
 800a476:	6862      	ldr	r2, [r4, #4]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	bf0c      	ite	eq
 800a47c:	6032      	streq	r2, [r6, #0]
 800a47e:	605a      	strne	r2, [r3, #4]
 800a480:	e7ec      	b.n	800a45c <_malloc_r+0xa0>
 800a482:	4623      	mov	r3, r4
 800a484:	6864      	ldr	r4, [r4, #4]
 800a486:	e7b2      	b.n	800a3ee <_malloc_r+0x32>
 800a488:	4634      	mov	r4, r6
 800a48a:	6876      	ldr	r6, [r6, #4]
 800a48c:	e7b9      	b.n	800a402 <_malloc_r+0x46>
 800a48e:	230c      	movs	r3, #12
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	4638      	mov	r0, r7
 800a494:	f000 f85e 	bl	800a554 <__malloc_unlock>
 800a498:	e7a1      	b.n	800a3de <_malloc_r+0x22>
 800a49a:	6025      	str	r5, [r4, #0]
 800a49c:	e7de      	b.n	800a45c <_malloc_r+0xa0>
 800a49e:	bf00      	nop
 800a4a0:	200005bc 	.word	0x200005bc

0800a4a4 <_sbrk_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_sbrk_r+0x1c>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f7f8 f8dc 	bl	800266c <_sbrk>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_sbrk_r+0x1a>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_sbrk_r+0x1a>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200005c4 	.word	0x200005c4

0800a4c4 <__assert_func>:
 800a4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <__assert_func+0x2c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	68d8      	ldr	r0, [r3, #12]
 800a4d2:	b14c      	cbz	r4, 800a4e8 <__assert_func+0x24>
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <__assert_func+0x30>)
 800a4d6:	9100      	str	r1, [sp, #0]
 800a4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4dc:	4906      	ldr	r1, [pc, #24]	; (800a4f8 <__assert_func+0x34>)
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f000 f80e 	bl	800a500 <fiprintf>
 800a4e4:	f000 fa64 	bl	800a9b0 <abort>
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <__assert_func+0x38>)
 800a4ea:	461c      	mov	r4, r3
 800a4ec:	e7f3      	b.n	800a4d6 <__assert_func+0x12>
 800a4ee:	bf00      	nop
 800a4f0:	20000018 	.word	0x20000018
 800a4f4:	0800b2cc 	.word	0x0800b2cc
 800a4f8:	0800b2d9 	.word	0x0800b2d9
 800a4fc:	0800b307 	.word	0x0800b307

0800a500 <fiprintf>:
 800a500:	b40e      	push	{r1, r2, r3}
 800a502:	b503      	push	{r0, r1, lr}
 800a504:	4601      	mov	r1, r0
 800a506:	ab03      	add	r3, sp, #12
 800a508:	4805      	ldr	r0, [pc, #20]	; (800a520 <fiprintf+0x20>)
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	6800      	ldr	r0, [r0, #0]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f000 f84f 	bl	800a5b4 <_vfiprintf_r>
 800a516:	b002      	add	sp, #8
 800a518:	f85d eb04 	ldr.w	lr, [sp], #4
 800a51c:	b003      	add	sp, #12
 800a51e:	4770      	bx	lr
 800a520:	20000018 	.word	0x20000018

0800a524 <__ascii_mbtowc>:
 800a524:	b082      	sub	sp, #8
 800a526:	b901      	cbnz	r1, 800a52a <__ascii_mbtowc+0x6>
 800a528:	a901      	add	r1, sp, #4
 800a52a:	b142      	cbz	r2, 800a53e <__ascii_mbtowc+0x1a>
 800a52c:	b14b      	cbz	r3, 800a542 <__ascii_mbtowc+0x1e>
 800a52e:	7813      	ldrb	r3, [r2, #0]
 800a530:	600b      	str	r3, [r1, #0]
 800a532:	7812      	ldrb	r2, [r2, #0]
 800a534:	1e10      	subs	r0, r2, #0
 800a536:	bf18      	it	ne
 800a538:	2001      	movne	r0, #1
 800a53a:	b002      	add	sp, #8
 800a53c:	4770      	bx	lr
 800a53e:	4610      	mov	r0, r2
 800a540:	e7fb      	b.n	800a53a <__ascii_mbtowc+0x16>
 800a542:	f06f 0001 	mvn.w	r0, #1
 800a546:	e7f8      	b.n	800a53a <__ascii_mbtowc+0x16>

0800a548 <__malloc_lock>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__malloc_lock+0x8>)
 800a54a:	f000 bbf1 	b.w	800ad30 <__retarget_lock_acquire_recursive>
 800a54e:	bf00      	nop
 800a550:	200005c8 	.word	0x200005c8

0800a554 <__malloc_unlock>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__malloc_unlock+0x8>)
 800a556:	f000 bbec 	b.w	800ad32 <__retarget_lock_release_recursive>
 800a55a:	bf00      	nop
 800a55c:	200005c8 	.word	0x200005c8

0800a560 <__sfputc_r>:
 800a560:	6893      	ldr	r3, [r2, #8]
 800a562:	3b01      	subs	r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	b410      	push	{r4}
 800a568:	6093      	str	r3, [r2, #8]
 800a56a:	da08      	bge.n	800a57e <__sfputc_r+0x1e>
 800a56c:	6994      	ldr	r4, [r2, #24]
 800a56e:	42a3      	cmp	r3, r4
 800a570:	db01      	blt.n	800a576 <__sfputc_r+0x16>
 800a572:	290a      	cmp	r1, #10
 800a574:	d103      	bne.n	800a57e <__sfputc_r+0x1e>
 800a576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a57a:	f000 b94b 	b.w	800a814 <__swbuf_r>
 800a57e:	6813      	ldr	r3, [r2, #0]
 800a580:	1c58      	adds	r0, r3, #1
 800a582:	6010      	str	r0, [r2, #0]
 800a584:	7019      	strb	r1, [r3, #0]
 800a586:	4608      	mov	r0, r1
 800a588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <__sfputs_r>:
 800a58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a590:	4606      	mov	r6, r0
 800a592:	460f      	mov	r7, r1
 800a594:	4614      	mov	r4, r2
 800a596:	18d5      	adds	r5, r2, r3
 800a598:	42ac      	cmp	r4, r5
 800a59a:	d101      	bne.n	800a5a0 <__sfputs_r+0x12>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e007      	b.n	800a5b0 <__sfputs_r+0x22>
 800a5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a4:	463a      	mov	r2, r7
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ffda 	bl	800a560 <__sfputc_r>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d1f3      	bne.n	800a598 <__sfputs_r+0xa>
 800a5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b4 <_vfiprintf_r>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	b09d      	sub	sp, #116	; 0x74
 800a5bc:	4614      	mov	r4, r2
 800a5be:	4698      	mov	r8, r3
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	b118      	cbz	r0, 800a5cc <_vfiprintf_r+0x18>
 800a5c4:	6983      	ldr	r3, [r0, #24]
 800a5c6:	b90b      	cbnz	r3, 800a5cc <_vfiprintf_r+0x18>
 800a5c8:	f000 fb14 	bl	800abf4 <__sinit>
 800a5cc:	4b89      	ldr	r3, [pc, #548]	; (800a7f4 <_vfiprintf_r+0x240>)
 800a5ce:	429d      	cmp	r5, r3
 800a5d0:	d11b      	bne.n	800a60a <_vfiprintf_r+0x56>
 800a5d2:	6875      	ldr	r5, [r6, #4]
 800a5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d6:	07d9      	lsls	r1, r3, #31
 800a5d8:	d405      	bmi.n	800a5e6 <_vfiprintf_r+0x32>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	059a      	lsls	r2, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_vfiprintf_r+0x32>
 800a5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5e2:	f000 fba5 	bl	800ad30 <__retarget_lock_acquire_recursive>
 800a5e6:	89ab      	ldrh	r3, [r5, #12]
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	d501      	bpl.n	800a5f0 <_vfiprintf_r+0x3c>
 800a5ec:	692b      	ldr	r3, [r5, #16]
 800a5ee:	b9eb      	cbnz	r3, 800a62c <_vfiprintf_r+0x78>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f000 f96e 	bl	800a8d4 <__swsetup_r>
 800a5f8:	b1c0      	cbz	r0, 800a62c <_vfiprintf_r+0x78>
 800a5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fc:	07dc      	lsls	r4, r3, #31
 800a5fe:	d50e      	bpl.n	800a61e <_vfiprintf_r+0x6a>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	b01d      	add	sp, #116	; 0x74
 800a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60a:	4b7b      	ldr	r3, [pc, #492]	; (800a7f8 <_vfiprintf_r+0x244>)
 800a60c:	429d      	cmp	r5, r3
 800a60e:	d101      	bne.n	800a614 <_vfiprintf_r+0x60>
 800a610:	68b5      	ldr	r5, [r6, #8]
 800a612:	e7df      	b.n	800a5d4 <_vfiprintf_r+0x20>
 800a614:	4b79      	ldr	r3, [pc, #484]	; (800a7fc <_vfiprintf_r+0x248>)
 800a616:	429d      	cmp	r5, r3
 800a618:	bf08      	it	eq
 800a61a:	68f5      	ldreq	r5, [r6, #12]
 800a61c:	e7da      	b.n	800a5d4 <_vfiprintf_r+0x20>
 800a61e:	89ab      	ldrh	r3, [r5, #12]
 800a620:	0598      	lsls	r0, r3, #22
 800a622:	d4ed      	bmi.n	800a600 <_vfiprintf_r+0x4c>
 800a624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a626:	f000 fb84 	bl	800ad32 <__retarget_lock_release_recursive>
 800a62a:	e7e9      	b.n	800a600 <_vfiprintf_r+0x4c>
 800a62c:	2300      	movs	r3, #0
 800a62e:	9309      	str	r3, [sp, #36]	; 0x24
 800a630:	2320      	movs	r3, #32
 800a632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a636:	f8cd 800c 	str.w	r8, [sp, #12]
 800a63a:	2330      	movs	r3, #48	; 0x30
 800a63c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a800 <_vfiprintf_r+0x24c>
 800a640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a644:	f04f 0901 	mov.w	r9, #1
 800a648:	4623      	mov	r3, r4
 800a64a:	469a      	mov	sl, r3
 800a64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a650:	b10a      	cbz	r2, 800a656 <_vfiprintf_r+0xa2>
 800a652:	2a25      	cmp	r2, #37	; 0x25
 800a654:	d1f9      	bne.n	800a64a <_vfiprintf_r+0x96>
 800a656:	ebba 0b04 	subs.w	fp, sl, r4
 800a65a:	d00b      	beq.n	800a674 <_vfiprintf_r+0xc0>
 800a65c:	465b      	mov	r3, fp
 800a65e:	4622      	mov	r2, r4
 800a660:	4629      	mov	r1, r5
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ff93 	bl	800a58e <__sfputs_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	f000 80aa 	beq.w	800a7c2 <_vfiprintf_r+0x20e>
 800a66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a670:	445a      	add	r2, fp
 800a672:	9209      	str	r2, [sp, #36]	; 0x24
 800a674:	f89a 3000 	ldrb.w	r3, [sl]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 80a2 	beq.w	800a7c2 <_vfiprintf_r+0x20e>
 800a67e:	2300      	movs	r3, #0
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a688:	f10a 0a01 	add.w	sl, sl, #1
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a694:	931a      	str	r3, [sp, #104]	; 0x68
 800a696:	4654      	mov	r4, sl
 800a698:	2205      	movs	r2, #5
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	4858      	ldr	r0, [pc, #352]	; (800a800 <_vfiprintf_r+0x24c>)
 800a6a0:	f7f5 fdc6 	bl	8000230 <memchr>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	b9d8      	cbnz	r0, 800a6e0 <_vfiprintf_r+0x12c>
 800a6a8:	06d1      	lsls	r1, r2, #27
 800a6aa:	bf44      	itt	mi
 800a6ac:	2320      	movmi	r3, #32
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b2:	0713      	lsls	r3, r2, #28
 800a6b4:	bf44      	itt	mi
 800a6b6:	232b      	movmi	r3, #43	; 0x2b
 800a6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c2:	d015      	beq.n	800a6f0 <_vfiprintf_r+0x13c>
 800a6c4:	9a07      	ldr	r2, [sp, #28]
 800a6c6:	4654      	mov	r4, sl
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f04f 0c0a 	mov.w	ip, #10
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d4:	3b30      	subs	r3, #48	; 0x30
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d94e      	bls.n	800a778 <_vfiprintf_r+0x1c4>
 800a6da:	b1b0      	cbz	r0, 800a70a <_vfiprintf_r+0x156>
 800a6dc:	9207      	str	r2, [sp, #28]
 800a6de:	e014      	b.n	800a70a <_vfiprintf_r+0x156>
 800a6e0:	eba0 0308 	sub.w	r3, r0, r8
 800a6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	46a2      	mov	sl, r4
 800a6ee:	e7d2      	b.n	800a696 <_vfiprintf_r+0xe2>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	1d19      	adds	r1, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	9103      	str	r1, [sp, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bfbb      	ittet	lt
 800a6fc:	425b      	neglt	r3, r3
 800a6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a702:	9307      	strge	r3, [sp, #28]
 800a704:	9307      	strlt	r3, [sp, #28]
 800a706:	bfb8      	it	lt
 800a708:	9204      	strlt	r2, [sp, #16]
 800a70a:	7823      	ldrb	r3, [r4, #0]
 800a70c:	2b2e      	cmp	r3, #46	; 0x2e
 800a70e:	d10c      	bne.n	800a72a <_vfiprintf_r+0x176>
 800a710:	7863      	ldrb	r3, [r4, #1]
 800a712:	2b2a      	cmp	r3, #42	; 0x2a
 800a714:	d135      	bne.n	800a782 <_vfiprintf_r+0x1ce>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	1d1a      	adds	r2, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfb8      	it	lt
 800a722:	f04f 33ff 	movlt.w	r3, #4294967295
 800a726:	3402      	adds	r4, #2
 800a728:	9305      	str	r3, [sp, #20]
 800a72a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a810 <_vfiprintf_r+0x25c>
 800a72e:	7821      	ldrb	r1, [r4, #0]
 800a730:	2203      	movs	r2, #3
 800a732:	4650      	mov	r0, sl
 800a734:	f7f5 fd7c 	bl	8000230 <memchr>
 800a738:	b140      	cbz	r0, 800a74c <_vfiprintf_r+0x198>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	eba0 000a 	sub.w	r0, r0, sl
 800a740:	fa03 f000 	lsl.w	r0, r3, r0
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	4303      	orrs	r3, r0
 800a748:	3401      	adds	r4, #1
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a750:	482c      	ldr	r0, [pc, #176]	; (800a804 <_vfiprintf_r+0x250>)
 800a752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a756:	2206      	movs	r2, #6
 800a758:	f7f5 fd6a 	bl	8000230 <memchr>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d03f      	beq.n	800a7e0 <_vfiprintf_r+0x22c>
 800a760:	4b29      	ldr	r3, [pc, #164]	; (800a808 <_vfiprintf_r+0x254>)
 800a762:	bb1b      	cbnz	r3, 800a7ac <_vfiprintf_r+0x1f8>
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	3307      	adds	r3, #7
 800a768:	f023 0307 	bic.w	r3, r3, #7
 800a76c:	3308      	adds	r3, #8
 800a76e:	9303      	str	r3, [sp, #12]
 800a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a772:	443b      	add	r3, r7
 800a774:	9309      	str	r3, [sp, #36]	; 0x24
 800a776:	e767      	b.n	800a648 <_vfiprintf_r+0x94>
 800a778:	fb0c 3202 	mla	r2, ip, r2, r3
 800a77c:	460c      	mov	r4, r1
 800a77e:	2001      	movs	r0, #1
 800a780:	e7a5      	b.n	800a6ce <_vfiprintf_r+0x11a>
 800a782:	2300      	movs	r3, #0
 800a784:	3401      	adds	r4, #1
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	4619      	mov	r1, r3
 800a78a:	f04f 0c0a 	mov.w	ip, #10
 800a78e:	4620      	mov	r0, r4
 800a790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a794:	3a30      	subs	r2, #48	; 0x30
 800a796:	2a09      	cmp	r2, #9
 800a798:	d903      	bls.n	800a7a2 <_vfiprintf_r+0x1ee>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0c5      	beq.n	800a72a <_vfiprintf_r+0x176>
 800a79e:	9105      	str	r1, [sp, #20]
 800a7a0:	e7c3      	b.n	800a72a <_vfiprintf_r+0x176>
 800a7a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e7f0      	b.n	800a78e <_vfiprintf_r+0x1da>
 800a7ac:	ab03      	add	r3, sp, #12
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	462a      	mov	r2, r5
 800a7b2:	4b16      	ldr	r3, [pc, #88]	; (800a80c <_vfiprintf_r+0x258>)
 800a7b4:	a904      	add	r1, sp, #16
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7fd ff9c 	bl	80086f4 <_printf_float>
 800a7bc:	4607      	mov	r7, r0
 800a7be:	1c78      	adds	r0, r7, #1
 800a7c0:	d1d6      	bne.n	800a770 <_vfiprintf_r+0x1bc>
 800a7c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c4:	07d9      	lsls	r1, r3, #31
 800a7c6:	d405      	bmi.n	800a7d4 <_vfiprintf_r+0x220>
 800a7c8:	89ab      	ldrh	r3, [r5, #12]
 800a7ca:	059a      	lsls	r2, r3, #22
 800a7cc:	d402      	bmi.n	800a7d4 <_vfiprintf_r+0x220>
 800a7ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7d0:	f000 faaf 	bl	800ad32 <__retarget_lock_release_recursive>
 800a7d4:	89ab      	ldrh	r3, [r5, #12]
 800a7d6:	065b      	lsls	r3, r3, #25
 800a7d8:	f53f af12 	bmi.w	800a600 <_vfiprintf_r+0x4c>
 800a7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7de:	e711      	b.n	800a604 <_vfiprintf_r+0x50>
 800a7e0:	ab03      	add	r3, sp, #12
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <_vfiprintf_r+0x258>)
 800a7e8:	a904      	add	r1, sp, #16
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f7fe fa26 	bl	8008c3c <_printf_i>
 800a7f0:	e7e4      	b.n	800a7bc <_vfiprintf_r+0x208>
 800a7f2:	bf00      	nop
 800a7f4:	0800b444 	.word	0x0800b444
 800a7f8:	0800b464 	.word	0x0800b464
 800a7fc:	0800b424 	.word	0x0800b424
 800a800:	0800b312 	.word	0x0800b312
 800a804:	0800b31c 	.word	0x0800b31c
 800a808:	080086f5 	.word	0x080086f5
 800a80c:	0800a58f 	.word	0x0800a58f
 800a810:	0800b318 	.word	0x0800b318

0800a814 <__swbuf_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	4605      	mov	r5, r0
 800a81c:	b118      	cbz	r0, 800a826 <__swbuf_r+0x12>
 800a81e:	6983      	ldr	r3, [r0, #24]
 800a820:	b90b      	cbnz	r3, 800a826 <__swbuf_r+0x12>
 800a822:	f000 f9e7 	bl	800abf4 <__sinit>
 800a826:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <__swbuf_r+0x98>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	d12b      	bne.n	800a884 <__swbuf_r+0x70>
 800a82c:	686c      	ldr	r4, [r5, #4]
 800a82e:	69a3      	ldr	r3, [r4, #24]
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	071a      	lsls	r2, r3, #28
 800a836:	d52f      	bpl.n	800a898 <__swbuf_r+0x84>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	b36b      	cbz	r3, 800a898 <__swbuf_r+0x84>
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	6820      	ldr	r0, [r4, #0]
 800a840:	1ac0      	subs	r0, r0, r3
 800a842:	6963      	ldr	r3, [r4, #20]
 800a844:	b2f6      	uxtb	r6, r6
 800a846:	4283      	cmp	r3, r0
 800a848:	4637      	mov	r7, r6
 800a84a:	dc04      	bgt.n	800a856 <__swbuf_r+0x42>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4628      	mov	r0, r5
 800a850:	f000 f93c 	bl	800aacc <_fflush_r>
 800a854:	bb30      	cbnz	r0, 800a8a4 <__swbuf_r+0x90>
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	3b01      	subs	r3, #1
 800a85a:	60a3      	str	r3, [r4, #8]
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	6022      	str	r2, [r4, #0]
 800a862:	701e      	strb	r6, [r3, #0]
 800a864:	6963      	ldr	r3, [r4, #20]
 800a866:	3001      	adds	r0, #1
 800a868:	4283      	cmp	r3, r0
 800a86a:	d004      	beq.n	800a876 <__swbuf_r+0x62>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	07db      	lsls	r3, r3, #31
 800a870:	d506      	bpl.n	800a880 <__swbuf_r+0x6c>
 800a872:	2e0a      	cmp	r6, #10
 800a874:	d104      	bne.n	800a880 <__swbuf_r+0x6c>
 800a876:	4621      	mov	r1, r4
 800a878:	4628      	mov	r0, r5
 800a87a:	f000 f927 	bl	800aacc <_fflush_r>
 800a87e:	b988      	cbnz	r0, 800a8a4 <__swbuf_r+0x90>
 800a880:	4638      	mov	r0, r7
 800a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <__swbuf_r+0x9c>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d101      	bne.n	800a88e <__swbuf_r+0x7a>
 800a88a:	68ac      	ldr	r4, [r5, #8]
 800a88c:	e7cf      	b.n	800a82e <__swbuf_r+0x1a>
 800a88e:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <__swbuf_r+0xa0>)
 800a890:	429c      	cmp	r4, r3
 800a892:	bf08      	it	eq
 800a894:	68ec      	ldreq	r4, [r5, #12]
 800a896:	e7ca      	b.n	800a82e <__swbuf_r+0x1a>
 800a898:	4621      	mov	r1, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f81a 	bl	800a8d4 <__swsetup_r>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d0cb      	beq.n	800a83c <__swbuf_r+0x28>
 800a8a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8a8:	e7ea      	b.n	800a880 <__swbuf_r+0x6c>
 800a8aa:	bf00      	nop
 800a8ac:	0800b444 	.word	0x0800b444
 800a8b0:	0800b464 	.word	0x0800b464
 800a8b4:	0800b424 	.word	0x0800b424

0800a8b8 <__ascii_wctomb>:
 800a8b8:	b149      	cbz	r1, 800a8ce <__ascii_wctomb+0x16>
 800a8ba:	2aff      	cmp	r2, #255	; 0xff
 800a8bc:	bf85      	ittet	hi
 800a8be:	238a      	movhi	r3, #138	; 0x8a
 800a8c0:	6003      	strhi	r3, [r0, #0]
 800a8c2:	700a      	strbls	r2, [r1, #0]
 800a8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8c8:	bf98      	it	ls
 800a8ca:	2001      	movls	r0, #1
 800a8cc:	4770      	bx	lr
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <__swsetup_r>:
 800a8d4:	4b32      	ldr	r3, [pc, #200]	; (800a9a0 <__swsetup_r+0xcc>)
 800a8d6:	b570      	push	{r4, r5, r6, lr}
 800a8d8:	681d      	ldr	r5, [r3, #0]
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	b125      	cbz	r5, 800a8ea <__swsetup_r+0x16>
 800a8e0:	69ab      	ldr	r3, [r5, #24]
 800a8e2:	b913      	cbnz	r3, 800a8ea <__swsetup_r+0x16>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f000 f985 	bl	800abf4 <__sinit>
 800a8ea:	4b2e      	ldr	r3, [pc, #184]	; (800a9a4 <__swsetup_r+0xd0>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	d10f      	bne.n	800a910 <__swsetup_r+0x3c>
 800a8f0:	686c      	ldr	r4, [r5, #4]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	d42c      	bmi.n	800a956 <__swsetup_r+0x82>
 800a8fc:	06dd      	lsls	r5, r3, #27
 800a8fe:	d411      	bmi.n	800a924 <__swsetup_r+0x50>
 800a900:	2309      	movs	r3, #9
 800a902:	6033      	str	r3, [r6, #0]
 800a904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	e03e      	b.n	800a98e <__swsetup_r+0xba>
 800a910:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <__swsetup_r+0xd4>)
 800a912:	429c      	cmp	r4, r3
 800a914:	d101      	bne.n	800a91a <__swsetup_r+0x46>
 800a916:	68ac      	ldr	r4, [r5, #8]
 800a918:	e7eb      	b.n	800a8f2 <__swsetup_r+0x1e>
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <__swsetup_r+0xd8>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	bf08      	it	eq
 800a920:	68ec      	ldreq	r4, [r5, #12]
 800a922:	e7e6      	b.n	800a8f2 <__swsetup_r+0x1e>
 800a924:	0758      	lsls	r0, r3, #29
 800a926:	d512      	bpl.n	800a94e <__swsetup_r+0x7a>
 800a928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92a:	b141      	cbz	r1, 800a93e <__swsetup_r+0x6a>
 800a92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <__swsetup_r+0x66>
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff fcd5 	bl	800a2e4 <_free_r>
 800a93a:	2300      	movs	r3, #0
 800a93c:	6363      	str	r3, [r4, #52]	; 0x34
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	2300      	movs	r3, #0
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0308 	orr.w	r3, r3, #8
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	b94b      	cbnz	r3, 800a96e <__swsetup_r+0x9a>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a964:	d003      	beq.n	800a96e <__swsetup_r+0x9a>
 800a966:	4621      	mov	r1, r4
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 fa09 	bl	800ad80 <__smakebuf_r>
 800a96e:	89a0      	ldrh	r0, [r4, #12]
 800a970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a974:	f010 0301 	ands.w	r3, r0, #1
 800a978:	d00a      	beq.n	800a990 <__swsetup_r+0xbc>
 800a97a:	2300      	movs	r3, #0
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	6963      	ldr	r3, [r4, #20]
 800a980:	425b      	negs	r3, r3
 800a982:	61a3      	str	r3, [r4, #24]
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	b943      	cbnz	r3, 800a99a <__swsetup_r+0xc6>
 800a988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a98c:	d1ba      	bne.n	800a904 <__swsetup_r+0x30>
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	0781      	lsls	r1, r0, #30
 800a992:	bf58      	it	pl
 800a994:	6963      	ldrpl	r3, [r4, #20]
 800a996:	60a3      	str	r3, [r4, #8]
 800a998:	e7f4      	b.n	800a984 <__swsetup_r+0xb0>
 800a99a:	2000      	movs	r0, #0
 800a99c:	e7f7      	b.n	800a98e <__swsetup_r+0xba>
 800a99e:	bf00      	nop
 800a9a0:	20000018 	.word	0x20000018
 800a9a4:	0800b444 	.word	0x0800b444
 800a9a8:	0800b464 	.word	0x0800b464
 800a9ac:	0800b424 	.word	0x0800b424

0800a9b0 <abort>:
 800a9b0:	b508      	push	{r3, lr}
 800a9b2:	2006      	movs	r0, #6
 800a9b4:	f000 fa4c 	bl	800ae50 <raise>
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	f7f7 fddf 	bl	800257c <_exit>
	...

0800a9c0 <__sflush_r>:
 800a9c0:	898a      	ldrh	r2, [r1, #12]
 800a9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	0710      	lsls	r0, r2, #28
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	d458      	bmi.n	800aa80 <__sflush_r+0xc0>
 800a9ce:	684b      	ldr	r3, [r1, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dc05      	bgt.n	800a9e0 <__sflush_r+0x20>
 800a9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dc02      	bgt.n	800a9e0 <__sflush_r+0x20>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9e2:	2e00      	cmp	r6, #0
 800a9e4:	d0f9      	beq.n	800a9da <__sflush_r+0x1a>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9ec:	682f      	ldr	r7, [r5, #0]
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	d032      	beq.n	800aa58 <__sflush_r+0x98>
 800a9f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	075a      	lsls	r2, r3, #29
 800a9f8:	d505      	bpl.n	800aa06 <__sflush_r+0x46>
 800a9fa:	6863      	ldr	r3, [r4, #4]
 800a9fc:	1ac0      	subs	r0, r0, r3
 800a9fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa00:	b10b      	cbz	r3, 800aa06 <__sflush_r+0x46>
 800aa02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa04:	1ac0      	subs	r0, r0, r3
 800aa06:	2300      	movs	r3, #0
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa0c:	6a21      	ldr	r1, [r4, #32]
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b0      	blx	r6
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	d106      	bne.n	800aa26 <__sflush_r+0x66>
 800aa18:	6829      	ldr	r1, [r5, #0]
 800aa1a:	291d      	cmp	r1, #29
 800aa1c:	d82c      	bhi.n	800aa78 <__sflush_r+0xb8>
 800aa1e:	4a2a      	ldr	r2, [pc, #168]	; (800aac8 <__sflush_r+0x108>)
 800aa20:	40ca      	lsrs	r2, r1
 800aa22:	07d6      	lsls	r6, r2, #31
 800aa24:	d528      	bpl.n	800aa78 <__sflush_r+0xb8>
 800aa26:	2200      	movs	r2, #0
 800aa28:	6062      	str	r2, [r4, #4]
 800aa2a:	04d9      	lsls	r1, r3, #19
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	d504      	bpl.n	800aa3c <__sflush_r+0x7c>
 800aa32:	1c42      	adds	r2, r0, #1
 800aa34:	d101      	bne.n	800aa3a <__sflush_r+0x7a>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	b903      	cbnz	r3, 800aa3c <__sflush_r+0x7c>
 800aa3a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa3e:	602f      	str	r7, [r5, #0]
 800aa40:	2900      	cmp	r1, #0
 800aa42:	d0ca      	beq.n	800a9da <__sflush_r+0x1a>
 800aa44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d002      	beq.n	800aa52 <__sflush_r+0x92>
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7ff fc49 	bl	800a2e4 <_free_r>
 800aa52:	2000      	movs	r0, #0
 800aa54:	6360      	str	r0, [r4, #52]	; 0x34
 800aa56:	e7c1      	b.n	800a9dc <__sflush_r+0x1c>
 800aa58:	6a21      	ldr	r1, [r4, #32]
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b0      	blx	r6
 800aa60:	1c41      	adds	r1, r0, #1
 800aa62:	d1c7      	bne.n	800a9f4 <__sflush_r+0x34>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0c4      	beq.n	800a9f4 <__sflush_r+0x34>
 800aa6a:	2b1d      	cmp	r3, #29
 800aa6c:	d001      	beq.n	800aa72 <__sflush_r+0xb2>
 800aa6e:	2b16      	cmp	r3, #22
 800aa70:	d101      	bne.n	800aa76 <__sflush_r+0xb6>
 800aa72:	602f      	str	r7, [r5, #0]
 800aa74:	e7b1      	b.n	800a9da <__sflush_r+0x1a>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa7c:	81a3      	strh	r3, [r4, #12]
 800aa7e:	e7ad      	b.n	800a9dc <__sflush_r+0x1c>
 800aa80:	690f      	ldr	r7, [r1, #16]
 800aa82:	2f00      	cmp	r7, #0
 800aa84:	d0a9      	beq.n	800a9da <__sflush_r+0x1a>
 800aa86:	0793      	lsls	r3, r2, #30
 800aa88:	680e      	ldr	r6, [r1, #0]
 800aa8a:	bf08      	it	eq
 800aa8c:	694b      	ldreq	r3, [r1, #20]
 800aa8e:	600f      	str	r7, [r1, #0]
 800aa90:	bf18      	it	ne
 800aa92:	2300      	movne	r3, #0
 800aa94:	eba6 0807 	sub.w	r8, r6, r7
 800aa98:	608b      	str	r3, [r1, #8]
 800aa9a:	f1b8 0f00 	cmp.w	r8, #0
 800aa9e:	dd9c      	ble.n	800a9da <__sflush_r+0x1a>
 800aaa0:	6a21      	ldr	r1, [r4, #32]
 800aaa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aaa4:	4643      	mov	r3, r8
 800aaa6:	463a      	mov	r2, r7
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b0      	blx	r6
 800aaac:	2800      	cmp	r0, #0
 800aaae:	dc06      	bgt.n	800aabe <__sflush_r+0xfe>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295
 800aabc:	e78e      	b.n	800a9dc <__sflush_r+0x1c>
 800aabe:	4407      	add	r7, r0
 800aac0:	eba8 0800 	sub.w	r8, r8, r0
 800aac4:	e7e9      	b.n	800aa9a <__sflush_r+0xda>
 800aac6:	bf00      	nop
 800aac8:	20400001 	.word	0x20400001

0800aacc <_fflush_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	690b      	ldr	r3, [r1, #16]
 800aad0:	4605      	mov	r5, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	b913      	cbnz	r3, 800aadc <_fflush_r+0x10>
 800aad6:	2500      	movs	r5, #0
 800aad8:	4628      	mov	r0, r5
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	b118      	cbz	r0, 800aae6 <_fflush_r+0x1a>
 800aade:	6983      	ldr	r3, [r0, #24]
 800aae0:	b90b      	cbnz	r3, 800aae6 <_fflush_r+0x1a>
 800aae2:	f000 f887 	bl	800abf4 <__sinit>
 800aae6:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <_fflush_r+0x6c>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d11b      	bne.n	800ab24 <_fflush_r+0x58>
 800aaec:	686c      	ldr	r4, [r5, #4]
 800aaee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0ef      	beq.n	800aad6 <_fflush_r+0xa>
 800aaf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaf8:	07d0      	lsls	r0, r2, #31
 800aafa:	d404      	bmi.n	800ab06 <_fflush_r+0x3a>
 800aafc:	0599      	lsls	r1, r3, #22
 800aafe:	d402      	bmi.n	800ab06 <_fflush_r+0x3a>
 800ab00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab02:	f000 f915 	bl	800ad30 <__retarget_lock_acquire_recursive>
 800ab06:	4628      	mov	r0, r5
 800ab08:	4621      	mov	r1, r4
 800ab0a:	f7ff ff59 	bl	800a9c0 <__sflush_r>
 800ab0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab10:	07da      	lsls	r2, r3, #31
 800ab12:	4605      	mov	r5, r0
 800ab14:	d4e0      	bmi.n	800aad8 <_fflush_r+0xc>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	059b      	lsls	r3, r3, #22
 800ab1a:	d4dd      	bmi.n	800aad8 <_fflush_r+0xc>
 800ab1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1e:	f000 f908 	bl	800ad32 <__retarget_lock_release_recursive>
 800ab22:	e7d9      	b.n	800aad8 <_fflush_r+0xc>
 800ab24:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <_fflush_r+0x70>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d101      	bne.n	800ab2e <_fflush_r+0x62>
 800ab2a:	68ac      	ldr	r4, [r5, #8]
 800ab2c:	e7df      	b.n	800aaee <_fflush_r+0x22>
 800ab2e:	4b04      	ldr	r3, [pc, #16]	; (800ab40 <_fflush_r+0x74>)
 800ab30:	429c      	cmp	r4, r3
 800ab32:	bf08      	it	eq
 800ab34:	68ec      	ldreq	r4, [r5, #12]
 800ab36:	e7da      	b.n	800aaee <_fflush_r+0x22>
 800ab38:	0800b444 	.word	0x0800b444
 800ab3c:	0800b464 	.word	0x0800b464
 800ab40:	0800b424 	.word	0x0800b424

0800ab44 <std>:
 800ab44:	2300      	movs	r3, #0
 800ab46:	b510      	push	{r4, lr}
 800ab48:	4604      	mov	r4, r0
 800ab4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab52:	6083      	str	r3, [r0, #8]
 800ab54:	8181      	strh	r1, [r0, #12]
 800ab56:	6643      	str	r3, [r0, #100]	; 0x64
 800ab58:	81c2      	strh	r2, [r0, #14]
 800ab5a:	6183      	str	r3, [r0, #24]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	2208      	movs	r2, #8
 800ab60:	305c      	adds	r0, #92	; 0x5c
 800ab62:	f7fd fd1f 	bl	80085a4 <memset>
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <std+0x38>)
 800ab68:	6263      	str	r3, [r4, #36]	; 0x24
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <std+0x3c>)
 800ab6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab6e:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <std+0x40>)
 800ab70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab72:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <std+0x44>)
 800ab74:	6224      	str	r4, [r4, #32]
 800ab76:	6323      	str	r3, [r4, #48]	; 0x30
 800ab78:	bd10      	pop	{r4, pc}
 800ab7a:	bf00      	nop
 800ab7c:	0800ae89 	.word	0x0800ae89
 800ab80:	0800aeab 	.word	0x0800aeab
 800ab84:	0800aee3 	.word	0x0800aee3
 800ab88:	0800af07 	.word	0x0800af07

0800ab8c <_cleanup_r>:
 800ab8c:	4901      	ldr	r1, [pc, #4]	; (800ab94 <_cleanup_r+0x8>)
 800ab8e:	f000 b8af 	b.w	800acf0 <_fwalk_reent>
 800ab92:	bf00      	nop
 800ab94:	0800aacd 	.word	0x0800aacd

0800ab98 <__sfmoreglue>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	2268      	movs	r2, #104	; 0x68
 800ab9c:	1e4d      	subs	r5, r1, #1
 800ab9e:	4355      	muls	r5, r2
 800aba0:	460e      	mov	r6, r1
 800aba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aba6:	f7ff fc09 	bl	800a3bc <_malloc_r>
 800abaa:	4604      	mov	r4, r0
 800abac:	b140      	cbz	r0, 800abc0 <__sfmoreglue+0x28>
 800abae:	2100      	movs	r1, #0
 800abb0:	e9c0 1600 	strd	r1, r6, [r0]
 800abb4:	300c      	adds	r0, #12
 800abb6:	60a0      	str	r0, [r4, #8]
 800abb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abbc:	f7fd fcf2 	bl	80085a4 <memset>
 800abc0:	4620      	mov	r0, r4
 800abc2:	bd70      	pop	{r4, r5, r6, pc}

0800abc4 <__sfp_lock_acquire>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__sfp_lock_acquire+0x8>)
 800abc6:	f000 b8b3 	b.w	800ad30 <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	200005c9 	.word	0x200005c9

0800abd0 <__sfp_lock_release>:
 800abd0:	4801      	ldr	r0, [pc, #4]	; (800abd8 <__sfp_lock_release+0x8>)
 800abd2:	f000 b8ae 	b.w	800ad32 <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	200005c9 	.word	0x200005c9

0800abdc <__sinit_lock_acquire>:
 800abdc:	4801      	ldr	r0, [pc, #4]	; (800abe4 <__sinit_lock_acquire+0x8>)
 800abde:	f000 b8a7 	b.w	800ad30 <__retarget_lock_acquire_recursive>
 800abe2:	bf00      	nop
 800abe4:	200005ca 	.word	0x200005ca

0800abe8 <__sinit_lock_release>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__sinit_lock_release+0x8>)
 800abea:	f000 b8a2 	b.w	800ad32 <__retarget_lock_release_recursive>
 800abee:	bf00      	nop
 800abf0:	200005ca 	.word	0x200005ca

0800abf4 <__sinit>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	4604      	mov	r4, r0
 800abf8:	f7ff fff0 	bl	800abdc <__sinit_lock_acquire>
 800abfc:	69a3      	ldr	r3, [r4, #24]
 800abfe:	b11b      	cbz	r3, 800ac08 <__sinit+0x14>
 800ac00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac04:	f7ff bff0 	b.w	800abe8 <__sinit_lock_release>
 800ac08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac0c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <__sinit+0x68>)
 800ac10:	4a13      	ldr	r2, [pc, #76]	; (800ac60 <__sinit+0x6c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	bf04      	itt	eq
 800ac1a:	2301      	moveq	r3, #1
 800ac1c:	61a3      	streq	r3, [r4, #24]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f820 	bl	800ac64 <__sfp>
 800ac24:	6060      	str	r0, [r4, #4]
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 f81c 	bl	800ac64 <__sfp>
 800ac2c:	60a0      	str	r0, [r4, #8]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f818 	bl	800ac64 <__sfp>
 800ac34:	2200      	movs	r2, #0
 800ac36:	60e0      	str	r0, [r4, #12]
 800ac38:	2104      	movs	r1, #4
 800ac3a:	6860      	ldr	r0, [r4, #4]
 800ac3c:	f7ff ff82 	bl	800ab44 <std>
 800ac40:	68a0      	ldr	r0, [r4, #8]
 800ac42:	2201      	movs	r2, #1
 800ac44:	2109      	movs	r1, #9
 800ac46:	f7ff ff7d 	bl	800ab44 <std>
 800ac4a:	68e0      	ldr	r0, [r4, #12]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	2112      	movs	r1, #18
 800ac50:	f7ff ff78 	bl	800ab44 <std>
 800ac54:	2301      	movs	r3, #1
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	e7d2      	b.n	800ac00 <__sinit+0xc>
 800ac5a:	bf00      	nop
 800ac5c:	0800b0a8 	.word	0x0800b0a8
 800ac60:	0800ab8d 	.word	0x0800ab8d

0800ac64 <__sfp>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	4607      	mov	r7, r0
 800ac68:	f7ff ffac 	bl	800abc4 <__sfp_lock_acquire>
 800ac6c:	4b1e      	ldr	r3, [pc, #120]	; (800ace8 <__sfp+0x84>)
 800ac6e:	681e      	ldr	r6, [r3, #0]
 800ac70:	69b3      	ldr	r3, [r6, #24]
 800ac72:	b913      	cbnz	r3, 800ac7a <__sfp+0x16>
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff ffbd 	bl	800abf4 <__sinit>
 800ac7a:	3648      	adds	r6, #72	; 0x48
 800ac7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	d503      	bpl.n	800ac8c <__sfp+0x28>
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	b30b      	cbz	r3, 800accc <__sfp+0x68>
 800ac88:	6836      	ldr	r6, [r6, #0]
 800ac8a:	e7f7      	b.n	800ac7c <__sfp+0x18>
 800ac8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac90:	b9d5      	cbnz	r5, 800acc8 <__sfp+0x64>
 800ac92:	4b16      	ldr	r3, [pc, #88]	; (800acec <__sfp+0x88>)
 800ac94:	60e3      	str	r3, [r4, #12]
 800ac96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac9a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac9c:	f000 f847 	bl	800ad2e <__retarget_lock_init_recursive>
 800aca0:	f7ff ff96 	bl	800abd0 <__sfp_lock_release>
 800aca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acac:	6025      	str	r5, [r4, #0]
 800acae:	61a5      	str	r5, [r4, #24]
 800acb0:	2208      	movs	r2, #8
 800acb2:	4629      	mov	r1, r5
 800acb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acb8:	f7fd fc74 	bl	80085a4 <memset>
 800acbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acc4:	4620      	mov	r0, r4
 800acc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc8:	3468      	adds	r4, #104	; 0x68
 800acca:	e7d9      	b.n	800ac80 <__sfp+0x1c>
 800accc:	2104      	movs	r1, #4
 800acce:	4638      	mov	r0, r7
 800acd0:	f7ff ff62 	bl	800ab98 <__sfmoreglue>
 800acd4:	4604      	mov	r4, r0
 800acd6:	6030      	str	r0, [r6, #0]
 800acd8:	2800      	cmp	r0, #0
 800acda:	d1d5      	bne.n	800ac88 <__sfp+0x24>
 800acdc:	f7ff ff78 	bl	800abd0 <__sfp_lock_release>
 800ace0:	230c      	movs	r3, #12
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	e7ee      	b.n	800acc4 <__sfp+0x60>
 800ace6:	bf00      	nop
 800ace8:	0800b0a8 	.word	0x0800b0a8
 800acec:	ffff0001 	.word	0xffff0001

0800acf0 <_fwalk_reent>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	4606      	mov	r6, r0
 800acf6:	4688      	mov	r8, r1
 800acf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acfc:	2700      	movs	r7, #0
 800acfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad02:	f1b9 0901 	subs.w	r9, r9, #1
 800ad06:	d505      	bpl.n	800ad14 <_fwalk_reent+0x24>
 800ad08:	6824      	ldr	r4, [r4, #0]
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d1f7      	bne.n	800acfe <_fwalk_reent+0xe>
 800ad0e:	4638      	mov	r0, r7
 800ad10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad14:	89ab      	ldrh	r3, [r5, #12]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d907      	bls.n	800ad2a <_fwalk_reent+0x3a>
 800ad1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	d003      	beq.n	800ad2a <_fwalk_reent+0x3a>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	47c0      	blx	r8
 800ad28:	4307      	orrs	r7, r0
 800ad2a:	3568      	adds	r5, #104	; 0x68
 800ad2c:	e7e9      	b.n	800ad02 <_fwalk_reent+0x12>

0800ad2e <__retarget_lock_init_recursive>:
 800ad2e:	4770      	bx	lr

0800ad30 <__retarget_lock_acquire_recursive>:
 800ad30:	4770      	bx	lr

0800ad32 <__retarget_lock_release_recursive>:
 800ad32:	4770      	bx	lr

0800ad34 <__swhatbuf_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	460e      	mov	r6, r1
 800ad38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	b096      	sub	sp, #88	; 0x58
 800ad40:	4614      	mov	r4, r2
 800ad42:	461d      	mov	r5, r3
 800ad44:	da08      	bge.n	800ad58 <__swhatbuf_r+0x24>
 800ad46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	602a      	str	r2, [r5, #0]
 800ad4e:	061a      	lsls	r2, r3, #24
 800ad50:	d410      	bmi.n	800ad74 <__swhatbuf_r+0x40>
 800ad52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad56:	e00e      	b.n	800ad76 <__swhatbuf_r+0x42>
 800ad58:	466a      	mov	r2, sp
 800ad5a:	f000 f8fb 	bl	800af54 <_fstat_r>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	dbf1      	blt.n	800ad46 <__swhatbuf_r+0x12>
 800ad62:	9a01      	ldr	r2, [sp, #4]
 800ad64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad6c:	425a      	negs	r2, r3
 800ad6e:	415a      	adcs	r2, r3
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	e7ee      	b.n	800ad52 <__swhatbuf_r+0x1e>
 800ad74:	2340      	movs	r3, #64	; 0x40
 800ad76:	2000      	movs	r0, #0
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	b016      	add	sp, #88	; 0x58
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad80 <__smakebuf_r>:
 800ad80:	898b      	ldrh	r3, [r1, #12]
 800ad82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad84:	079d      	lsls	r5, r3, #30
 800ad86:	4606      	mov	r6, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	d507      	bpl.n	800ad9c <__smakebuf_r+0x1c>
 800ad8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	2301      	movs	r3, #1
 800ad96:	6163      	str	r3, [r4, #20]
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	ab01      	add	r3, sp, #4
 800ad9e:	466a      	mov	r2, sp
 800ada0:	f7ff ffc8 	bl	800ad34 <__swhatbuf_r>
 800ada4:	9900      	ldr	r1, [sp, #0]
 800ada6:	4605      	mov	r5, r0
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff fb07 	bl	800a3bc <_malloc_r>
 800adae:	b948      	cbnz	r0, 800adc4 <__smakebuf_r+0x44>
 800adb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb4:	059a      	lsls	r2, r3, #22
 800adb6:	d4ef      	bmi.n	800ad98 <__smakebuf_r+0x18>
 800adb8:	f023 0303 	bic.w	r3, r3, #3
 800adbc:	f043 0302 	orr.w	r3, r3, #2
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	e7e3      	b.n	800ad8c <__smakebuf_r+0xc>
 800adc4:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <__smakebuf_r+0x7c>)
 800adc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	6020      	str	r0, [r4, #0]
 800adcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	9b00      	ldr	r3, [sp, #0]
 800add4:	6163      	str	r3, [r4, #20]
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	6120      	str	r0, [r4, #16]
 800adda:	b15b      	cbz	r3, 800adf4 <__smakebuf_r+0x74>
 800addc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade0:	4630      	mov	r0, r6
 800ade2:	f000 f8c9 	bl	800af78 <_isatty_r>
 800ade6:	b128      	cbz	r0, 800adf4 <__smakebuf_r+0x74>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	89a0      	ldrh	r0, [r4, #12]
 800adf6:	4305      	orrs	r5, r0
 800adf8:	81a5      	strh	r5, [r4, #12]
 800adfa:	e7cd      	b.n	800ad98 <__smakebuf_r+0x18>
 800adfc:	0800ab8d 	.word	0x0800ab8d

0800ae00 <_raise_r>:
 800ae00:	291f      	cmp	r1, #31
 800ae02:	b538      	push	{r3, r4, r5, lr}
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	d904      	bls.n	800ae14 <_raise_r+0x14>
 800ae0a:	2316      	movs	r3, #22
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae16:	b112      	cbz	r2, 800ae1e <_raise_r+0x1e>
 800ae18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae1c:	b94b      	cbnz	r3, 800ae32 <_raise_r+0x32>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 f830 	bl	800ae84 <_getpid_r>
 800ae24:	462a      	mov	r2, r5
 800ae26:	4601      	mov	r1, r0
 800ae28:	4620      	mov	r0, r4
 800ae2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae2e:	f000 b817 	b.w	800ae60 <_kill_r>
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d00a      	beq.n	800ae4c <_raise_r+0x4c>
 800ae36:	1c59      	adds	r1, r3, #1
 800ae38:	d103      	bne.n	800ae42 <_raise_r+0x42>
 800ae3a:	2316      	movs	r3, #22
 800ae3c:	6003      	str	r3, [r0, #0]
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e7e7      	b.n	800ae12 <_raise_r+0x12>
 800ae42:	2400      	movs	r4, #0
 800ae44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae48:	4628      	mov	r0, r5
 800ae4a:	4798      	blx	r3
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	e7e0      	b.n	800ae12 <_raise_r+0x12>

0800ae50 <raise>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <raise+0xc>)
 800ae52:	4601      	mov	r1, r0
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f7ff bfd3 	b.w	800ae00 <_raise_r>
 800ae5a:	bf00      	nop
 800ae5c:	20000018 	.word	0x20000018

0800ae60 <_kill_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d07      	ldr	r5, [pc, #28]	; (800ae80 <_kill_r+0x20>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	602b      	str	r3, [r5, #0]
 800ae6e:	f7f7 fb75 	bl	800255c <_kill>
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d102      	bne.n	800ae7c <_kill_r+0x1c>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	b103      	cbz	r3, 800ae7c <_kill_r+0x1c>
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	200005c4 	.word	0x200005c4

0800ae84 <_getpid_r>:
 800ae84:	f7f7 bb62 	b.w	800254c <_getpid>

0800ae88 <__sread>:
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae90:	f000 f894 	bl	800afbc <_read_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	bfab      	itete	ge
 800ae98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae9c:	181b      	addge	r3, r3, r0
 800ae9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aea2:	bfac      	ite	ge
 800aea4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aea6:	81a3      	strhlt	r3, [r4, #12]
 800aea8:	bd10      	pop	{r4, pc}

0800aeaa <__swrite>:
 800aeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeae:	461f      	mov	r7, r3
 800aeb0:	898b      	ldrh	r3, [r1, #12]
 800aeb2:	05db      	lsls	r3, r3, #23
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	4616      	mov	r6, r2
 800aeba:	d505      	bpl.n	800aec8 <__swrite+0x1e>
 800aebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec0:	2302      	movs	r3, #2
 800aec2:	2200      	movs	r2, #0
 800aec4:	f000 f868 	bl	800af98 <_lseek_r>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	4628      	mov	r0, r5
 800aeda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aede:	f000 b817 	b.w	800af10 <_write_r>

0800aee2 <__sseek>:
 800aee2:	b510      	push	{r4, lr}
 800aee4:	460c      	mov	r4, r1
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	f000 f855 	bl	800af98 <_lseek_r>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	bf15      	itete	ne
 800aef4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aefa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aefe:	81a3      	strheq	r3, [r4, #12]
 800af00:	bf18      	it	ne
 800af02:	81a3      	strhne	r3, [r4, #12]
 800af04:	bd10      	pop	{r4, pc}

0800af06 <__sclose>:
 800af06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0a:	f000 b813 	b.w	800af34 <_close_r>
	...

0800af10 <_write_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	; (800af30 <_write_r+0x20>)
 800af14:	4604      	mov	r4, r0
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	2200      	movs	r2, #0
 800af1c:	602a      	str	r2, [r5, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f7f7 fb53 	bl	80025ca <_write>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_write_r+0x1e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_write_r+0x1e>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	200005c4 	.word	0x200005c4

0800af34 <_close_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_close_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f7 fb5f 	bl	8002602 <_close>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_close_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_close_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	200005c4 	.word	0x200005c4

0800af54 <_fstat_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_fstat_r+0x20>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f7f7 fb5a 	bl	800261a <_fstat>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d102      	bne.n	800af70 <_fstat_r+0x1c>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	b103      	cbz	r3, 800af70 <_fstat_r+0x1c>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	200005c4 	.word	0x200005c4

0800af78 <_isatty_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d06      	ldr	r5, [pc, #24]	; (800af94 <_isatty_r+0x1c>)
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	f7f7 fb59 	bl	800263a <_isatty>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_isatty_r+0x1a>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_isatty_r+0x1a>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	200005c4 	.word	0x200005c4

0800af98 <_lseek_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	; (800afb8 <_lseek_r+0x20>)
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7f7 fb52 	bl	8002650 <_lseek>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_lseek_r+0x1e>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_lseek_r+0x1e>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	200005c4 	.word	0x200005c4

0800afbc <_read_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4d07      	ldr	r5, [pc, #28]	; (800afdc <_read_r+0x20>)
 800afc0:	4604      	mov	r4, r0
 800afc2:	4608      	mov	r0, r1
 800afc4:	4611      	mov	r1, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	602a      	str	r2, [r5, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	f7f7 fae0 	bl	8002590 <_read>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_read_r+0x1e>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_read_r+0x1e>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	200005c4 	.word	0x200005c4

0800afe0 <_init>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	bf00      	nop
 800afe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe6:	bc08      	pop	{r3}
 800afe8:	469e      	mov	lr, r3
 800afea:	4770      	bx	lr

0800afec <_fini>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr
